// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "ps-parser.jay"
//
// ps-parser.jay: The Parser for the PlayScript language
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//          Ben Cooley	    (bcooley@zynga.com)
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharpPs;
using Linq = Mono.CSharpPs.Linq;
using Enum = Mono.CSharpPs.Enum;
using Attribute = Mono.CSharpPs.Attribute;
using Delegate = Mono.CSharpPs.Delegate;
using Nullable = Mono.CSharpPs.Nullable;

namespace Mono.PlayScript
{
	/// <summary>
	///    The PlayScript Parser
	/// </summary>
	public class PlayScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		public bool parsing_playscript = false;
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = PsConsts.PsRootNamespace;
	
		NamespaceContainer current_namespace;
		NamespaceContainer prev_namespace;
		NamespaceContainer private_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
		Constructor current_constructor;
		
		// Set by config params to enable/disable inclusion of methods, fields, consts, classes, structs, etc.
		bool is_config_enabled = true;
		
		bool is_package_function = false;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		// Current modifier namespace identifier
		public string ns_modifier;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation, savedOpenLocation, savedCloseLocation, savedEventAssignLocation;
		Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
		Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeCommas = new List<Location> ();
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN error",
//t    "no_config_package_directive : import_directive",
//t    "no_config_package_directive : use_namespace_directive",
//t    "package_directive : no_config_package_directive",
//t    "package_directive : config_package_directive",
//t    "$$2 :",
//t    "config_package_directive : IDENTIFIER_CONFIG $$2 no_config_package_directive",
//t    "$$3 :",
//t    "config_package_directive : IDENTIFIER_CONFIG $$3 OPEN_BRACE opt_package_directives CLOSE_BRACE",
//t    "package_directives : package_directive",
//t    "package_directives : package_directives package_directive",
//t    "use_namespace_directive : use_namespace",
//t    "use_namespace : USE NAMESPACE IDENTIFIER SEMICOLON",
//t    "import_directive : import_package",
//t    "$$4 :",
//t    "import_package : IMPORT namespace_or_type_expr $$4 DOT_STAR SEMICOLON",
//t    "import_package : IMPORT typeof_type_expression SEMICOLON",
//t    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "import_package : IMPORT error",
//t    "$$5 :",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "package_declaration : opt_attributes PACKAGE $$5 opt_package_name $$6 OPEN_BRACE $$7 opt_package_statements_or_blocks CLOSE_BRACE $$8 opt_package_statements_or_blocks",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_package_statements_or_blocks : opt_extern_alias_directives opt_package_statements",
//t    "opt_package_statements_or_blocks : OPEN_BRACE opt_package_statements_or_blocks CLOSE_BRACE",
//t    "opt_package_directives :",
//t    "opt_package_directives : package_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_statements :",
//t    "opt_package_statements : package_statements",
//t    "package_statements : package_statement",
//t    "package_statements : package_statements package_statement",
//t    "package_statement : no_config_package_statement",
//t    "package_statement : config_package_statement",
//t    "package_statement : attribute_sections CLOSE_BRACE",
//t    "no_config_package_statement : type_declaration",
//t    "no_config_package_statement : method_declaration",
//t    "no_config_package_statement : no_config_package_directive",
//t    "$$9 :",
//t    "config_package_statement : IDENTIFIER_CONFIG $$9 no_config_package_statement",
//t    "$$10 :",
//t    "config_package_statement : IDENTIFIER_CONFIG $$10 OPEN_BRACE opt_package_statements CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "type_declaration : namespace_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$11 :",
//t    "attribute_section : OPEN_BRACKET $$11 attribute_section_cont",
//t    "$$12 :",
//t    "attribute_section_cont : attribute_target COLON $$12 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$13 :",
//t    "attribute : attribute_name $$13 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$14 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$14 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : member_config_block",
//t    "class_member_declaration : config_member_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : use_namespace_class_directive",
//t    "class_member_declaration : import_class_directive",
//t    "class_member_declaration : error",
//t    "use_namespace_class_directive : opt_attributes opt_modifiers use_namespace_directive",
//t    "import_class_directive : opt_attributes opt_modifiers import_directive",
//t    "$$15 :",
//t    "config_member_declaration : IDENTIFIER_CONFIG $$15 class_member_declaration",
//t    "$$16 :",
//t    "member_config_block : IDENTIFIER_CONFIG $$16 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE",
//t    "$$17 :",
//t    "$$18 :",
//t    "$$19 :",
//t    "$$20 :",
//t    "$$21 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$17 type_declaration_name $$18 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$19 OPEN_BRACE $$20 opt_class_member_declarations CLOSE_BRACE $$21 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$22 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER COLON type $$22 opt_constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER COLON member_type opt_constant_initializer",
//t    "opt_constant_initializer :",
//t    "opt_constant_initializer : constant_initializer",
//t    "$$23 :",
//t    "constant_initializer : ASSIGN $$23 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "$$24 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$24 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$25 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$25 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$26 :",
//t    "opt_field_initializer : ASSIGN $$26 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER COLON member_type",
//t    "$$27 :",
//t    "field_declarator : COMMA IDENTIFIER COLON member_type ASSIGN $$27 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size COLON member_type",
//t    "$$28 :",
//t    "fixed_field_size : OPEN_BRACKET $$28 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : error",
//t    "$$29 :",
//t    "method_declaration : method_header $$29 method_body",
//t    "$$30 :",
//t    "$$31 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$30 opt_formal_parameter_list CLOSE_PARENS opt_method_return_type $$31 opt_type_parameter_constraints_clauses",
//t    "$$32 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_GET method_declaration_name OPEN_PARENS $$32 opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "$$33 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_SET method_declaration_name OPEN_PARENS $$33 opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "$$34 :",
//t    "$$35 :",
//t    "$$36 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$34 method_declaration_name OPEN_PARENS $$35 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$36 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "opt_method_return_type :",
//t    "opt_method_return_type : method_colon member_type",
//t    "method_colon : COLON",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$37 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$37 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes DOTDOTDOT error",
//t    "$$38 :",
//t    "$$39 :",
//t    "$$40 :",
//t    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$38 OPEN_BRACE $$39 accessor_declarations $$40 CLOSE_BRACE",
//t    "$$41 :",
//t    "$$42 :",
//t    "$$43 :",
//t    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS COLON member_type OPEN_BRACE $$42 accessor_declarations $$43 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$44 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$44 accessor_body",
//t    "$$45 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$45 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$46 :",
//t    "$$47 :",
//t    "$$48 :",
//t    "$$49 :",
//t    "$$50 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$46 type_declaration_name $$47 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$48 OPEN_BRACE $$49 opt_interface_member_declarations CLOSE_BRACE $$50 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$51 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$51 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$52 :",
//t    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$52 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_USHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "overloadable_operator : OP_IN",
//t    "$$53 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$53 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$54 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$54 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "$$55 :",
//t    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$55 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$56 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$56 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$57 :",
//t    "$$58 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$57 event_accessor_declarations $$58 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$59 :",
//t    "opt_event_initializer : ASSIGN $$59 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type",
//t    "$$60 :",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type ASSIGN $$60 event_variable_initializer",
//t    "$$61 :",
//t    "event_variable_initializer : $$61 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$62 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$62 event_accessor_block",
//t    "$$63 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$63 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$64 :",
//t    "$$65 :",
//t    "$$66 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$64 OPEN_BRACE $$65 opt_enum_member_declarations $$66 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$67 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$67 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$68 :",
//t    "$$69 :",
//t    "$$70 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE type_declaration_name OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$69 opt_type_parameter_constraints_clauses $$70 SEMICOLON",
//t    "namespace_declaration : opt_attributes opt_modifiers NAMESPACE IDENTIFIER opt_namespace_url SEMICOLON",
//t    "opt_namespace_url :",
//t    "opt_namespace_url : namespace_url",
//t    "namespace_url : ASSIGN LITERAL",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$71 :",
//t    "type_declaration_name : IDENTIFIER $$71 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : STAR",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : new_expression",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : array_initializer",
//t    "primary_expression : object_or_collection_initializer",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : UNDEFINED",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT_AT IDENTIFIER",
//t    "member_access : primary_expression DOT_STAR",
//t    "member_access : primary_expression DOTDOT IDENTIFIER",
//t    "member_access : primary_expression DOTDOT_STAR",
//t    "member_access : primary_expression DOUBLE_COLON IDENTIFIER",
//t    "member_access : primary_expression DOUBLE_COLON OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT_AT OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT OPEN_PARENS expression CLOSE_PARENS",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : SUPER open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : builtin_types open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "object_or_collection_initializer : init_open_brace opt_member_initializer_list init_close_brace_or_complete_completion",
//t    "object_or_collection_initializer : init_open_brace member_initializer_list COMMA init_close_brace",
//t    "init_open_brace : OPEN_BRACE_INIT",
//t    "init_close_brace : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER COLON initializer_value",
//t    "member_initializer : AWAIT ASSIGN initializer_value",
//t    "member_initializer : LITERAL COLON initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "initializer_value : expression",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "new_expression : NEW namespace_or_type_expr",
//t    "new_expression : NEW builtin_types",
//t    "new_expression : NEW OPEN_PARENS expression CLOSE_PARENS",
//t    "new_expression : NEW OP_LT type_expression OP_GT array_initializer",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "array_initializer : init_open_bracket init_close_bracket",
//t    "array_initializer : init_open_bracket_expr variable_initializer_list opt_comma init_close_bracket",
//t    "init_open_bracket : OPEN_BRACKET",
//t    "init_open_bracket_expr : OPEN_BRACKET_EXPR",
//t    "init_close_bracket : CLOSE_BRACKET",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "sizeof_expression : SIZEOF open_parens_any type error",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "checked_expression : CHECKED error",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED error",
//t    "$$72 :",
//t    "$$73 :",
//t    "anonymous_method_expression : FUNCTION OPEN_PARENS $$72 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$73 block",
//t    "$$74 :",
//t    "$$75 :",
//t    "anonymous_method_expression : ASYNC FUNCTION OPEN_PARENS $$74 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$75 block",
//t    "$$76 :",
//t    "$$77 :",
//t    "local_function_statement : FUNCTION IDENTIFIER OPEN_PARENS $$76 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$77 block",
//t    "$$78 :",
//t    "$$79 :",
//t    "local_function_statement : ASYNC FUNCTION IDENTIFIER OPEN_PARENS $$78 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$79 block",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "unary_expression : OP_AT prefixed_unary_expression",
//t    "unary_expression : TYPEOF prefixed_unary_expression",
//t    "unary_expression : DELETE prefixed_unary_expression",
//t    "unary_expression : BANG error",
//t    "unary_expression : TILDE error",
//t    "unary_expression : AWAIT error",
//t    "unary_expression : OP_AT error",
//t    "unary_expression : TYPEOF error",
//t    "unary_expression : DELETE error",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "prefixed_unary_expression : PLUS error",
//t    "prefixed_unary_expression : MINUS error",
//t    "prefixed_unary_expression : OP_INC error",
//t    "prefixed_unary_expression : OP_DEC error",
//t    "prefixed_unary_expression : BITWISE_AND error",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR error",
//t    "multiplicative_expression : multiplicative_expression DIV error",
//t    "multiplicative_expression : multiplicative_expression PERCENT error",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression OP_IN multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "additive_expression : additive_expression PLUS error",
//t    "additive_expression : additive_expression MINUS error",
//t    "additive_expression : additive_expression OP_IN error",
//t    "additive_expression : additive_expression AS error",
//t    "additive_expression : additive_expression IS error",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT error",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT error",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "relational_expression : relational_expression OP_LT error",
//t    "relational_expression : relational_expression OP_GT error",
//t    "relational_expression : relational_expression OP_LE error",
//t    "relational_expression : relational_expression OP_GE error",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "equality_expression : equality_expression OP_REF_EQ relational_expression",
//t    "equality_expression : equality_expression OP_REF_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "and_expression : and_expression BITWISE_AND error",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET error",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND error",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR error",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_USHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "lambda_parameter : AWAIT",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$80 :",
//t    "lambda_expression_body : $$80 expression",
//t    "lambda_expression_body : block",
//t    "lambda_expression_body : error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$81 :",
//t    "lambda_expression : IDENTIFIER ARROW $$81 lambda_expression_body",
//t    "$$82 :",
//t    "lambda_expression : AWAIT ARROW $$82 lambda_expression_body",
//t    "$$83 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$83 lambda_expression_body",
//t    "$$84 :",
//t    "$$85 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$84 opt_lambda_parameter_list CLOSE_PARENS ARROW $$85 lambda_expression_body",
//t    "$$86 :",
//t    "$$87 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$86 opt_lambda_parameter_list CLOSE_PARENS ARROW $$87 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$88 :",
//t    "$$89 :",
//t    "$$90 :",
//t    "$$91 :",
//t    "$$92 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$88 type_declaration_name $$89 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$90 OPEN_BRACE $$91 opt_class_member_declarations CLOSE_BRACE $$92 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : FINAL",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : NATIVE",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "modifier : DYNAMIC",
//t    "modifier : IDENTIFIER_MODIFIER",
//t    "opt_class_extends :",
//t    "opt_class_extends : EXTENDS base_type_name",
//t    "opt_class_extends : EXTENDS base_type_name error",
//t    "opt_class_implements :",
//t    "opt_class_implements : IMPLEMENTS type_list",
//t    "opt_class_implements : IMPLEMENTS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$93 :",
//t    "block : OPEN_BRACE $$93 opt_statement_list block_end",
//t    "$$94 :",
//t    "config_block : opt_block_config OPEN_BRACE $$94 opt_statement_list block_end",
//t    "opt_block_config :",
//t    "opt_block_config : IDENTIFIER DOUBLE_COLON IDENTIFIER",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$95 :",
//t    "block_prepared : OPEN_BRACE $$95 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : config_block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "valid_declaration_statement : local_function_statement",
//t    "interactive_valid_declaration_statement : config_block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : local_function_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$96 :",
//t    "labeled_statement : identifier_inside_body COLON $$96 statement",
//t    "use_namespace_statement : USE NAMESPACE IDENTIFIER stmnt_end_semicolon",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : VOID",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "stmnt_end_semicolon : SEMICOLON",
//t    "$$97 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON type $$97 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$98 :",
//t    "block_variable_declaration : VAR identifier_inside_body $$98 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$99 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON type $$99 const_variable_initializer opt_const_declarators stmnt_end_semicolon",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "variable_declarator : COMMA identifier_inside_body COLON type",
//t    "variable_declarator : COMMA identifier_inside_body COLON type ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "expression_statement : statement_expression stmnt_end_semicolon",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "stmnt_close_parens : CLOSE_PARENS",
//t    "stmnt_else : ELSE",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement stmnt_else embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$100 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$100 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$101 :",
//t    "switch_section : switch_labels $$101 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "stmnt_do : DO",
//t    "do_while_stmnt_close_parens : CLOSE_PARENS",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression do_while_stmnt_close_parens stmnt_end_semicolon",
//t    "do_statement : stmnt_do embedded_statement error",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$102 :",
//t    "for_statement : FOR open_parens_any $$102 for_statement_cont",
//t    "$$103 :",
//t    "for_statement_cont : for_initializer IN $$103 expression stmnt_close_parens embedded_statement",
//t    "$$104 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$104 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$105 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$105 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator stmnt_close_parens",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$106 :",
//t    "for_initializer : VAR identifier_inside_body COLON type $$106 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "$$107 :",
//t    "$$108 :",
//t    "$$109 :",
//t    "foreach_statement : FOR_EACH $$107 open_parens_any for_initializer IN $$108 expression stmnt_close_parens $$109 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "jump_statement : use_namespace_statement",
//t    "break_statement : BREAK stmnt_end_semicolon",
//t    "continue_statement : CONTINUE stmnt_end_semicolon",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body stmnt_end_semicolon",
//t    "goto_statement : GOTO CASE constant_expression stmnt_end_semicolon",
//t    "goto_statement : GOTO DEFAULT stmnt_end_semicolon",
//t    "return_statement : RETURN opt_expression stmnt_end_semicolon",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression stmnt_end_semicolon",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression stmnt_end_semicolon",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK stmnt_end_semicolon",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$110 :",
//t    "catch_clause : CATCH open_parens_any IDENTIFIER COLON type CLOSE_PARENS $$110 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$111 :",
//t    "unsafe_statement : UNSAFE $$111 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$112 :",
//t    "$$113 :",
//t    "fixed_statement : FIXED open_parens_any type identifier_inside_body $$112 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$113 embedded_statement",
//t    "$$114 :",
//t    "$$115 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$114 using_initialization CLOSE_PARENS $$115 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$116 :",
//t    "from_clause : FROM identifier_inside_body IN $$116 expression_or_error",
//t    "$$117 :",
//t    "from_clause : FROM type identifier_inside_body IN $$117 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$118 :",
//t    "select_or_group_clause : SELECT $$118 expression_or_error",
//t    "$$119 :",
//t    "$$120 :",
//t    "select_or_group_clause : GROUP $$119 expression_or_error $$120 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$121 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$121 expression_or_error",
//t    "$$122 :",
//t    "where_clause : WHERE $$122 expression_or_error",
//t    "$$123 :",
//t    "$$124 :",
//t    "$$125 :",
//t    "join_clause : JOIN identifier_inside_body IN $$123 expression_or_error ON $$124 expression_or_error EQUALS $$125 expression_or_error opt_join_into",
//t    "$$126 :",
//t    "$$127 :",
//t    "$$128 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$126 expression_or_error ON $$127 expression_or_error EQUALS $$128 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$129 :",
//t    "orderby_clause : ORDERBY $$129 orderings",
//t    "orderings : order_by",
//t    "$$130 :",
//t    "orderings : order_by COMMA $$130 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$131 :",
//t    "orderings_then_by : orderings_then_by COMMA $$131 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$132 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$132 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER package_directives opt_COMPLETE_COMPLETION",
//t    "$$133 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$133 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$134 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$134 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$135 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$135 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BOOLEAN",
    "BREAK","BYTE","CASE","CATCH","CHAR","CHECKED","CLASS","CONST",
    "CONTINUE","DECIMAL","DEFAULT","DELEGATE","DELETE","DO","DOUBLE",
    "DOUBLE2","DOUBLE3","DOUBLE4","DYNAMIC","EACH","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTENDS","FALSE","FINAL","FINALLY","FIXED","FLOAT",
    "FLOAT2","FLOAT3","FLOAT4","FOR","FOR_EACH","FUNCTION","FUNCTION_GET",
    "FUNCTION_SET","GOTO","IF","IMPLICIT","IMPLEMENTS","IMPORT","IN",
    "INDEXER","INSTANCEOF","INT","INTERFACE","INTERNAL","IS","LOCK",
    "LONG","NAMESPACE","NATIVE","NEW","NULL","OBJECT","OPERATOR","OUT",
    "OVERRIDE","OVERLOAD","PACKAGE","PARAMS","PRIVATE","PROPERTY",
    "PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE",
    "SHORT","SIZEOF","STACKALLOC","STATIC","STRING","STRUCT","SWITCH",
    "THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG","UNCHECKED",
    "UNDEFINED","UNSAFE","USE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","PARTIAL","ARROW","FROM","FROM_FIRST",
    "JOIN","ON","EQUALS","SELECT","GROUP","BY","LET","ORDERBY",
    "ASCENDING","DESCENDING","INTO","INTERR_NULLABLE","EXTERN","ASYNC",
    "AWAIT","GET","SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE",
    "OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT",
    "DOT_AT","DOT_STAR","DOTDOT","DOTDOT_AT","DOTDOT_STAR","DOTDOTDOT",
    "DOT_OPEN_PARENS","CLOSE_PARENS_DOT","COMMA","COLON","SEMICOLON",
    "TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND",
    "BITWISE_OR","LOGICAL_AND_ASSIGN","LOGICAL_OR_ASSIGN","STAR",
    "PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC","OP_DEC",
    "OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_USHIFT_RIGHT","OP_LE","OP_GE",
    "OP_EQ","OP_REF_EQ","OP_NE","OP_REF_NE","OP_AND","OP_OR",
    "OP_MULT_ASSIGN","OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN",
    "OP_SUB_ASSIGN","OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN",
    "OP_USHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN","OP_XOR_ASSIGN",
    "OP_OR_ASSIGN","OP_PTR","OP_COALESCING","OP_IN","OP_AT",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","IDENTIFIER_MODIFIER","IDENTIFIER_CONFIG",
    "OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST","GENERIC_DIMENSION",
    "DEFAULT_COLON","OPEN_BRACKET_EXPR","OPEN_BRACE_INIT",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 445 "ps-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 446 "ps-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 465 "ps-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 510 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 25:
  case_25();
  break;
case 27:
  case_27();
  break;
case 28:
#line 575 "ps-parser.jay"
  {
	    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, true);
	  }
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 33:
#line 627 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = false;
	  }
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
  case_36();
  break;
case 37:
  case_37();
  break;
case 40:
  case_40();
  break;
case 41:
  case_41();
  break;
case 42:
  case_42();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 63:
  case_63();
  break;
case 64:
  case_64();
  break;
case 65:
  case_65();
  break;
case 66:
  case_66();
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
#line 888 "ps-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 78:
  case_78();
  break;
case 79:
  case_79();
  break;
case 80:
  case_80();
  break;
case 81:
  case_81();
  break;
case 82:
  case_82();
  break;
case 83:
#line 929 "ps-parser.jay"
  { yyVal = "event"; }
  break;
case 84:
#line 930 "ps-parser.jay"
  { yyVal = "return"; }
  break;
case 85:
  case_85();
  break;
case 86:
#line 947 "ps-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 87:
  case_87();
  break;
case 88:
#line 961 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 89:
  case_89();
  break;
case 91:
#line 980 "ps-parser.jay"
  { yyVal = null; }
  break;
case 92:
  case_92();
  break;
case 93:
#line 990 "ps-parser.jay"
  { yyVal = null; }
  break;
case 94:
  case_94();
  break;
case 95:
  case_95();
  break;
case 96:
  case_96();
  break;
case 97:
  case_97();
  break;
case 98:
#line 1032 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 100:
#line 1040 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
#line 1066 "ps-parser.jay"
  { yyVal = null; }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
#line 1088 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 109:
#line 1092 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 124:
  case_124();
  break;
case 125:
  case_125();
  break;
case 126:
  case_126();
  break;
case 127:
  case_127();
  break;
case 128:
  case_128();
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 131:
#line 1176 "ps-parser.jay"
  {
		lexer.AutoSemiInsertion = false;
	  }
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 134:
  case_134();
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 137:
#line 1225 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 138:
  case_138();
  break;
case 139:
  case_139();
  break;
case 142:
#line 1266 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 143:
#line 1270 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 144:
  case_144();
  break;
case 145:
#line 1283 "ps-parser.jay"
  { yyVal = null; }
  break;
case 147:
#line 1291 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 148:
  case_148();
  break;
case 149:
  case_149();
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 155:
#line 1374 "ps-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 161:
#line 1403 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 162:
#line 1407 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 163:
  case_163();
  break;
case 164:
#line 1420 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 165:
  case_165();
  break;
case 168:
#line 1439 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 169:
#line 1443 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 170:
  case_170();
  break;
case 171:
#line 1459 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
#line 1603 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 180:
  case_180();
  break;
case 181:
#line 1672 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 182:
  case_182();
  break;
case 183:
#line 1733 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 184:
  case_184();
  break;
case 185:
#line 1801 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 186:
  case_186();
  break;
case 187:
#line 1811 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 192:
#line 1882 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 193:
  case_193();
  break;
case 195:
  case_195();
  break;
case 196:
#line 1904 "ps-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
#line 1976 "ps-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
#line 2055 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 210:
  case_210();
  break;
case 211:
#line 2096 "ps-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 213:
#line 2104 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
  case_224();
  break;
case 225:
#line 2270 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 226:
  case_226();
  break;
case 227:
#line 2311 "ps-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 228:
  case_228();
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 235:
  case_235();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 239:
  case_239();
  break;
case 240:
  case_240();
  break;
case 241:
#line 2463 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = false;
	  }
  break;
case 242:
  case_242();
  break;
case 243:
  case_243();
  break;
case 244:
#line 2490 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = true;
	  }
  break;
case 245:
  case_245();
  break;
case 246:
  case_246();
  break;
case 247:
#line 2505 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 250:
#line 2517 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 251:
#line 2521 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 252:
#line 2528 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 253:
#line 2532 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 258:
#line 2540 "ps-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 259:
#line 2548 "ps-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 260:
#line 2554 "ps-parser.jay"
  {
	  }
  break;
case 261:
  case_261();
  break;
case 263:
#line 2603 "ps-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 265:
  case_265();
  break;
case 266:
#line 2619 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 267:
  case_267();
  break;
case 269:
#line 2667 "ps-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 270:
#line 2668 "ps-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 271:
#line 2669 "ps-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 272:
#line 2670 "ps-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 273:
#line 2671 "ps-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 274:
#line 2672 "ps-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 275:
#line 2674 "ps-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 276:
#line 2675 "ps-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 277:
#line 2677 "ps-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 278:
#line 2678 "ps-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 279:
#line 2679 "ps-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 280:
#line 2680 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 281:
#line 2681 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 282:
#line 2682 "ps-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 283:
#line 2683 "ps-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 284:
#line 2684 "ps-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 285:
#line 2685 "ps-parser.jay"
  { yyVal = Operator.OpType.AsURightShift; }
  break;
case 286:
#line 2686 "ps-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 287:
#line 2687 "ps-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 288:
#line 2688 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 289:
#line 2689 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 290:
#line 2690 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 291:
#line 2691 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 292:
#line 2692 "ps-parser.jay"
  { yyVal = Operator.OpType.AsIn; }
  break;
case 293:
#line 2699 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 294:
  case_294();
  break;
case 295:
#line 2718 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 307:
#line 2985 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 308:
  case_308();
  break;
case 311:
#line 3002 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 312:
#line 3006 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 313:
  case_313();
  break;
case 314:
#line 3019 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
#line 3044 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 339:
#line 3208 "ps-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 347:
#line 3282 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 348:
  case_348();
  break;
case 349:
#line 3301 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 354:
  case_354();
  break;
case 356:
  case_356();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
#line 3437 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 372:
  case_372();
  break;
case 373:
  case_373();
  break;
case 374:
  case_374();
  break;
case 376:
  case_376();
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 382:
#line 3555 "ps-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 383:
#line 3562 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 385:
  case_385();
  break;
case 387:
  case_387();
  break;
case 389:
  case_389();
  break;
case 391:
  case_391();
  break;
case 392:
  case_392();
  break;
case 393:
#line 3620 "ps-parser.jay"
  {
	  	yyVal = new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 394:
  case_394();
  break;
case 395:
  case_395();
  break;
case 396:
  case_396();
  break;
case 397:
  case_397();
  break;
case 398:
#line 3673 "ps-parser.jay"
  { CheckIsPlayScript("decimal", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
#line 3674 "ps-parser.jay"
  { CheckIsPlayScript("float", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
#line 3678 "ps-parser.jay"
  { CheckIsPlayScript("double", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
#line 3686 "ps-parser.jay"
  { CheckIsPlayScript("sbyte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
#line 3687 "ps-parser.jay"
  { CheckIsPlayScript("byte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3688 "ps-parser.jay"
  { CheckIsPlayScript("short", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3689 "ps-parser.jay"
  { CheckIsPlayScript("ushort", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3690 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3691 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 408:
#line 3692 "ps-parser.jay"
  { CheckIsPlayScript("long", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
#line 3693 "ps-parser.jay"
  { CheckIsPlayScript("ulong", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
#line 3694 "ps-parser.jay"
  { CheckIsPlayScript("char", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 428:
  case_428();
  break;
case 429:
  case_429();
  break;
case 433:
#line 3745 "ps-parser.jay"
  { yyVal = new AsUndefinedLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
#line 3746 "ps-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 435:
#line 3750 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 436:
#line 3751 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 441:
  case_441();
  break;
case 442:
#line 3784 "ps-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 447:
  case_447();
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
#line 3877 "ps-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 455:
  case_455();
  break;
case 456:
#line 3885 "ps-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 468:
#line 3984 "ps-parser.jay"
  { yyVal = null; }
  break;
case 469:
#line 3988 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
#line 4044 "ps-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 478:
#line 4071 "ps-parser.jay"
  { yyVal = null; }
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
#line 4122 "ps-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
#line 4240 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 505:
#line 4248 "ps-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
#line 4268 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 509:
#line 4275 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 510:
#line 4339 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 511:
#line 4343 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 512:
#line 4347 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 513:
  case_513();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
#line 4451 "ps-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 519:
#line 4455 "ps-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
#line 4514 "ps-parser.jay"
  {
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
 	  }
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
#line 4673 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 542:
  case_542();
  break;
case 543:
#line 4682 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 544:
#line 4686 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 545:
  case_545();
  break;
case 546:
#line 4695 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 547:
#line 4702 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 550:
#line 4723 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 555:
#line 4773 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
#line 4777 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
  case_557();
  break;
case 558:
#line 4807 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AsE4xAttribute, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 4811 "ps-parser.jay"
  {
	  	yyVal = new AsTypeOf ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 562:
  case_562();
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 568:
#line 4875 "ps-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
#line 4879 "ps-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 570:
#line 4883 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 4887 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 572:
#line 4895 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
#line 4989 "ps-parser.jay"
  {
		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 589:
#line 4993 "ps-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 590:
#line 4997 "ps-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 633:
  case_633();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
#line 5397 "ps-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 659:
  case_659();
  break;
case 660:
#line 5408 "ps-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 661:
  case_661();
  break;
case 663:
  case_663();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
#line 5478 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
#line 5493 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 684:
#line 5548 "ps-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 685:
#line 5561 "ps-parser.jay"
  {
		lexer.AutoSemiInsertion = false;
	  }
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
#line 5596 "ps-parser.jay"
  {
		lexer.AutoSemiInsertion = true;		
	  }
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
#line 5617 "ps-parser.jay"
  { yyVal = null; }
  break;
case 692:
#line 5619 "ps-parser.jay"
  { yyVal = yyVals[0+yyTop]; StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[0+yyTop])); }
  break;
case 693:
  case_693();
  break;
case 694:
#line 5632 "ps-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 696:
  case_696();
  break;
case 697:
  case_697();
  break;
case 698:
  case_698();
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 701:
  case_701();
  break;
case 702:
  case_702();
  break;
case 703:
  case_703();
  break;
case 704:
  case_704();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 707:
  case_707();
  break;
case 708:
  case_708();
  break;
case 709:
  case_709();
  break;
case 710:
  case_710();
  break;
case 711:
  case_711();
  break;
case 712:
  case_712();
  break;
case 713:
  case_713();
  break;
case 715:
#line 5753 "ps-parser.jay"
  {
		current_type.AddBaseForPart ((FullNamedExpression) yyVals[0+yyTop]);
	 }
  break;
case 716:
  case_716();
  break;
case 718:
#line 5767 "ps-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 719:
  case_719();
  break;
case 721:
#line 5781 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
#line 5873 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 731:
#line 5877 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 732:
#line 5884 "ps-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 733:
  case_733();
  break;
case 734:
#line 5898 "ps-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 735:
#line 5902 "ps-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 736:
  case_736();
  break;
case 737:
#line 5928 "ps-parser.jay"
  {
  		yyVal = yyVals[0+yyTop];
	  }
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 750:
#line 6008 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 751:
#line 6012 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 753:
  case_753();
  break;
case 756:
#line 6036 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 757:
#line 6040 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 794:
  case_794();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 801:
  case_801();
  break;
case 802:
#line 6246 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = true;
	  }
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
  case_808();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 815:
  case_815();
  break;
case 818:
  case_818();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
#line 6372 "ps-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 823:
#line 6376 "ps-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 828:
  case_828();
  break;
case 830:
  case_830();
  break;
case 831:
#line 6421 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 832:
  case_832();
  break;
case 833:
#line 6431 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 834:
#line 6432 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 835:
#line 6443 "ps-parser.jay"
  {
		yyVal = ConvertExpressionToStatement((Expression)yyVals[0+yyTop]);
	  }
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 840:
#line 6471 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 841:
#line 6478 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
#line 6567 "ps-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 854:
#line 6571 "ps-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 864:
  case_864();
  break;
case 865:
  case_865();
  break;
case 866:
#line 6639 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 867:
#line 6646 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = true;
	  }
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
#line 6695 "ps-parser.jay"
  {
	    lexer.ForInParsing = false;
	  }
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 879:
#line 6782 "ps-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 880:
  case_880();
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 884:
#line 6812 "ps-parser.jay"
  { lexer.putback ('}'); }
  break;
case 885:
#line 6816 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
#line 6836 "ps-parser.jay"
  {
		
	  }
  break;
case 890:
#line 6840 "ps-parser.jay"
  { yyVal = null; }
  break;
case 892:
#line 6845 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 896:
  case_896();
  break;
case 897:
#line 6874 "ps-parser.jay"
  {
		lexer.ForInParsing = true;
	  }
  break;
case 898:
#line 6878 "ps-parser.jay"
  {
	  	lexer.ForInParsing = false;
	  }
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 924:
#line 7064 "ps-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 932:
#line 7113 "ps-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 933:
  case_933();
  break;
case 934:
#line 7131 "ps-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 935:
  case_935();
  break;
case 936:
  case_936();
  break;
case 937:
#line 7167 "ps-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 938:
#line 7174 "ps-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 939:
  case_939();
  break;
case 940:
#line 7184 "ps-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 941:
  case_941();
  break;
case 942:
  case_942();
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 946:
  case_946();
  break;
case 947:
  case_947();
  break;
case 948:
  case_948();
  break;
case 949:
  case_949();
  break;
case 950:
  case_950();
  break;
case 952:
  case_952();
  break;
case 953:
#line 7295 "ps-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 958:
  case_958();
  break;
case 959:
  case_959();
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 962:
  case_962();
  break;
case 963:
#line 7408 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 964:
  case_964();
  break;
case 965:
#line 7423 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 966:
  case_966();
  break;
case 967:
  case_967();
  break;
case 968:
  case_968();
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
#line 7485 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 973:
  case_973();
  break;
case 974:
  case_974();
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 978:
  case_978();
  break;
case 984:
#line 7539 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 985:
  case_985();
  break;
case 986:
#line 7558 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 987:
  case_987();
  break;
case 988:
  case_988();
  break;
case 989:
  case_989();
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
  case_992();
  break;
case 993:
  case_993();
  break;
case 994:
  case_994();
  break;
case 995:
  case_995();
  break;
case 997:
#line 7702 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 998:
#line 7709 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 999:
  case_999();
  break;
case 1001:
  case_1001();
  break;
case 1002:
  case_1002();
  break;
case 1004:
  case_1004();
  break;
case 1005:
  case_1005();
  break;
case 1006:
#line 7755 "ps-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1007:
  case_1007();
  break;
case 1008:
  case_1008();
  break;
case 1009:
#line 7772 "ps-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1010:
  case_1010();
  break;
case 1011:
  case_1011();
  break;
case 1013:
  case_1013();
  break;
case 1014:
  case_1014();
  break;
case 1017:
  case_1017();
  break;
case 1018:
  case_1018();
  break;
case 1024:
#line 7897 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1025:
#line 7904 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1026:
  case_1026();
  break;
case 1027:
  case_1027();
  break;
case 1028:
#line 7921 "ps-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1029:
#line 7925 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1030:
  case_1030();
  break;
case 1031:
  case_1031();
  break;
case 1032:
  case_1032();
  break;
case 1033:
  case_1033();
  break;
case 1035:
#line 7961 "ps-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1037:
#line 7969 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1038:
#line 7973 "ps-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1039:
#line 7980 "ps-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1041:
  case_1041();
  break;
case 1042:
  case_1042();
  break;
case 1043:
  case_1043();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 453 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 467 "ps-parser.jay"
{
		if (yyToken == Token.EXTERN)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 487 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_19()
#line 525 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_20()
#line 530 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[0+yyTop];
	  }

void case_21()
#line 535 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_22()
#line 540 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_25()
#line 553 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_27()
#line 565 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_29()
#line 577 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		  	current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
			
		    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, false);
		}
	  }

void case_30()
#line 588 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			current_namespace.AddUsing (ut);
		
			lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_31()
#line 597 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
			if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
				report.Warning (440, 2, lt.Location,
				 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
			}

			var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
			current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_32()
#line 612 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_34()
#line 629 "ps-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-3+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
		current_namespace.AddUsing(un, true);
	  }

void case_35()
#line 674 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
			
		Lexer.AutoSemiInsertion = true;
	  }

void case_36()
#line 681 "ps-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
	  	if (current_namespace.Parent != null && current_namespace.Parent.Parent == null) { /* Is this the top level package?*/
			var ns = new NamespaceContainer (new MemberName("__" + file.FileName.Replace(".","_")), current_namespace);
			prev_namespace = current_namespace;
			current_container = private_namespace = current_namespace = ns;
	    } else {
			current_container = current_namespace = current_namespace.Parent;
		}
		
		lexer.parsing_modifiers = false;
	  }

void case_37()
#line 695 "ps-parser.jay"
{
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-10+yyTop])), GetLocation (yyVals[-10+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
	  
/*	  	lbag.AddLocation (current_container, GetLocation ($2), GetLocation ($6), GetLocation ($11));*/
	  }

void case_40()
#line 719 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_41()
#line 724 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_42()
#line 729 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_59()
#line 773 "ps-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
		is_config_enabled = true;		
	  }

void case_60()
#line 783 "ps-parser.jay"
{
	    if (is_config_enabled) {
			if (yyVals[0+yyTop] != null) {
				TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

				if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
					report.Error (1527, ds.Location, 
					"Namespace elements cannot be explicitly declared as private, protected or protected internal");
				}

				/* Here is a trick, for explicit attributes we don't know where they belong to until*/
				/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
				/* when we know whether they are global (assembly:, module:) or local (type:).*/
				if (ds.OptAttributes != null) {
					ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
				}
			}
			current_namespace.DeclarationFound = true;
		}
	  }

void case_61()
#line 804 "ps-parser.jay"
{
	  	if (is_config_enabled) {
			current_namespace.DeclarationFound = true;
		}
	  }

void case_63()
#line 814 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	 	  
	  }

void case_64()
#line 819 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_65()
#line 824 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_66()
#line 829 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_75()
#line 864 "ps-parser.jay"
{
		var sect = yyVals[0+yyTop] as List<Attribute>;
		if (sect != null) {
			yyVal = new Attributes (sect);
		}
	  }

void case_76()
#line 871 "ps-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = yyVals[0+yyTop] as List<Attribute>;
		if (sect != null) {
			if (attrs == null)
				attrs = new Attributes (sect);
			else
				attrs.AddAttributes (sect);
		}
		yyVal = attrs;
	  }

void case_78()
#line 890 "ps-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_79()
#line 898 "ps-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_80()
#line 905 "ps-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		lexer.AutoSemiInsertionAfter = 1;
 	  }

void case_81()
#line 917 "ps-parser.jay"
{
		lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-2+yyTop];
	  }

void case_82()
#line 925 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_85()
#line 932 "ps-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_87()
#line 949 "ps-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_89()
#line 963 "ps-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_92()
#line 982 "ps-parser.jay"
{
	    lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-1+yyTop];
	  }

void case_94()
#line 992 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_95()
#line 998 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_96()
#line 1004 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_97()
#line 1018 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_101()
#line 1042 "ps-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_102()
#line 1052 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_104()
#line 1068 "ps-parser.jay"
{ 
	  	CheckIsPlayScript("ref parameters", GetLocation(yyVals[0+yyTop]));
		yyVal = Argument.AType.Ref;
	  }

void case_105()
#line 1073 "ps-parser.jay"
{ 
	  	CheckIsPlayScript("out parameters", GetLocation(yyVals[0+yyTop]));
		yyVal = Argument.AType.Out;
	  }

void case_124()
#line 1112 "ps-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_125()
#line 1124 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_126()
#line 1135 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_127()
#line 1144 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_128()
#line 1149 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_129()
#line 1158 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_130()
#line 1163 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_132()
#line 1178 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;	  
	  	bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_133()
#line 1187 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
		lexer.AutoSemiInsertion = true;
	  }

void case_134()
#line 1201 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		lexer.DynamicParsing = false;
	  }

void case_135()
#line 1207 "ps-parser.jay"
{
		lexer.DynamicParsing = true;
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_136()
#line 1214 "ps-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_138()
#line 1232 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var mod = (Modifiers) yyVals[-4+yyTop];
		mod &= ~Modifiers.STATIC;
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_field);
		}
		is_config_enabled = true;
				
		yyVal = current_field;
	  }

void case_139()
#line 1245 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_144()
#line 1275 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop], (FullNamedExpression) yyVals[-1+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]));
	  }

void case_148()
#line 1293 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_149()
#line 1298 "ps-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_151()
#line 1312 "ps-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
		yyVal = current_field;
	  }

void case_152()
#line 1330 "ps-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_153()
#line 1343 "ps-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
	  }

void case_154()
#line 1357 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_157()
#line 1380 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_158()
#line 1386 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_163()
#line 1412 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_165()
#line 1422 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_170()
#line 1448 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[-2+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]));
	  }

void case_172()
#line 1461 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_173()
#line 1467 "ps-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_175()
#line 1476 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_176()
#line 1485 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			if (is_config_enabled) {
				current_type.AddMember (m);
			}
			is_config_enabled = true;
		}
		
		Constructor c = yyVals[0+yyTop] as Constructor;
		if (c != null) {
			if (is_config_enabled) {
				current_type.AddConstructor (c);
			}
			is_config_enabled = true;
			current_constructor = c;
		}
		
		if (is_package_function)
			lexer.DynamicParsing = false;
			
	  }

void case_177()
#line 1513 "ps-parser.jay"
{
		if (is_package_function)
			lexer.DynamicParsing = true;
	  
	 	async_block = false;

		if (yyVals[-2+yyTop] is Method) {
		
			Method method = yyVals[-2+yyTop] as Method;
			
			if (yyVals[0+yyTop] == null) {
				lbag.AppendToMember (method, savedLocation); /* semicolon			*/
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
			
		} else if (yyVals[-2+yyTop] is Constructor) {
		
			Constructor c = yyVals[-2+yyTop] as Constructor;
			
			if (yyVals[0+yyTop] != null) {		
				c.Block = (ToplevelBlock) yyVals[0+yyTop];
			}
			
			if (doc_support)
				c.DocComment = ConsumeStoredComment ();
		
		} else {
		
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
			
		}

		current_local_parameters = null;
		current_property = null;
		current_constructor = null;
		
		/* If this was a package function, pop the container xxxxx_fn class.*/
		if (is_package_function) {
			pop_current_class();
			is_package_function = false;
		}
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_178()
#line 1586 "ps-parser.jay"
{
		valid_param_mod = ParameterModifierType.All;
		
		/* If package level function, create a new package function class with */
		/* the name of the function plus "_fn".*/
		if (current_container is NamespaceContainer) {
			MemberName methodName = (MemberName) yyVals[-1+yyTop];
			MemberName className = new MemberName(methodName.Name + "_fn", GetLocation(yyVals[-1+yyTop]));
			var fnClassModifiers = (Modifiers) yyVals[-3+yyTop] | Modifiers.PARTIAL | Modifiers.STATIC; /* Allows overloads..*/
			push_current_container(new Class (current_container, className, fnClassModifiers, (Attributes) yyVals[-4+yyTop]), GetLocation(yyVals[-2+yyTop]));
			is_package_function = true;
		}
		
	  }

void case_180()
#line 1605 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-7+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-4+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		if (is_package_function) {
			modifiers |= Modifiers.STATIC;
		}
		
		if (current_type != null && name.Name == current_type.MemberName.Name) {

			var c = new Constructor (current_type, name.Name, modifiers, (Attributes) yyVals[-10+yyTop], current_local_parameters, name.Location);

			if (yyVals[0+yyTop] != null) {
					report.Error (7011, c.Location,
						"`{0}': constructor can not have type constraints.",
						c.GetSignatureForError ());
			}

			if ((modifiers & Modifiers.STATIC) != 0) {
				if ((modifiers & Modifiers.AccessibilityMask) != 0){
					report.Error (515, c.Location,
						"`{0}': static constructor cannot have an access modifier",
						c.GetSignatureForError ());
				}
			}

			if (doc_support)
				c.DocComment = Lexer.consume_doc_comment ();
				
			lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = c;
		
		} else {

			if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;

			var ret_type = yyVals[-2+yyTop] as FullNamedExpression;
			
			if (ret_type == null) {
				report.Error (7012, GetLocation(yyVals[-3+yyTop]), "Method must specify a return type.");
				ret_type = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-3+yyTop]));
			}

			var method = Method.Create (current_type, ret_type, modifiers,
					     name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

			if (yyVals[0+yyTop] != null)
				method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
					     
			if (doc_support)
				method.DocComment = Lexer.consume_doc_comment ();

			lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = method;
			
		}
	  }

void case_182()
#line 1674 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];		
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;

		if (parameters != null && parameters.Count > 0)
			report.Error (7016, GetLocation (yyVals[0+yyTop]), "Property getter functions may not have parameters");

		current_property = null;		
						
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			is_config_enabled = true;
			modifiers = (Modifiers) 0;
		} else {
/*			if (!type.Equals(current_property.TypeExpression)) {*/
/*				report.Error (7002, GetLocation ($10), "Type of property getter and setter must match", current_property.GetSignatureForError ());*/
/*			}*/
			if (current_property.Set != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Set.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			modifiers & Modifiers.AccessibilityMask, (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_184()
#line 1735 "ps-parser.jay"
{
		var void_type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		if (void_type.Type != null && void_type.Type.Kind != MemberKind.Void)
			report.Error (7003, GetLocation (yyVals[0+yyTop]), "Property setter function must not be of type void");					

		current_property = null;
						
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		}

		FullNamedExpression type; 
		
		if (parameters == null || parameters.Count != 1 || parameters.FixedParameters.Length != parameters.Count) {
			report.Error (7001, GetLocation (yyVals[-3+yyTop]), "Property setter must have a single parameter");
			type = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[-3+yyTop]));
		} else {
			type = ((Parameter)parameters.FixedParameters[0]).TypeExpression;	
		}
				
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			is_config_enabled = true;
			modifiers = (Modifiers) 0;			
		} else {
/*			if (!type.Equals(current_property.TypeExpression)) {*/
/*				report.Error (7002, GetLocation ($10), "Type of property getter and setter must match", current_property.GetSignatureForError ());*/
/*			}*/
			if (current_property.Get != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Get.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, 
			modifiers & Modifiers.AccessibilityMask, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		current_local_parameters = parameters;
		yyVal = current_property.Set;
	  }

void case_186()
#line 1804 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_188()
#line 1813 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		if (name.ExplicitInterface == null && (modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
			modifiers |= Modifiers.VIRTUAL;
			
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop]);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_189()
#line 1843 "ps-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_190()
#line 1862 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_193()
#line 1887 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) 
			Lexer.AutoSemiInsertion = true;	  
	  }

void case_195()
#line 1896 "ps-parser.jay"
{ 
	  	/* method body.*/
	   	savedLocation = GetLocation (yyVals[0+yyTop]);
	   	yyVal = null; 
	  }

void case_198()
#line 1910 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_199()
#line 1916 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  	lbag.AddLocation (yyVal, parameterListCommas);		
	  }

void case_200()
#line 1934 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_201()
#line 1942 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);		
	  }

void case_203()
#line 1982 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_204()
#line 1990 "ps-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		parameterListCommas.Clear ();
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_205()
#line 1999 "ps-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_206()
#line 2024 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_207()
#line 2030 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_208()
#line 2040 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_210()
#line 2057 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_214()
#line 2106 "ps-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_215()
#line 2130 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_216()
#line 2137 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_217()
#line 2144 "ps-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_218()
#line 2157 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[0+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[0+yyTop])));
		yyVal = new ParamsParameter (type, lt.Value, (Attributes) yyVals[-2+yyTop], lt.Location);
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_219()
#line 2166 "ps-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-3+yyTop]), "Cannot specify a default value for a variable argument array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[-2+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-2+yyTop])));
		yyVal = new ParamsParameter (type, lt.Value, (Attributes) yyVals[-4+yyTop], lt.Location);
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_220()
#line 2177 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[0+yyTop], null, (Attributes) yyVals[-2+yyTop], Location.Null);
	  }

void case_221()
#line 2219 "ps-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_222()
#line 2224 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
	
		var modifiers = (Modifiers) yyVals[-6+yyTop];
	
		var name = (MemberName) yyVals[-4+yyTop];
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		current_property = new Property (current_type, type, modifiers,
			name, (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (is_config_enabled) {
			current_type.AddMember (current_property);
		}
		is_config_enabled = true;
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_223()
#line 2250 "ps-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_224()
#line 2257 "ps-parser.jay"
{
  		CheckIsPlayScript("property", GetLocation(yyVals[-9+yyTop])); 	
  		  
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_226()
#line 2272 "ps-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-1+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		
		var name = (MemberName) yyVals[-7+yyTop];

		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		Indexer indexer = new Indexer (current_type, type, name, modifiers, (ParametersCompiled) yyVals[-4+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

		if (is_config_enabled) {
	  		current_type.AddIndexer (indexer);
	  	}
	  	is_config_enabled = true;
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_228()
#line 2313 "ps-parser.jay"
{
  		CheckIsPlayScript("indexer", GetLocation(yyVals[-12+yyTop])); 	
	  
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_233()
#line 2334 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_234()
#line 2348 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_235()
#line 2370 "ps-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Get, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Get, GetModifierLocations (), savedLocation);
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_236()
#line 2394 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lexer.PropertyParsing = false;
	  }

void case_237()
#line 2420 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Set, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Set, GetModifierLocations (), savedLocation);
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_239()
#line 2445 "ps-parser.jay"
{
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = null;
	  }

void case_240()
#line 2450 "ps-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_242()
#line 2465 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;	  
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_243()
#line 2474 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_245()
#line 2492 "ps-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_246()
#line 2498 "ps-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_261()
#line 2556 "ps-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			var modifiers = (Modifiers) yyVals[-3+yyTop];
			
/*			if (current_container.Kind == MemberKind.Class && */
/*				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)*/
/*					modifiers |= Modifiers.VIRTUAL;			*/
		
			if (current_local_parameters.Count < 1) {
			
				report.Error (7037, GetLocation (yyVals[-4+yyTop]), "Invalid number of parameters for operator.");			
			
			} else {
			
				Operator op = new Operator (
					current_type, decl.optype, decl.ret_type, modifiers, 
					current_local_parameters,
					(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
				if (op.Block == null)
					op.ParameterInfo.CheckParameters (op);

				if (doc_support) {
					op.DocComment = tmpComment;
					Lexer.doc_state = XmlCommentState.Allowed;
				}

				/* Note again, checking is done in semantic analysis*/
				if (is_config_enabled) {
					current_type.AddOperator (op);
				}
				is_config_enabled = true;

				lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
				if (yyVals[0+yyTop] == null) { /* Semicolon*/
					lbag.AppendTo (op, savedLocation);
				}
			}
		}
		
		current_local_parameters = null;
	  }

void case_265()
#line 2609 "ps-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_267()
#line 2621 "ps-parser.jay"
{
		CheckIsPlayScript("operator", GetLocation(yyVals[-7+yyTop])); 	  
	  
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_294()
#line 2701 "ps-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_296()
#line 2720 "ps-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_297()
#line 2735 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_298()
#line 2741 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_299()
#line 2880 "ps-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_300()
#line 2889 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		if (is_config_enabled) {
			current_type.AddMember (d);
		}
		is_config_enabled = true;
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_301()
#line 2917 "ps-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event_field);
		}
		is_config_enabled = true;
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_302()
#line 2934 "ps-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		if (current_event_field.Initializer != null) {
			lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-7+yyTop]), savedEventAssignLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		current_event_field = null;
	  }

void case_303()
#line 2950 "ps-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event);
		}
		is_config_enabled = true;
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_304()
#line 2961 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_305()
#line 2968 "ps-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_308()
#line 2987 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_313()
#line 3011 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_315()
#line 3021 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_316()
#line 3030 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_320()
#line 3051 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_321()
#line 3056 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_322()
#line 3061 "ps-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_323()
#line 3069 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_324()
#line 3081 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_325()
#line 3097 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_326()
#line 3109 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_327()
#line 3125 "ps-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_329()
#line 3134 "ps-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_330()
#line 3146 "ps-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_331()
#line 3151 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_332()
#line 3163 "ps-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_333()
#line 3169 "ps-parser.jay"
{
	  	CheckIsPlayScript("enum", GetLocation(yyVals[-9+yyTop]));
	  
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_335()
#line 3188 "ps-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_336()
#line 3196 "ps-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_341()
#line 3214 "ps-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_342()
#line 3222 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_343()
#line 3235 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_344()
#line 3243 "ps-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_345()
#line 3257 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_348()
#line 3284 "ps-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-3+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-8+yyTop], (MemberName) yyVals[-6+yyTop], p, (Attributes) yyVals[-9+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_350()
#line 3303 "ps-parser.jay"
{
	  	CheckIsPlayScript("delegate", GetLocation(yyVals[-11+yyTop]));
	  	
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-11+yyTop]), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_351()
#line 3326 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		MemberName className = new MemberName(lt.Value + "_ns", GetLocation(yyVals[-2+yyTop]));
		push_current_container(new Class (current_container, className, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), GetLocation(yyVals[-3+yyTop]));	  
		pop_current_class();
			  
	  	if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_354()
#line 3346 "ps-parser.jay"
{
	  	if (!(yyVals[0+yyTop] is StringLiteral))
	  		syntax_error (GetLocation(yyVals[0+yyTop]), "string literal expected");
	  	yyVal = yyVals[0+yyTop];
	  }

void case_356()
#line 3356 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 3379 "ps-parser.jay"
{
	    /* member_name*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_360()
#line 3389 "ps-parser.jay"
{
	    /* simple_name_expr*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_362()
#line 3402 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_363()
#line 3409 "ps-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_364()
#line 3417 "ps-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_365()
#line 3423 "ps-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_367()
#line 3439 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_368()
#line 3448 "ps-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_370()
#line 3459 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_371()
#line 3468 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_372()
#line 3473 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_373()
#line 3481 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_374()
#line 3495 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_376()
#line 3505 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_377()
#line 3516 "ps-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_378()
#line 3522 "ps-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
#line 3532 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_380()
#line 3537 "ps-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_385()
#line 3571 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_387()
#line 3580 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_389()
#line 3589 "ps-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_391()
#line 3598 "ps-parser.jay"
{
	  	CheckIsPlayScript("arrays", GetLocation(yyVals[0+yyTop]));
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_392()
#line 3606 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_394()
#line 3626 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_395()
#line 3642 "ps-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_396()
#line 3648 "ps-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_397()
#line 3657 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_428()
#line 3730 "ps-parser.jay"
{
	    /* primary_expression_or_type*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_429()
#line 3735 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_441()
#line 3777 "ps-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_443()
#line 3789 "ps-parser.jay"
{
	    /* member_access*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_444()
#line 3797 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAttribute;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_445()
#line 3805 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_446()
#line 3812 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendant;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_447()
#line 3820 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendantAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_448()
#line 3827 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xNamespace;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_449()
#line 3835 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xNamespaceAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_450()
#line 3842 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xAttributeAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_451()
#line 3849 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var ma = new AsXmlQueryExpression ((Expression) yyVals[-4+yyTop], (Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		yyVal = ma;
	  }

void case_452()
#line 3856 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_453()
#line 3862 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_455()
#line 3878 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_457()
#line 3886 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_458()
#line 3894 "ps-parser.jay"
{
		if (current_constructor == null)
 			report.Error (7014, GetLocation (yyVals[-3+yyTop]), "Base constructor initializer may only be called in constructor");
 		var initializer = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
 		initializer.IsAsExplicitSuperCall = true;
 		current_constructor.Initializer = initializer;
 		yyVal = initializer;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_459()
#line 3904 "ps-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_460()
#line 3909 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert Invocation(AsNew()) into AsNew(Invocation())*/
			var invExpr = new Invocation(newExpr.Expr, (Arguments) yyVals[-1+yyTop]);
			newExpr.Expr = invExpr;
			yyVal = newExpr;
	    } else {
	    	/* Just a normal invocation*/
			yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	    }
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_461()
#line 3923 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_462()
#line 3933 "ps-parser.jay"
{
	    var expList = yyVals[-1+yyTop] as List<Expression>;
	    if (expList == null) {
	    	expList = new List<Expression>();
	    }
  		var oi = new AsObjectInitializer (expList, GetLocation (yyVals[-2+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
  		yyVal = oi;
	  }

void case_463()
#line 3946 "ps-parser.jay"
{
	  	var oi = new AsObjectInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	yyVal = oi;
	  }

void case_464()
#line 3958 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_465()
#line 3966 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_466()
#line 3975 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_470()
#line 3993 "ps-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_471()
#line 3999 "ps-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_472()
#line 4004 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_473()
#line 4012 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_474()
#line 4018 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_475()
#line 4024 "ps-parser.jay"
{
	  	ILiteralConstant lit = yyVals[-2+yyTop] as ILiteralConstant;
		string nm;	  	
	  	if (lit is StringLiteral) {
			nm = ((StringLiteral)lit).Value;
		} else {
	  		if (parsing_playscript || !(lit is IntLiteral || lit is DoubleLiteral || lit is BoolLiteral)) {
			  	report.Error (7019, GetLocation (yyVals[-2+yyTop]), "Must be identifier or string literal");
			  	nm = "err";
			 } else {
				nm = ((Constant)yyVals[-2+yyTop]).GetValueAsLiteral();			 
			 }
		}
	  
	  	yyVal = new ElementInitializer (nm, (Expression)yyVals[0+yyTop], GetLocation(yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_480()
#line 4077 "ps-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_481()
#line 4083 "ps-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_482()
#line 4092 "ps-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_483()
#line 4106 "ps-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_484()
#line 4112 "ps-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_489()
#line 4133 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_490()
#line 4138 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_492()
#line 4160 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert ElementAccess(AsNew()) into AsNew(ElementAccess())*/
			var elemAccessExpr = new ElementAccess(newExpr.Expr, (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			newExpr.Expr = elemAccessExpr;
			yyVal = newExpr;
	    } else {
			yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_493()
#line 4173 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_494()
#line 4178 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_495()
#line 4183 "ps-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
#line 4188 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_497()
#line 4193 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_498()
#line 4201 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_499()
#line 4207 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_500()
#line 4212 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_501()
#line 4220 "ps-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_502()
#line 4226 "ps-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_506()
#line 4253 "ps-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_507()
#line 4258 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_513()
#line 4349 "ps-parser.jay"
{
	    var arrayInit = (AsArrayInitializer) yyVals[0+yyTop];
	    arrayInit.VectorType = (FullNamedExpression) yyVals[-2+yyTop];
	    yyVal = arrayInit;
	  }

void case_515()
#line 4428 "ps-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_516()
#line 4436 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_517()
#line 4441 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
#line 4471 "ps-parser.jay"
{
		var ai = new AsArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_521()
#line 4480 "ps-parser.jay"
{
		var ai = new AsArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_522()
#line 4496 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_523()
#line 4504 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_525()
#line 4519 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_526()
#line 4525 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_529()
#line 4550 "ps-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_530()
#line 4558 "ps-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_531()
#line 4572 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_532()
#line 4578 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_533()
#line 4584 "ps-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_534()
#line 4596 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_535()
#line 4617 "ps-parser.jay"
{ 
		CheckIsPlayScript("sizeof", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_536()
#line 4623 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_537()
#line 4633 "ps-parser.jay"
{
		CheckIsPlayScript("checked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_538()
#line 4639 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_539()
#line 4648 "ps-parser.jay"
{
		CheckIsPlayScript("unchecked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
#line 4654 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_542()
#line 4675 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (TypeExpr) yyVals[0+yyTop], false, GetLocation (yyVals[-6+yyTop]));
	  }

void case_545()
#line 4688 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-7+yyTop]));
	  }

void case_548()
#line 4704 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], false, GetLocation (yyVals[-7+yyTop]));
	  }

void case_549()
#line 4709 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock.TopBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-9+yyTop]));
		var decl = new BlockVariableDeclaration(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.TopBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-9+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_551()
#line 4725 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-8+yyTop]));
	  }

void case_552()
#line 4730 "ps-parser.jay"
{
	    var lt = (Tokenizer.LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock.TopBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-10+yyTop]));
		var decl = new BlockVariableDeclaration(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.TopBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-10+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_553()
#line 4757 "ps-parser.jay"
{
	  	CheckIsPlayScript("default values", GetLocation(yyVals[-3+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_557()
#line 4784 "ps-parser.jay"
{
	  	CheckIsPlayScript("await", GetLocation(yyVals[-1+yyTop]));
	  	
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
#line 4813 "ps-parser.jay"
{
	  	var expr = yyVals[0+yyTop] as Expression;
	  	if (!(expr is ElementAccess || expr is MemberAccess)) {
			report.Error (7022, GetLocation (yyVals[-1+yyTop]),
				"delete operator may only be used with element access or member access expressions");
	  	}
		yyVal = new AsDelete ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
#line 4822 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_562()
#line 4828 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 4841 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4847 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AsE4xAttribute, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 4853 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsTypeOf (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 4859 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new AsDelete (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
#line 4897 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 4903 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
#line 4909 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 4915 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 4927 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 4937 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 4942 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 4947 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 4952 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 4959 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 4966 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 4977 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 4982 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
  	  }

void case_591()
#line 4999 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 5006 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 5013 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 5019 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 5025 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
#line 5035 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 5040 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 5045 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 5050 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 5057 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 5064 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 5075 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 5080 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 5085 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 5090 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 5095 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 5102 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 5109 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
#line 5116 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_613()
#line 5127 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_614()
#line 5132 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
#line 5137 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsRefEquality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_616()
#line 5142 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsRefInequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 5151 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_619()
#line 5156 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_621()
#line 5167 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
#line 5172 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 5183 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
#line 5188 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_627()
#line 5199 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_628()
#line 5204 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_630()
#line 5215 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_631()
#line 5220 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_633()
#line 5231 "ps-parser.jay"
{
	  	CheckIsPlayScript("?? operator", GetLocation(yyVals[-1+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_635()
#line 5245 "ps-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_636()
#line 5250 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_637()
#line 5256 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_638()
#line 5266 "ps-parser.jay"
{
	  	Expression target = (Expression) yyVals[-2+yyTop];
	  	Expression source = (Expression) yyVals[0+yyTop];

		var assign = new SimpleAssign (target, source);
		lbag.AddLocation (assign, GetLocation (yyVals[-1+yyTop]));
	  	
	  	if (source is AsArrayInitializer) {
	  		(source as AsArrayInitializer).Assign = assign;
	  	} else if (source is AsObjectInitializer) {
	  		(source as AsObjectInitializer).Assign = assign;
	  	}
	  	
	  	yyVal = assign;
	  }

void case_639()
#line 5282 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_640()
#line 5287 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_641()
#line 5292 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_642()
#line 5297 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_643()
#line 5302 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_644()
#line 5307 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_645()
#line 5312 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_646()
#line 5317 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_647()
#line 5322 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_648()
#line 5327 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_649()
#line 5332 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_650()
#line 5337 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
#line 5342 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_652()
#line 5350 "ps-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Clear ();
		yyVal = pars;
	  }

void case_653()
#line 5357 "ps-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = pars;
	  }

void case_654()
#line 5373 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_655()
#line 5379 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_656()
#line 5385 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_657()
#line 5390 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_659()
#line 5398 "ps-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
		lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_661()
#line 5410 "ps-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_663()
#line 5418 "ps-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_665()
#line 5432 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_666()
#line 5440 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, false, lt.Location);
	  }

void case_667()
#line 5446 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_668()
#line 5452 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, false, lt.Location);
	  }

void case_669()
#line 5458 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_670()
#line 5464 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, true, lt.Location);
	  }

void case_671()
#line 5470 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-4+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_673()
#line 5480 "ps-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], null, false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_674()
#line 5485 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-6+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_676()
#line 5495 "ps-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], null, true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_677()
#line 5500 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-7+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_686()
#line 5563 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
		
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (c, is_partial);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_687()
#line 5578 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
		lexer.DynamicParsing = false;
	  }

void case_689()
#line 5598 "ps-parser.jay"
{
		lexer.DynamicParsing = true;	  
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_690()
#line 5605 "ps-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_693()
#line 5624 "ps-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_696()
#line 5638 "ps-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_697()
#line 5657 "ps-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_698()
#line 5665 "ps-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_699()
#line 5670 "ps-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_700()
#line 5675 "ps-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_701()
#line 5680 "ps-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_702()
#line 5685 "ps-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_703()
#line 5690 "ps-parser.jay"
{
		yyVal = (Modifiers)0; /* Modifiers.SEALED;  // The semantics for SEALED and FINAL don't quite match.  Ignore FINAL for right now. (BEN)*/
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_704()
#line 5695 "ps-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_705()
#line 5700 "ps-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_706()
#line 5705 "ps-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_707()
#line 5710 "ps-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_708()
#line 5715 "ps-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_709()
#line 5720 "ps-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_710()
#line 5725 "ps-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_711()
#line 5732 "ps-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_712()
#line 5737 "ps-parser.jay"
{
	    yyVal = Modifiers.AS_DYNAMIC;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_713()
#line 5742 "ps-parser.jay"
{
	    yyVal = Modifiers.INTERNAL;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_716()
#line 5755 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBaseForPart ((FullNamedExpression) yyVals[-1+yyTop]);
	  }

void case_719()
#line 5769 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_722()
#line 5786 "ps-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_723()
#line 5792 "ps-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_724()
#line 5811 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_725()
#line 5817 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_726()
#line 5827 "ps-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_727()
#line 5833 "ps-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_728()
#line 5859 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_729()
#line 5866 "ps-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_733()
#line 5886 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_736()
#line 5920 "ps-parser.jay"
{
		++lexer.parsing_block;
		lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_738()
#line 5937 "ps-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_739()
#line 5942 "ps-parser.jay"
{
	    if (is_config_enabled) {
	      /* This block should be included*/
  		  yyVal = yyVals[0+yyTop];
  		} else {
  		  /* This block should not be included.. create an empty block*/
  		  start_block (GetLocation (yyVals[-3+yyTop]));
  		  yyVal = end_block (GetLocation (yyVals[0+yyTop]));
  		}
	  }

void case_741()
#line 5957 "ps-parser.jay"
{
	    var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	    var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
        is_config_enabled = file.IsConditionalDefined (lt1.Value + "_" + lt2.Value);
	  }

void case_742()
#line 5966 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_743()
#line 5972 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_744()
#line 5982 "ps-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_745()
#line 5987 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_753()
#line 6015 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_788()
#line 6083 "ps-parser.jay"
{
	  	  if (parsing_playscript) {
			  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
			  yyVal = null;
		  } else {
		  	  /* NOTE: This is actually allowed in PlayScript.  We'll turn it off in ASX though as it's error prone.*/
		  	  yyVal = yyVals[0+yyTop];
		  }
	  }

void case_789()
#line 6093 "ps-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_790()
#line 6098 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_791()
#line 6106 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_792()
#line 6115 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_794()
#line 6127 "ps-parser.jay"
{
		Lexer.NamespaceParsing = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];		
		yyVal = new AsUseNamespaceStatement (lt.Value, GetLocation (yyVals[-3+yyTop]));		
	  }

void case_796()
#line 6137 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_797()
#line 6153 "ps-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_798()
#line 6194 "ps-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_799()
#line 6209 "ps-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_801()
#line 6234 "ps-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = new Tokenizer.LocatedToken ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_803()
#line 6251 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_804()
#line 6257 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_805()
#line 6263 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, null, lt.Location);
		current_variable = new BlockVariableDeclaration (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_806()
#line 6269 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_807()
#line 6275 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, null, lt.Location);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_808()
#line 6281 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_810()
#line 6291 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_811()
#line 6296 "ps-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_815()
#line 6314 "ps-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_818()
#line 6329 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_819()
#line 6338 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_820()
#line 6347 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null, (FullNamedExpression) yyVals[0+yyTop]);
		d.Location = GetLocation(yyVals[-2+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]));
	  }

void case_821()
#line 6357 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-4+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[-2+yyTop], lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-2+yyTop]);
		d.Location = GetLocation(yyVals[-4+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_828()
#line 6391 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 
			LocalVariable.Flags.Constant, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_830()
#line 6417 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_832()
#line 6423 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_836()
#line 6448 "ps-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_837()
#line 6456 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 6484 "ps-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_843()
#line 6493 "ps-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
#line 6503 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_845()
#line 6513 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 6518 "ps-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_847()
#line 6524 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_848()
#line 6534 "ps-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_850()
#line 6543 "ps-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_851()
#line 6550 "ps-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_852()
#line 6557 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_855()
#line 6576 "ps-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_856()
#line 6583 "ps-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_857()
#line 6593 "ps-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;	 	
	 }

void case_858()
#line 6599 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_859()
#line 6604 "ps-parser.jay"
{
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;		
	  }

void case_864()
#line 6619 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_865()
#line 6627 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_868()
#line 6651 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_869()
#line 6658 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_870()
#line 6665 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;

		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_871()
#line 6677 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		lexer.ForInParsing = true;
		yyVal = new Tuple<Location,Location>(GetLocation(yyVals[-2+yyTop]), GetLocation(yyVals[-1+yyTop]));
	  }

void case_872()
#line 6684 "ps-parser.jay"
{
		lexer.ForInParsing = false;	  
		yyVal = yyVals[0+yyTop];
	  }

void case_874()
#line 6697 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-5+yyTop] as BlockVariableDeclaration;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-2+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-5+yyTop] as List<Expression>;
			var varRef = (yyVals[-5+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-5+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (varRef, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_875()
#line 6733 "ps-parser.jay"
{
	    lexer.ForInParsing = false;
	  
		var locations = (Tuple<Location,Location>) yyVals[-2+yyTop];

		For f = new For (locations.Item1);
		current_block.AddStatement (f);
		
		var expList = yyVals[-1+yyTop] as List<Expression>;
		if (expList != null) 
			f.Initializer = ExpressionListToStatementList (expList);
		else
			f.Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (f);
		
		yyVal = f;
	  }

void case_876()
#line 6754 "ps-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-2+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_877()
#line 6767 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_878()
#line 6776 "ps-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_880()
#line 6786 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_881()
#line 6796 "ps-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_882()
#line 6801 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_887()
#line 6822 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, type, lt.Location);
		current_variable = new BlockVariableDeclaration (type, li);
	  }

void case_888()
#line 6829 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_896()
#line 6856 "ps-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_899()
#line 6880 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_900()
#line 6885 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-6+yyTop] as BlockVariableDeclaration;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-6+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-6+yyTop] as List<Expression>;
			var varRef = (yyVals[-6+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-6+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (varRef, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_908()
#line 6930 "ps-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_909()
#line 6938 "ps-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_910()
#line 6943 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_911()
#line 6951 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_912()
#line 6957 "ps-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_913()
#line 6962 "ps-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_914()
#line 6970 "ps-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_915()
#line 6975 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_916()
#line 6981 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_917()
#line 6990 "ps-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_918()
#line 6995 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_919()
#line 7004 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_920()
#line 7020 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	  
		Error_SyntaxError (yyToken);

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_921()
#line 7040 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_925()
#line 7066 "ps-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_926()
#line 7071 "ps-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_927()
#line 7076 "ps-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_928()
#line 7084 "ps-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_929()
#line 7091 "ps-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_933()
#line 7115 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-4+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-1+yyTop];

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		c.Variable.TypeExpr = c.TypeExpression;
		current_block.AddLocalName (c.Variable);
		
		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_935()
#line 7133 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_936()
#line 7144 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		/* Required otherwise missing block could not be detected because*/
		/* start_block is run early*/
		var c = new Catch (null, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-3+yyTop];

		if (yyVals[-2+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = c;
	  }

void case_939()
#line 7179 "ps-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_941()
#line 7189 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_942()
#line 7197 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_943()
#line 7207 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_944()
#line 7217 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_945()
#line 7222 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_946()
#line 7235 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_947()
#line 7245 "ps-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_948()
#line 7250 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-7+yyTop]));
	  	
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_949()
#line 7262 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-3+yyTop]));

		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_950()
#line 7272 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-2+yyTop]));
	  
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_952()
#line 7285 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_954()
#line 7297 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_955()
#line 7321 "ps-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_956()
#line 7333 "ps-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_957()
#line 7344 "ps-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_958()
#line 7351 "ps-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_959()
#line 7360 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_960()
#line 7368 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_961()
#line 7383 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_962()
#line 7391 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_964()
#line 7410 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_966()
#line 7425 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_967()
#line 7442 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_968()
#line 7457 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_970()
#line 7470 "ps-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_971()
#line 7475 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_973()
#line 7487 "ps-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_974()
#line 7494 "ps-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_975()
#line 7502 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_976()
#line 7509 "ps-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_978()
#line 7521 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_985()
#line 7541 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_987()
#line 7560 "ps-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_988()
#line 7570 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_989()
#line 7578 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_990()
#line 7586 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_991()
#line 7594 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_992()
#line 7632 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_993()
#line 7640 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_994()
#line 7648 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_995()
#line 7656 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_999()
#line 7711 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1001()
#line 7722 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1002()
#line 7729 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1004()
#line 7738 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1005()
#line 7745 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1007()
#line 7757 "ps-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1008()
#line 7762 "ps-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1010()
#line 7774 "ps-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1011()
#line 7779 "ps-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1013()
#line 7789 "ps-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1014()
#line 7805 "ps-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1017()
#line 7832 "ps-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);

		/* Always set to true when in ineractive mode*/
		is_config_enabled = true; 
		
		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1018()
#line 7863 "ps-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1026()
#line 7906 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1027()
#line 7912 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1030()
#line 7927 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1031()
#line 7932 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1032()
#line 7940 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1033()
#line 7948 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1041()
#line 7986 "ps-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1042()
#line 7992 "ps-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1043()
#line 8001 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   16,   16,   18,   17,
   19,   17,   20,   20,   15,   21,   14,   24,   22,   22,
   22,   22,   27,   28,   30,   31,    8,   26,   26,   32,
   32,   32,   33,   33,   34,   34,   29,   29,    7,    7,
    6,    6,   35,   35,   36,   36,   37,   37,   37,   38,
   38,   38,   42,   39,   43,   39,   40,   40,   40,   40,
   40,   40,    9,    9,   10,   10,   52,   50,   55,   51,
   51,   53,   53,   53,   53,   54,   54,   59,   56,   57,
   58,   58,   60,   60,   60,   60,   60,   61,   61,   65,
   62,   64,   67,   67,   67,   68,   68,   69,   69,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   81,   82,   84,   79,   85,   78,
   88,   90,   93,   94,   95,   45,   45,   98,   71,   99,
   99,  100,  100,  101,   97,   97,  105,  103,  103,  104,
  108,   72,  112,   72,   72,  107,  115,  107,  109,  109,
  116,  116,  117,  118,  117,  113,  113,  119,  119,  120,
  121,  111,  111,  114,  114,  124,   41,  127,  129,  122,
  130,  122,  132,  122,  133,  134,  135,  122,  122,  122,
  128,  128,  131,  123,  123,  126,  126,  138,  138,  138,
  138,  138,  138,  139,  139,  141,  141,  141,  144,  141,
  142,  142,  145,  145,  146,  146,  146,  140,  140,  140,
  148,  150,  151,   73,  153,  154,  155,   75,  149,  149,
  149,  149,  149,  159,  156,  160,  157,  158,  158,  158,
  161,  162,  163,  165,  166,   46,   46,  164,  164,  167,
  167,  168,  168,  168,  168,  168,  168,  168,  168,  171,
   76,  170,  170,  172,  172,  175,  169,  169,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  177,  176,  178,  176,  176,  176,  179,   77,
  181,   74,  184,  185,   74,  180,  187,  180,  182,  182,
  188,  188,  189,  190,  189,  191,  186,  183,  183,  183,
  183,  183,  195,  192,  196,  193,  194,  194,   80,  198,
  200,  201,   47,  197,  197,  197,  199,  199,  199,  202,
  202,  203,  204,  203,  203,  203,  205,  206,  207,   48,
   49,  208,  208,  209,  210,  210,   23,  211,  211,  212,
  213,  213,  213,  214,  214,  216,   87,  147,  125,  125,
  152,  152,  217,  217,  215,  215,  218,  218,  219,  219,
  221,  221,  102,   96,   96,  110,  110,  143,  143,  173,
  173,  222,  222,  222,  225,  225,  226,  224,  224,  224,
  224,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  229,  229,  229,
  230,  230,  230,  230,  247,  247,  248,  248,  249,  249,
  231,  231,  246,  246,  246,  246,  246,  246,  246,  246,
  246,  246,  246,  246,  246,  246,  246,  233,  233,  233,
  233,  245,  245,  253,  257,  255,  255,  254,  254,  256,
  256,  256,  258,  258,  258,  258,  259,  251,  251,  252,
  252,  252,  252,  252,  261,  261,  260,  260,  262,  262,
  263,  234,  234,  234,  234,  234,  234,  264,  264,  264,
  250,  250,  265,  265,  235,  236,  236,  237,  238,  242,
  242,  242,  242,  223,  223,  266,  266,  267,  267,  244,
  244,  268,  270,  269,  271,  271,   25,   25,   25,  272,
  272,  272,  272,  273,  239,  239,  240,  240,  241,  241,
  274,  275,  243,  276,  277,  243,  279,  280,  278,  281,
  282,  278,  232,  283,  283,  283,  283,  283,  283,  283,
  283,  283,  283,  283,  283,  283,  284,  284,  284,  284,
  284,  284,  284,  284,  284,  284,  284,  285,  285,  285,
  285,  285,  285,  285,  286,  286,  286,  286,  286,  286,
  286,  286,  286,  286,  286,  287,  287,  287,  287,  287,
  287,  287,  288,  288,  288,  288,  288,  288,  288,  288,
  288,  289,  289,  289,  289,  289,  290,  290,  290,  291,
  291,  291,  292,  292,  292,  293,  293,  293,  294,  294,
  294,  295,  295,  296,  296,  296,  296,  297,  297,  297,
  297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
  297,  298,  298,  299,  299,  299,  299,  300,  300,  302,
  301,  301,  301,  303,  303,  305,  304,  306,  304,  307,
  304,  308,  309,  304,  310,  311,  304,   63,   63,  312,
  312,  312,  106,  314,  315,  316,  317,  318,  319,   44,
   86,   86,   83,   83,  136,  136,  320,  320,  320,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
  320,  320,  320,   89,   89,   89,   91,   91,   91,   92,
   92,  321,  321,  322,  322,  323,  323,  324,  324,  324,
  324,  220,  220,  325,  325,  327,  137,  331,  329,  330,
  330,  328,  328,  333,  332,  326,  326,  334,  334,  335,
  335,  335,  335,  339,  339,  340,  340,  340,  337,  337,
  337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
  337,  337,  341,  341,  341,  341,  341,  341,  341,  341,
  341,  341,  341,  341,  341,  341,  355,  355,  355,  355,
  342,  356,  338,  357,  359,  359,  360,  360,  360,   66,
   66,  358,  362,  336,  364,  336,  366,  336,  361,  361,
  361,  363,  363,  370,  370,  369,  369,  371,  371,  371,
  371,  365,  365,  367,  367,  372,  372,  373,  368,  343,
  343,  343,  354,  354,  374,  375,  375,  344,  344,  378,
  379,  376,  376,  376,  381,  377,  377,  380,  380,  382,
  382,  382,  385,  383,  384,  384,  386,  386,  386,  345,
  345,  345,  345,  387,  387,  391,  392,  388,  388,  388,
  394,  389,  396,  393,  399,  393,  393,  402,  398,  398,
  401,  401,  403,  403,  397,  397,  405,  395,  395,  400,
  400,  404,  404,  406,  407,  407,  408,  409,  410,  390,
  346,  346,  346,  346,  346,  346,  346,  411,  412,  412,
  413,  413,  413,  414,  414,  414,  415,  415,  416,  416,
  416,  417,  417,  347,  347,  347,  347,  418,  418,  420,
  420,  419,  421,  419,  419,  419,  348,  349,  422,  352,
  350,  350,  424,  425,  353,  427,  428,  351,  351,  351,
  426,  426,  423,  423,  313,  313,  313,  313,  429,  429,
  431,  431,  433,  432,  434,  432,  430,  430,  430,  430,
  430,  438,  436,  439,  440,  436,  435,  435,  441,  441,
  441,  441,  441,  446,  442,  447,  443,  448,  449,  450,
  444,  452,  453,  454,  444,  451,  451,  456,  445,  455,
  459,  455,  458,  461,  458,  457,  457,  457,  460,  460,
  460,  437,  462,  437,    3,    3,  464,    3,    3,  465,
  465,  463,  463,    5,  466,  466,  466,  466,  470,  466,
  466,  466,  466,  467,  467,  468,  471,  468,  469,  469,
  472,  472,  473,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    1,    1,    1,    0,    3,
    0,    5,    1,    2,    1,    4,    1,    0,    5,    3,
    5,    2,    0,    0,    0,    0,   11,    0,    1,    1,
    3,    1,    0,    1,    0,    1,    2,    3,    0,    1,
    0,    1,    0,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    0,    3,    0,    5,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    1,    1,    1,    1,    1,    3,    0,    3,    1,
    0,    3,    0,    1,    1,    3,    3,    1,    1,    0,
    4,    4,    0,    1,    1,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    3,    0,    3,    0,    5,
    0,    0,    0,    0,    0,   17,    5,    0,   10,    0,
    1,    1,    2,    5,    0,    1,    0,    3,    1,    1,
    0,   10,    0,   10,    8,    0,    0,    3,    0,    1,
    1,    2,    4,    0,    7,    0,    1,    1,    2,    5,
    0,    4,    2,    1,    1,    0,    3,    0,    0,   11,
    0,   10,    0,   10,    0,    0,    0,   14,   10,    5,
    0,    2,    1,    1,    1,    0,    1,    1,    3,    3,
    5,    1,    1,    1,    3,    5,    2,    5,    0,    8,
    0,    1,    1,    2,    1,    1,    1,    3,    5,    3,
    0,    0,    0,   12,    0,    0,    0,   15,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,    0,   17,    5,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    5,    1,    1,    1,    1,    0,    8,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    7,    0,    7,    2,    2,    0,    9,
    0,   10,    0,    0,   11,    0,    0,    3,    0,    1,
    1,    2,    4,    0,    7,    0,    2,    2,    2,    1,
    1,    1,    0,    5,    0,    5,    1,    1,    2,    0,
    0,    0,   12,    0,    2,    2,    0,    1,    2,    1,
    3,    2,    0,    5,    3,    1,    0,    0,    0,   14,
    6,    0,    1,    2,    0,    1,    1,    1,    4,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    0,    3,    1,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    2,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    3,    2,    3,    2,    3,    5,    5,
    5,    4,    4,    3,    4,    3,    4,    4,    4,    4,
    4,    3,    4,    1,    1,    1,    1,    0,    1,    1,
    3,    2,    3,    3,    3,    1,    1,    0,    1,    1,
    3,    3,    3,    2,    1,    1,    1,    1,    2,    2,
    1,    4,    4,    3,    4,    4,    3,    1,    3,    2,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    2,
    2,    4,    5,    1,    2,    2,    3,    1,    2,    2,
    4,    1,    1,    1,    1,    3,    1,    1,    1,    2,
    3,    4,    4,    1,    4,    4,    4,    2,    4,    2,
    0,    0,    9,    0,    0,   10,    0,    0,   10,    0,
    0,   11,    4,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    1,    5,    4,    5,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    2,    1,    1,    0,    1,    0,
    2,    1,    1,    1,    1,    0,    4,    0,    4,    0,
    5,    0,    0,    7,    0,    0,    8,    1,    1,    1,
    1,    1,    1,    1,    0,    0,    0,    0,    0,   17,
    0,    1,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    2,    3,    0,    2,    3,    0,
    1,    1,    2,    4,    3,    1,    3,    1,    3,    1,
    1,    0,    1,    1,    1,    0,    4,    0,    5,    0,
    3,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    4,    4,    1,    2,    2,    2,    1,    1,
    1,    1,    0,    8,    0,    6,    0,    8,    0,    2,
    1,    0,    1,    0,    1,    1,    2,    2,    4,    4,
    6,    0,    2,    0,    1,    1,    2,    4,    1,    2,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    5,    7,    4,    0,    8,    4,    0,    1,    1,
    2,    1,    0,    3,    1,    2,    3,    3,    1,    1,
    1,    1,    1,    5,    4,    1,    1,    7,    3,    6,
    0,    4,    0,    6,    0,    5,    1,    0,    4,    2,
    2,    2,    1,    1,    0,    1,    0,    7,    1,    0,
    1,    0,    1,    1,    1,    3,    0,    0,    0,   10,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    3,    4,    3,    3,    3,    2,    3,    2,    4,    4,
    3,    0,    1,    3,    4,    5,    3,    1,    2,    0,
    1,    2,    0,    8,    3,    6,    2,    2,    0,    3,
    5,    4,    0,    0,   10,    0,    0,    9,    5,    4,
    2,    1,    0,    2,    2,    2,    2,    2,    4,    5,
    4,    5,    0,    5,    0,    6,    3,    2,    2,    2,
    1,    0,    3,    0,    0,    6,    1,    2,    1,    1,
    1,    1,    1,    0,    5,    0,    3,    0,    0,    0,
   12,    0,    0,    0,   13,    0,    2,    0,    3,    1,
    0,    4,    1,    0,    4,    1,    2,    2,    1,    2,
    2,    0,    0,    4,    2,    3,    0,    4,    2,    2,
    3,    0,    1,    2,    2,    2,    4,    3,    0,    7,
    4,    4,    3,    1,    3,    0,    0,    4,    0,    1,
    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1015,    0,    0, 1019,    0,
    0,    0,   17,   15,   16,   23,   18,    0,   25,   27,
  403,  410,  398,  400,    0,  399,    0,  406,  408,    0,
  402,  404,  407,  409,  405,  366, 1034,    0,  401, 1024,
    0,   10,    1,    0,    0,    0,   12,    0,  837,    0,
    0,    0,    0,    0,    0,    0,  866,  436,    0,    0,
  897,    0,    0,    0,    0,    0,  434,    0,    0,    0,
  505,    0,  435,    0,    0,    0,  433,  939,    0,    0,
    0,    0,    0,    0,    0,    0,  522,    0,  791,    0,
    0,    0,    0,    0,    0,    0,    0,  432,    0,  672,
  523,  464,  836,    0,    0,    0,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  430,  431,    0,    0,    0,  786,  567,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  680,  678,  681,  679,  682,  773,    0,  756,
  758,    0,  754,  757,  774,  776,  777,  778,  779,  780,
  781,  782,  783,  784,  785,  775,  907,    0,  838,  839,
  860,  861,  862,  863,    0,  901,  902,  903,  904,  905,
  906,    0,    0,    0,    0,  382,  801,  393,    0,    0,
    0,    0,  381,  357,  358,  527,    0,    0,    0,    0,
    0,    0, 1023,   24, 1016,    0,    0,  274,  273,  270,
  275,  276,  269,  289,  288,  280,  281,  277,  279,  278,
  282,  271,  272,  283,  284,  285,  291,  290,  286,  287,
  292,    0,    0, 1037,    0, 1026,    0, 1025,    3,   77,
    0,    0,    0,   75,   13,    0,  437,    0,  438,    0,
    0,  802,  908,  538,  736,  937,    0,  800,    0,  910,
  909,    0,  566,    0,    0,    0,    0,    0,    0,  560,
    0,  871,    0,  541,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  511,  916,    0,    0,    0,    0,
    0,    0,    0,  918,  923,    0,    0,  565,  559,  540,
  938,    0,    0,    0,    0,    0,    0,  385,    0,    0,
    0,    0,  384,    0,    0,    0,  675,    0,  563,  668,
  557,    0,  562,  556,  573,  568,  574,  569,  561,  555,
  577,  572,  575,  570,  576,  571,  564,  558,  666,    0,
    0,  429,  428,    0,    0,    0,  792,    0,    0,    0,
    0,    0,  445,    0,  447,    0,  508,  509,    0,    0,
    0,    0,    0,  476,    0,    0,  470,  524,  520,  175,
  174,  525,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  738,  755, 1018,  833,  834,  790,  835,
  772,  759,  788,  787,  789,  760,  761,  762,  763,  764,
  765,  766,  767,  768,  769,  770,  771,    0,    0,  971,
  986,    0,    0,  972,  974,    0,  998,  957,  955,  979,
    0,    0,  977,  980,  981,  982,  983,  958,  956, 1021,
    0,    0,  360,  356,    0,    0,  392,   30,  534,  530,
    0,  391,    0,  394,    0,    0,   20,    0,    0,    0,
 1033,    0,  367,    0,    0,    0, 1035,    0,    6,   33,
   76,  507,    0,    0,  503,  504,    0,    0,  501,    0,
    0,    0,  485,  488,    0,    0,  480,  487,  486,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  547,  683,
    0,  913,  911,  684,    0,    0,    0,    0,    0,  915,
  914,    0,    0,  917,  927,    0,    0,    0,  928,    0,
  940,    0,  799,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  544,    0,    0,  670,    0,
  441,  442,    0,  741,  363,  364,    0,  216,  215,  217,
  389,  657,    0,    0,    0,  388,    0,  652,    0,  921,
    0,    0,    0,    0,  456,  497,    0,    0,    0,    0,
  454,  444,    0,  446,  448,    0,  494,    0,    0,    0,
    0,    0,    0,  466,  467,  462,  472,    0,    0,    0,
  638,  648,  650,  639,  640,  641,  642,  643,  644,  645,
  646,  647,  651,  649,  582,  579,  584,  581,  583,  580,
  594,  589,  595,  590,  591,  578,    0,  592,    0,  593,
    0,  600,    0,  601,    0,  602,    0,  608,    0,  609,
    0,  610,    0,  611,    0,    0,    0,    0,    0,  619,
    0,  622,    0,  625,    0,  628,    0,  631,    0,  633,
    0,    0,  869,    0,  832,  831,  830,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  970,  969,    0,  978,
    0,  968,    0,    0,    0,    0,  516,  518,    0,  515,
    0,   26,    0, 1031, 1032,  380,    0,    0,  377,    0,
    0,  213,    0,    0, 1041, 1027, 1029,   85,   83,   84,
    0,    0,   78,    0,    0,   86,   88,    0,  453,    0,
  506,    0,  491,  490,  489,  484,  439,  440,  458,    0,
  753,    0,    0,  748,  750,  751,  752,  537,  807,  553,
  943,  877,    0,  498,    0,  872,    0,    0,    0,  203,
    0,    0,    0,  197,    0,    0,  204,    0,  912,  844,
  840,    0,  942,    0,  512,    0,    0,  536,  535,  847,
    0,  932,    0,  925,    0,  929,  539,  794,  950,    0,
  798,  797,  946,  796,  803,  811,    0,    0,  865,    0,
  961,    0,  959,    0,    0,  550,    0,    0,  663,  662,
  669,    0,  667,    0,  362,  655,    0,    0,    0,  920,
  919,  793,  457,  452,  496,  495,  459,    0,  455,  443,
    0,    0,  493,  492,  460,  461,  477,  474,  475,  473,
  465,  463,  471,  526,  521,  636,    0,    0,    0,  665,
  664,  987,  963,    0,  988,    0,  973,  975,  984,    0,
  999,    0,  967, 1013,   31,  359,  533,   29,  517,  519,
  532,   22,  735,  734,    0,  733,    0,  376, 1043,  214,
 1038,    0,    0,   79,    0,    0,    0,   42,   40,   34,
    0,  105,  104,    0,  502,  483,  482,  481,  742,  743,
  737,  749,    0,    0,    0,  500,    0,  873,  875,  898,
    0,    0,  207,    0,    0,    0,    0,    0,  941,  513,
  845,  935,    0,    0,  926,  949,    0,    0,  829,  810,
    0,    0,    0,  816,  864,  962,  960,    0,    0,    0,
  671,  661,  365,  654,  653,  673,  451,  450,  449,  637,
  635,  739,    0,    0,  965,    0,  992,    0,    0, 1007,
 1008, 1001,    0,  379,  378, 1042,    0,    0,   87,   81,
    0,   89,    0,    0,  102,    0,    0,    0,    0,    0,
  499,    0,    0,    0,  220,    0,    0,    0,    0,  205,
  200,    0,  841,    0,    0,    0,  931,    0,  952,    0,
    0,    0,    0,  806,  817,    0,    0,  676,    0,  870,
  867,    0,  964,    0,    0,    0,    0,  985,    0, 1014,
 1030,    0,    0,    0,   94,   95,   98,   99,   35,   41,
  823,  150,    0,    0,    0,  826,  954,    0,    0,  887,
    0,  891,    0,    0,    0,    0,    0,  542,  383,    0,
    0,  843,  852,    0,  859,    0,    0,  850,    0,  855,
    0,    0,  951,  947,    0,    0,    0,    0,    0,    0,
  674,  868,  966,  989,    0,  976,    0,    0, 1003,    0,
  100,   92,    0,    0,    0,  808,  827,  944,    0,    0,
  876,  884,  883,  878,  880,  899,  219,  208,    0,    0,
  201,  548,    0,  846,  851,    0,  856,  933,  936,    0,
  804,    0,  819,  545,    0,  677,    0,  993, 1010, 1011,
 1004,   80,    0,   96,   97,    0,    0,    0,    0,    0,
    0,  874,    0,    0,  209,  543,    0,  858,  857,    0,
    0,  948,    0,    0,  551,    0,    0,    0,  101,    0,
    0,    0,    0,   62,   47,    0,   55,   57,   58,   60,
   61,   67,   68,   69,   70,   71,   72,  176,   36,  828,
  945,  888,  895,  879,    0,  893,    0,  900,    0,  549,
  744,  934,  821,  546,    0,  990,    0, 1005,   48,    0,
    0,  702,  712,  703,  700,  708,  697,  707,  701,  699,
  698,  705,  704,  710,  706,  709,  711,  713,    0,    0,
  695,   59,   56,    0,    0,  882,  881,    0,  210,    0,
  552,    0,  994,   64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  696,  195,  177,  194,   37,  896,    0,
    0,    0,    0,    0,    0,    0,  369,    0,    0,    0,
    0,    0,    0,  185,  685,    0,    0,  745,    0,  991,
    0,   66,  347,    0,  330,    0,  190,  178,    0,    0,
  181,  183,    0,    0,  353,    0,    0,  247,    0,  137,
    0,  997,  995,    0,  336,  335,    0,  373,    0,    0,
    0,    0,  370,    0,    0,  354,  351,    0,  686,  242,
  132,    0,  331,    0,    0,    0,  374,    0,    0,  186,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  346,  332,    0,
  340,  193,  179,    0,    0,    0,    0,    0,  397,    0,
    0,    0,    0,    0,  348,    0,  329,    0,    0,    0,
  192,  189,  182,  184,    0,  716,    0,  395,    0,  687,
    0,  722,  243,  133,    0,  345,    0,    0,  341,  180,
    0,  719,    0,    0,    0,  723,    0,    0,  349,    0,
   44,  333,  187,  396,  725,    0,  688,  244,  134,    0,
  344,    0,  730,    0,  731,  728,    0,  726,    0,    0,
    0,  350,  188,    0,    0,  124,    0,    0,  118,  112,
    0,    0,  108,  110,  111,  113,  114,  115,  116,  117,
  119,  120,  121,  122,  123,    0,  259,  254,  252,  253,
  255,  256,  257,  258,    0,    0,  250,    0,  729,  727,
    0,    0,    0,  689,  109,    0,  245,  251,  135,  128,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  126,  125,  260,  268,    0,    0,    0,    0,    0,
  368,    0,  298,    0,    0,  299,  297,    0,  371,    0,
    0,    0,    0,    0,    0,    0,  690,  246,  136,  130,
    0,    0,    0,    0,    0,    0,  225,  372,    0,  266,
    0,    0,  263,  262,  261,  138,    0,  295,  387,    0,
  386,    0,  293,    0,    0,  221,  151,    0,  303,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  149,
  147,    0,  146,    0,  307,    0,    0,  155,    0,    0,
    0,    0,    0,    0,  222,  157,    0,    0,    0,    0,
    0,  142,  322,    0,  304,    0,    0,  316,    0,    0,
    0,  311,  296,  173,    0,    0,    0,    0,  168,  300,
  294,    0,    0,    0,    0,    0,    0,    0,  161,  148,
    0,  139,  143,    0,    0,    0,  318,    0,  319,  308,
    0,    0,  302,  312,    0,    0,  154,  169,    0,  265,
  267,  264,  233,    0,  223,    0,    0,  158,    0,  152,
  162,    0,  323,  325,  305,    0,    0,  317,    0,  172,
    0,  226,    0,    0,  230,  232,    0,    0,    0,    0,
    0,    0,    0,  234,  236,  224,    0,  144,  327,  328,
  324,  326,  314,  170,  227,    0,    0,  164,  316,    0,
  240,  239,  238,  235,  237,    0,  315,  228,  165,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   53,    9,   54,   10, 1137,   55,  251,  771,  471,
   12,   13,   23,   24,   25,   26,   27,  211,  212,   56,
   29,   30,  320,  476,  201,  900,  738,  983, 1138, 1094,
 1225,  901, 1649,  620, 1165, 1166, 1167, 1168, 1169, 1419,
 1420, 1200, 1201, 1172, 1173, 1174, 1175, 1176, 1177,  254,
  733,  498,  734,  735,  978,  736,  737,  982,  897, 1034,
 1035, 1036,  430,  506, 1133,  114,  904, 1421, 1422, 1423,
 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
 1434, 1435, 1219, 1451, 1452, 1243, 1257, 1291, 1332, 1323,
 1352, 1370, 1388, 1411, 1478, 1349, 1542, 1528, 1560, 1561,
 1562, 1058, 1543, 1041, 1558, 1042, 1557, 1539, 1587, 1520,
 1550, 1533, 1577,  939, 1585, 1588, 1589, 1666, 1578, 1579,
 1575, 1178, 1246, 1224, 1258,  773, 1299, 1343, 1360, 1304,
 1344, 1305, 1286, 1330, 1402, 1220,  820,  774,  775,  776,
  777,  720,  584, 1189,  721,  722, 1482, 1538, 1615, 1584,
 1634, 1491, 1524, 1643, 1660, 1616, 1617, 1664, 1656, 1657,
 1289, 1322, 1387, 1445, 1410, 1477, 1446, 1447, 1474, 1515,
 1496, 1611,  323,  242, 1525, 1475, 1535, 1531, 1505, 1546,
 1530, 1570, 1565, 1544, 1595, 1600, 1568, 1571, 1572, 1659,
 1601, 1566, 1567, 1651, 1639, 1640, 1275, 1297, 1339, 1325,
 1358, 1340, 1341, 1377, 1294, 1375, 1400, 1284, 1285,  477,
  204,  205,  473,  577,  493,  243, 1260,  718,  719,  885,
 1059,  207,  482,  115, 1367, 1350,   49,  116,  117,  118,
  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  267,  749,  508,
  515,  516,  136,  375,  616,  376,  852,  377,  848,  517,
  518,  519,  744,  765,  509,  483,  709,  137,  379,  138,
  383,  209,  480,  528, 1110,  815, 1154,  431,  778, 1147,
  949, 1195,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,  152,  153,  154,  587,  588,  589,
  821,  822,  862,  155,  573,  570,  818,  354, 1019,  568,
 1080,  156,  157,  535, 1287, 1321, 1385, 1409, 1476, 1221,
 1371, 1372, 1407, 1408,  886,  752,  520,  911,  432,  159,
  682, 1192, 1230,  753,  754,  433,  434,  435,  162,  163,
  164,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  445,  446,  447,  176,  448,  593,  177,  263,  557,  558,
  808,  938,  942,  560,  987,  913, 1044,  940,  943, 1049,
  944, 1045, 1046,  449,  178,  179,  180,  782, 1004, 1066,
 1005, 1067, 1068, 1069, 1116, 1070,  181,  182,  183,  184,
  185, 1022,  766,  526,  767,  992,  768, 1053,  993, 1054,
 1184, 1143, 1105, 1185, 1099, 1186, 1187,  283,  994, 1144,
  186,  187,  188,  189,  190,  191,  301,  548,  549, 1008,
 1151,  313,  989,  914, 1140, 1011,  937, 1120,  192,  459,
  193,  460,  964, 1024,  461,  462,  702,  693,  694,  968,
  463,  464,  465,  466,  467,  969,  688,  966, 1127, 1232,
 1270, 1026, 1157, 1252,  871,  696,  872, 1088, 1029, 1089,
 1158,  973,  215,   17,   19,   50,   51,  246,  723,  893,
  494,  724,  725,
  };
  protected static readonly short [] yySindex = {         -205,
    0, -173, -113, -229, -208, 5831,    0,  101,    0,    0,
 -208, -229,    0,    0,  -63,    0, 6653, -208,    0, 1176,
  241,    0,    0,    0,    0,    0,    0,  -47,    0,    0,
    0,    0,    0,    0,  388,    0,  522,    0,    0,13474,
    0,    0,    0,    0,    0,    0,    0,  855,    0,    0,
  872,    0,    0,  101,  263, -208,    0,  343,    0,  672,
  477, -216,  233, -181,   70, 8902,    0,    0,   70,   70,
    0, -274, -163,   70,   70, 7295,    0, 7598,   70,   70,
    0, 7761,    0,  587, 9065, -192,    0,    0,  676,   70,
  233,   70, 6151, 6151,    6, 8739,    0,14387,    0, 9228,
 9391, 9554, 9717, 9880,10043,10206,10369,    0,  246,    0,
    0,    0,    0, -195,  687,  789,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  421,  677, 7924,    0,    0,
 1257,  707,  -85,  818,  631,  846,  612,  656,  719,  721,
  536,  669,    0,    0,    0,    0,    0,    0,  776,    0,
    0, 3611,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -289,    0,    0,
    0,    0,    0,    0, 6816,    0,    0,    0,    0,    0,
    0,   69,  160,  263,    0,    0,    0,    0,  451,  640,
  769,  748,    0,    0,    0,    0,  792,  798,  841,  808,
  542,  831,    0,    0,    0, 9583, 9583,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  849,  833,    0,  850,    0, -221,    0,    0,    0,
  263,  967,  263,    0,    0, 1056,    0,  867,    0,14543,
13919,    0,    0,    0,    0,    0,14387,    0,  922,    0,
    0, 9583,    0, -213,  953, -174, 1051,10532, -310,    0,
 9583,    0,   70,    0,  966,14387,  477,  477,14387,14387,
14387, 2169,  908,  968,    0,    0,   48, 8739,  276, 1104,
  477, 9583,14387,    0,    0,  477,  643,    0,    0,    0,
    0,14387,  587,  909,14075,  959,14387,    0,  908,  684,
 1054,  233,    0, 1055,  233,  317,    0, 1000,    0,    0,
    0,  447,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  913,
 5671,    0,    0,16666,  477,14387,    0,  645, 8087,13919,
  423,  569,    0,  916,    0,  592,    0,    0, 8250,13919,
  960,  965,  969,    0,  231, -137,    0,    0,    0,    0,
    0,    0,  975,14387,14387,14387,14387,14387,14387,14387,
14387,14387,14387,14387,14387,14387,14387,10695,10858,11021,
 5991, 8768,11184,11347,11510,11673,11836,11999,12162,12325,
12488,12651,15323,15323,15323,15323,12814,12977,13140,13303,
13466,15323,14387,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -126,  425,    0,
    0, 6151, 6151,    0,    0,  233,    0,    0,    0,    0,
  234, 1005,    0,    0,    0,    0,    0,    0,    0,    0,
  263,  925,    0,    0,  496,  991,    0,    0,    0,    0,
  716,    0,  792,    0,  233,  985,    0, -208,  849,  849,
    0,  194,    0,  692,  849, 1001,    0, -171,    0,    0,
    0,    0,  908,  276,    0,    0,  989,  799,    0,14387,
14387, 1137,    0,    0,  449,  992,    0,    0,    0, 6979,
 1003, 9583, 1006, 1008,  233, 7435,14231,  198,    0,    0,
  477,    0,    0,    0,   99,  104, 1009,  986,  948,    0,
    0,  105,  132,    0,    0,  482,  587, -132,    0, 1011,
    0,  477,    0,  152,  553,  798,  233,  792, 9583, -187,
  196,14387, 1095,14387, 1096,    0, 1016,16666,    0, -146,
    0,    0, -146,    0,    0,    0,  296,    0,    0,    0,
    0,    0,  908,  233, 9746,    0, 1007,    0, 1023,    0,
 1152,  477, 6979,  539,    0,    0,  -64,  449,14387,  565,
    0,    0,14543,    0,    0,14543,    0,  -58,  449, -120,
14387,14387,14387,    0,    0,    0,    0,  367, 7924,  677,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  707,    0,  707,    0,
  707,    0,  -85,    0,  -85,    0,  -85,    0,  818,    0,
  818,    0,  818,    0,  818,  631,  631,  631,  631,    0,
  846,    0,  612,    0,  656,    0,  719,    0,  721,    0,
 -157, 6979,    0,   70,    0,    0,    0, 8413, 1107,  233,
 1108,  233, 8413, 8413, 1012,14387,    0,    0, 1005,    0,
  233,    0, -251,  908,  748, 1018,    0,    0,  801,    0,
  748,    0, 1032,    0,    0,    0,  657,  320,    0, 9746,
  692,    0, 1031, 1022,    0,    0,    0,    0,    0,    0,
  908,  968,    0, 1024, 1026,    0,    0, -165,    0,  369,
    0,14543,    0,    0,    0,    0,    0,    0,    0, 7272,
    0,  250, 6979,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  233,    0,  -98,    0, 1115, 1025, 1120,    0,
  561,  252, 1039,    0, 1033, 1035,    0,  198,    0,    0,
    0, 6816,    0, 6816,    0,  173,  908,    0,    0,    0,
 1046,    0, 8931,    0,  587,    0,    0,    0,    0, 6816,
    0,    0,    0,    0,    0,    0, 7924, 1037,    0, 6816,
    0,14387,    0,14387,  198,    0, 1042, -146,    0,    0,
    0,14387,    0, 9583,    0,    0,  233,16666, 1075,    0,
    0,    0,    0,    0,    0,    0,    0, 1050,    0,    0,
  807,  812,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8576,  250,14387,    0,
    0,    0,    0, 1133,    0, 1135,    0,    0,    0,  727,
    0, 1044,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  994,    0,  194,    0,    0,    0,
    0,  692,  692,    0,  925, 1059, 1062,    0,    0,    0,
 1057,    0,    0,14387,    0,    0,    0,    0,    0,    0,
    0,    0, 1047, 1049, 1052,    0,14387,    0,    0,    0,
 -162, 1010,    0, 1060,  263, 1204, 1070, 1178,    0,    0,
    0,    0,  506,  233,    0,    0, -180, -187,    0,    0,
  233,  477, 1037,    0,    0,    0,    0, 1074,  198, 1101,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  219, 8413,    0, 8413,    0, 1094, 8413,    0,
    0,    0,  455,    0,    0,    0, 1079,  925,    0,    0,
14699,    0, 1084, 1020,    0,14387, 1073, 7924, 1037, 9583,
    0,14387,14387,14387,    0, 1068, 1081, 9909, 1076,    0,
    0, 1082,    0, 6816, -209, 9583,    0, 1090,    0, 1037,
 1100, 1037,  111,    0,    0, 1085, 1103,    0, -146,    0,
    0,  477,    0, 8413, 1117, 8413, 8413,    0,14387,    0,
    0, 1026,  274, -242,    0,    0,    0,    0,    0,    0,
    0,    0,  233,  477, 1073,    0,    0, 1037, 1106,    0,
 1110,    0, 6816,  767, 1110,14387, 9094,    0,    0, 1237,
 9909,    0,    0,14387,    0, 1112, -228,    0, -228,    0,
 1111, 1248,    0,    0,  477, 9583, 7924, 9909, 1102, -146,
    0,    0,    0,    0, 1138,    0,  821, 1109,    0, 1122,
    0,    0,14699,  840, 1113,    0,    0,    0, -187, 6816,
    0,    0,    0,    0,    0,    0,    0,    0, 1116,  587,
    0,    0, -124,    0,    0, 6979,    0,    0,    0, 6816,
    0, 1121,    0,    0, 9909,    0, 8413,    0,    0,    0,
    0,    0,14387,    0,    0,  840,  114, 1125,14387, 6816,
 1037,    0,14387, 6816,    0,    0,  587,    0,    0, 6979,
 1123,    0, 7924,  587,    0, 1145, 8413,14387,    0, 1129,
    0,16591,  531,    0,    0,  114,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  764,    0, 1118,    0,14387,    0,
    0,    0,    0,    0,  587,    0, 1148,    0,    0,  470,
 1139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  513,16591,
    0,    0,    0,  330,  840,    0,    0,14387,    0, 6979,
    0, 8413,    0,    0,  114, 1080, 1080,16553, 1086, 1086,
 1088, 1222,  580,    0,    0,    0,    0,    0,    0, 1141,
 1157, 8413, 1150, 1154, 1136,  908,    0,  131,16553, 1092,
 1160, 1161, 1146,    0,    0, 1305, 1307,    0,  233,    0,
 1157,    0,    0, 9257,    0, 1172,    0,    0, 1179, 1119,
    0,    0, 1114, 1168,    0, 1086, 1080,    0, 1080,    0,
 1080,    0,    0,  198,    0,    0, 1186,    0,  198,  198,
 1205, 1181,    0,  198,  198,    0,    0, 1184,    0,    0,
    0, 1191,    0, 1193, 1194,    0,    0, 1195, 1196,    0,
 1285, 1285, 1285, 1187,  263, 1188, 1188, 1188, 1188,  198,
 9583, 1281, 1281, 1281, 9909, 1144,  879,    0,    0, 1197,
    0,    0,    0, 9909, 9909, 9909, 9909, 1201,    0, 1339,
 9583, 1238, 1238, 1238,    0, 1344,    0, 1214,  263, 1238,
    0,    0,    0,    0, 1202,    0,  -67,    0, 1153,    0,
 1238,    0,    0,    0, 1238,    0, 1206, 1200,    0,    0,
 1245,    0, 9583, -109, 1224,    0, 1226, 1227,    0,14387,
    0,    0,    0,    0,    0,16701,    0,    0,    0, 1212,
    0, 1238,    0, 1229,    0,    0, 1220,    0, -149,  263,
 -149,    0,    0, 1231,16701,    0,    0,16591,    0,    0,
 1239, -149,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,16591,    0,    0,    0,    0,
    0,    0,    0,    0, 1240,  263,    0, 1241,    0,    0,
 -149, 1244,14494,    0,    0, 2650,    0,    0,    0,    0,
 -149, 1171, 1086,  257, 1182,  550,  422,  110,13474, 1086,
 1185,    0,    0,    0,    0, 1200, 1200, 1200, 1247, 1223,
    0, 1230,    0, 9583, 1235,    0,    0, 9583,    0,  908,
 1249,  130, 1250, 1242, 1243,  662,    0,    0,    0,    0,
 9583, 9583, 1252,10072, 1190, 1256,    0,    0,  908,    0,
 9909, 9909,    0,    0,    0,    0, 1261,    0,    0, 1394,
    0, 1260,    0,  198,  198,    0,    0, -154,    0, 1251,
  198, 1258, 1263, 1262,  198, 1264, 1269, 1266, 1259,    0,
    0, 1265,    0,  262,    0, 1272, 1284,    0, 1421, 1278,
  330, 1292, 1282, 1286,    0,    0, 1288,14387, 1234, 1283,
 1265,    0,    0,16591,    0,  263,  263,    0, 1253, 1299,
 1272,    0,    0,    0,14387, 1254, 1301, 1278,    0,    0,
    0, 9909,10235,  269, 7924, 1274, 1302, 1288,    0,    0,
 1309,    0,    0, -151, 1325,16591,    0,16591,    0,    0,
 7924, 1312,    0,    0, 1342, 1263,    0,    0, 1346,    0,
    0,    0,    0,16591,    0,  269,  269,    0, 1326,    0,
    0, 9909,    0,    0,    0, 1407, 1483,    0, 9909,    0,
 1345,    0,  903, 1367,    0,    0, 9909, -154,  664,  664,
 1384, 9909,  269,    0,    0,    0, 1387,    0,    0,    0,
    0,    0,    0,    0,    0, -214, -214,    0,    0, 1409,
    0,    0,    0,    0,    0, 7924,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {           28,
    0,    0, 6327,   28,    0,    0,    0, 1798,    0,    0,
   54, 2523,    0,    0,    0,    0, 1413,   54,    0,    0,
    0,  516,    0,    0,    0,    0,    0,   44,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1802,    0,    0,
 1802,    0,    0, 1798,   55,   31,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1399,    0,    0,
    0, 1399,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -169,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7077,    0,
    0,    0,    0,    0,    0, 3679,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  255,    0,    0,    0,    0,
 3886, 3969, 3003, 4586, 4987, 5386, 5546, 5706, 5866, 6026,
  390,  882,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1413,    0,    0,    0,    0,    0,
    0,    0,    0,   66, 2310,    0,    0,    0,  636,  722,
    0,    0,    0,    0,    0,    0, 1967, 1861, 1405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1802,   37,    0,    0,    0,    0,    0,    0,    0,
   46,    0,   73,    0,    0,    0,    0,    0,    0,    0,
  453,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3273,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1347, 3416,    0,    0,    0,    0, 3130, 1406,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,    0,    0,  267, 1861,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1419,    0, 1399,    0,    0,    0,  453,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  453,
    0,    0,    0,    0,    0,  328,    0,    0,    0,    0,
    0,    0, 1422,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6186,    0,    0,    0,    0,    0,    0,    0,    0,
 2762,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2126,    0,    0,    0,    0, 1425, 1802, 1802,
    0, -125,    0, 9420, 1802, 1816,    0,    0,    0,    0,
    0,    0, 3130, 3743,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  458,    0,    0,    0,  281,
    0,    0,    0,    0,    0, 1416,    0,  230,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1550,    0,    0,
    0,    0,    0,    0,  331,13540,    0,  508,    0,  869,
    0,    0,    0,    0,    0,    0,    0, 1419,    0,14855,
    0,    0,14855,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  699,    0,    0,    0, 1431,    0,    0,    0,
 1406,    0, 1413, 3130,    0,    0,    0,    0,    0, 3130,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  458,
    0,    0,    0,    0,    0,    0,    0,    0, 1438,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4075,    0, 4158,    0,
 4264,    0, 4347,    0, 4426,    0, 4507,    0, 4667,    0,
 4746,    0, 4827,    0, 4906, 5066, 5147, 5226, 5307,    0,
 5467,    0, 5627,    0, 5787,    0, 5947,    0, 6107,    0,
    0,  281,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6186,    0,
    0,    0,    0,  636,    0,    0,    0,    0,    0,    0,
  -42,    0,    0,    0,    0,    0, 1378,    0,    0,    0,
10398,    0,    0,  902,    0,    0,    0,    0,    0,    0,
  803,  786,    0,    0, 1422,    0,    0, 1446,    0,15011,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  302,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  170,    0, 1430,    0,    0,    0,
 1381,  329,    0,    0, 1444, 1447,    0,  230,    0,    0,
    0, 1413,    0, 1413,    0,    0, 1347,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1413,
    0,    0,    0,    0,    0,    0,    0, 1434,    0, 1413,
    0,    0,    0,    0,  230,    0,    0,14855,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -166,
    0,  251,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -125,    0,    0,    0,
    0,10561,16717,    0, 1438,    0,  814,    0,    0,    0,
 1453,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  914,  588,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  345,    0,    0, 1752,    0,    0,
    0,    0,  754, 1449,    0,    0,  588,  869,    0,    0,
    0,    0,  229,    0,    0,    0,    0,    0,  230,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  698,    0,    0,    0,    0,    0, 1439,    0, 1452,    0,
    0,    0,  770,    0,    0,  717,    0,    0, 1455,    0,
    0,    0,    0, 1413, 1460,    0,    0,    0,    0, 1452,
    0, 1434,  382,    0,    0,    0,    0,    0,14855,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1422,13731,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1445,    0,    0, 1461,    0,    0,
    0,    0, 1413,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1466,    0, 6490,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,14855,
    0,    0,    0,    0,    0,    0, -148,  290,    0,    0,
    0,    0,    0,15406,    0,    0,    0,    0,  338, 1413,
    0,    0,    0,    0,    0,    0,    0,    0,  758,    0,
    0,    0,    0,    0,    0, 1413,    0,    0,    0, 1413,
    0,  385,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,15406, 2876,    0,    0, 1413,
  240,    0,  838, 1413,    0,    0,    0,    0,    0, -183,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
16094,  825,16258,    0,    0, 2964,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  844,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,16343,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  581,14182,
    0,    0,    0,    0, 2656,    0,    0,    0,    0,  919,
    0,    0,    0,    0,16182,    0,    0,    0,    0,    0,
    0,  594,    0,    0,    0,    0,    0,    0,    0,    0,
  334,    0,    0,    0, 1470, -156,    0,    0,    0,    0,
    0,    0, 1454,    0,    0, 1408, 1410,    0,    0,    0,
  334,    0,    0,    0,    0,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  230,    0,    0,    0,    0,  230,  230,
  760,    0,    0,  230,  230,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  521,    0,    0,    0,    0,
  446,  446,  446,    0,   24, -236,    0,    0,    0,  230,
    0, -224, -224, -224,    0,    0,15508,    0,    0, 1471,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
    0, 1473, 1473, 1473,    0,  634,    0,    0,  297,  670,
    0,    0,    0,    0,    0,    0,  578,    0,    0,    0,
  682,    0,    0,    0, 1462,    0,    0, 2417,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  670,    0,    0,    0,    0, -232,    0,15610,15916,
15610,    0,    0,    0,    0,    0,13730,14338,    0,    0,
    0,15712,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7549,    0,    0,    0,    0,
    0,    0,    0,    0,    0,16018,    0,    0,    0,    0,
15814,    0,  581,    0,    0,  581,    0,    0,    0,    0,
15610,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2417, 2417, 2417,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1472,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1472,    0,
    0,    0,    0,    0,    0,    0,  815,    0,    0, 1480,
    0,    0,    0,  230,  230,    0,    0,  915,    0,  918,
  230,    0,    0,    0,  230,    0,    0,    0,  933,    0,
    0, 1469,    0, 1349,    0, 1474,    0,    0,15167, 1475,
    0,    0,    0,    0,    0,    0, 1476,    0,    0,    0,
 1477,    0,    0,  201,    0, 3002, 7097,    0,    0,    0,
 1478,    0,    0,    0,    0,    0,    0, 1479,    0,    0,
    0,    0,    0,16509,    0,    0,    0, 1481,    0,    0,
    0,    0,    0,    0,    0, 1533,    0, 1611,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  947,    0,16389,16427,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  915,16471,  666,
  934,    0,16509,    0,    0,    0,  941,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1821,    0,    0,    0, 1233,   16, 1682,  -35,   29,
    0, 1865, -198,  431,  434,  780,    0,    0,    0, 1886,
    0,    0,   -6,    0,    0,    0,    0,    0,-1023,    0,
    0,    0, -746, -699,  658,    0,  726,  694,    0,-1044,
-1017,    0,    0,    0,    0,    0,    0,    0,    0, -241,
    0,    0,    0,  932,    0, 1017,    0,    0,    0,    0,
  820,  822,  -17, -244,    0,  478,    0, -895,    0,-1285,
-1277, -634, -542, -467, -452, -449,    0,    0,    0, -462,
    0,    0, -959,    0,    0,    0,    2,    0,   26,    0,
   18, -418,    0,    0,    0,  -88,  273,    0,    0,    0,
  355,-1029,    0,-1109,    0, -283,    0,    0,    0,    0,
  313,    0,    0, -131,    0,    0,  332,    0,    0,  344,
    0,    0,  370,    0,-1116, -669,    0,    0,    0,    0,
  -26,    0,    0,    0,    0,-1188,  -60,    0,    0,  998,
  999, 1155, -556,    0,    0, -329,  457,    0, -598,    0,
    0,    0,    0,    0,    0,    0,    0,  268,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  483,    0,    0,
    0,    0,   36,  459,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  271,    0,    0,  360,    0,
    0,  368,  374,  294,    0,    0,    0,    0,    0,    0,
    0,    0,  577,    0,    0,    0,    0,    0,    0, -170,
    0,    0, -105,    0,  663,    0,  476,    0, 1058,    0,
 1922, -281,   59,   -5,    0, -435,    0,    0, 1631,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1162,    0,    0,    0,  -12,  474, -272,
  797, 1577,    0,    0,    0,    0,    0, 1331,  743,    0,
 1203,    0, 1440,    0, 1208,    0,    0,    0, 1332,    0,
    0,    0,  520,    0,    0,    0,    0,  179,    0,    0,
    0,    0,    0, 3070,  906,  907,  870,  884, 1542, 1543,
 1541, 1544, 1545,    0, 1546,    0,    0,    0, 1142, 1395,
 -550,    0, -559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -307,    0,    0,    0,    0,    0, -532,
    0,  598,    0,  556,    0, -655,    0, 1124,  310,    0,
    0,    0,    0,  858, -571,   -8, -501,   -1,    0, 1803,
    0,  319,    0,  323,  364,  386,  387,  394,  396,  397,
  405,  416,  429,    0, -705,    0,    0,  -31,    0,    0,
 -886,    0, -953,    0,    0,    0,    0, -966,  -44,  970,
 -586,    0,  930, -688,    0,    0,    0, -540,    0,    0,
    0,    0,  910,    0,    0,  912,    0,    0,    0,    0,
    0,    0,    0,    0, 1451,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -37,    0, 1428,    0,
    0,    0, 1048,    0,    0,    0,    0,    0,    0, -175,
    0,    0,    0,    0,    0, 1518, 1287,    0,    0,    0,
 1522,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  713,    0,    0,    0,    0,    0,    0,    0,    0,  829,
    0,    0, 1826,    0,    0,    0,    0,  -16, 1097,    0,
    0,    0, 1099,
  };
  protected static readonly short [] yyTable = {           113,
   48,  266,  531,  353,  322,  325,  382,   47,  160,  561,
  538,  501,  487,  200,  208,  161,  514,  469,  756,  252,
  810,  832,  823,  307,  585,  311,  858,   51,  827, 1180,
   50, 1112,  271,  194,  248,  896,  375,  484, 1022,  264,
 1064, 1661,  264, 1022,  306,   73, 1063,  261, 1124, 1259,
    1, 1012,  272,   49,    5,  203,  281,  282, 1075, 1064,
  300,  289,  290,  310,  305, 1020,  302,  303,  806,  294,
  295,  355,    7,  312,  270, 1009,  928,  315,  929,  317,
  332,  310,   14,  253,  728,  854,  597,  208,  208, 1006,
  898,  756, 1170,  995,  936, 1155,  608,  801,  856,  366,
   20, 1540,  360,  370,  945,  286, 1416, 1009,  927,  819,
 1123, 1623, 1160,  287,  427,  514,  284,  729,  617, 1171,
  381, 1170, 1261, 1262,  496,  514,  191,  489,  490,  683,
  724, 1148, 1439,  867,  868,  846, 1455,  546,  717,  351,
  356,  539, 1279,   16,  113,  948, 1395,   21, 1171, 1092,
  191,    2,  875,  160,  724, 1170,  352,  916,  252, 1093,
  161,  795,  717,  889,  730, 1460,  801,  191, 1439, 1308,
  265,  724,  265,  353,  257,    2,  401,  257,  428,  285,
  756,  912, 1171,  523,   73, 1624, 1193, 1182, 1382, 1662,
 1170,  835,  525,  353,  265,  139, 1006,  843,  257,   73,
 1006, 1248, 1006,  740,  854, 1006, 1006,  357, 1006, 1006,
  208,  208, 1141,  542, 1009,  499,  257, 1171, 1009,  197,
 1009,  807,  262, 1009, 1009,  491, 1009, 1009,  988,  501,
  402, 1065,   46,  801,  366, 1006,  361,  684,  585,  250,
  265,  259,  505,  513,  259,  857,  366,   22,  497,  521,
 1065,  756,  551, 1009, 1541,  532,  533,    3,    4,    5,
    6,   20,  576,  312,  618,  259,  208,  951,  530,  541,
  527,  534,  536,  537,  544,  208,  854, 1259, 1149, 1017,
   15,  750,  731,  259,   51,  543,  208,   50,  899,  375,
  268,  996,  375, 1396,  550, 1022,  208,  554, 1062,  534,
 1022, 1006,   73,  917,  805, 1355, 1417,  326,   21,  555,
   49,    5,  642,  644, 1361, 1362, 1363, 1364,  592, 1009,
  403,  404, 1020,  590,  450,  836,  158,  375,   73,    7,
  841,  844, 1090,  842, 1383,  165,   51,  742,  591,  166,
  139,  505,  513,  742,  375,  208, 1481, 1101,  208,  524,
  531,  505,  513, 1481,  780,   51, 1015,   52,   50,  783,
  788,  531,  405,  690,  692, 1437,  621,  622,  623,  624,
  625,  626,  627,  628,  629,  630,  631,  632,  633,  634,
  167,   49,   73,   51,  801,  802, 1277,  790,  197,  586,
   58,  890, 1438,   73, 1142,  208,  208,  739,  353,  375,
   74, 1437,  168,  169, 1023,  681, 1025,  799,   22, 1028,
  170,  337,  171,  172, 1152,  450,   51,  687,   50,   50,
  213,  173,   20,  375,  375,  740,  361,  375, 1438,  375,
  197,  451,  174,  759, 1181,  452,  375,  453, 1188,  375,
  454,  455,   49,  456,  457,  175,  208,  208, 1590,  716,
  805,  809,  805,  770, 1183, 1489,  717,  805, 1453,  268,
  257, 1015,  327,  693, 1083,  703, 1085, 1086, 1081,   21,
  805,  158,  714,  715, 1020, 1508, 1456,   73,  726,  889,
  165, 1526, 1527,   51,  166,  792,  794,  854,  834,  697,
  781,  732,  743,  743,  840,  784,  789,  202,  585,  779,
 1109,  268,  250,  713,  327,  907, 1000,  923,  764,  764,
 1100,  755, 1483, 1076, 1106, 1448,  208, 1563,  757, 1077,
  798, 1278,  451,  791, 1613,  167,  452,  259,  453, 1126,
  501,  454,  455,  793,  456,  457,  458,  693,  813, 1249,
  269,  710,  360,  800,  811, 1002,  813,  168,  169,  812,
  288,  963, 1609,  208,   73,  170,  772,  171,  172,  210,
  831,   97,  208, 1490,   73, 1479,  173, 1156,  316, 1161,
  321,  324,  328,  889, 1250,   73,  800,  174,  912,  208,
 1484,  838,  250, 1509,  755,  505,  250,  781,  505,  996,
  175,  757, 1638,  847,  847,  847,  451, 1197,  876, 1641,
  452,  381,  453,  586, 1594,  454,  455, 1647,  456,  457,
 1021,  349, 1654, 1000,  756,  197,  804, 1000,  614, 1000,
  586,  196, 1000, 1000, 1312, 1000, 1000,  468,   73, 1314,
 1315, 1392,  813,  111, 1318, 1319, 1626,  909, 1627,  349,
  250,  349,  468,  812, 1227,  632,  361,  809,  756,  361,
  250,  250, 1002,   74, 1633,  361, 1002,  250, 1002,  361,
 1348, 1002, 1002,   74, 1002, 1002,  350,  740,  746,   73,
  861,  859, 1251,  755,   74,  861,  861, 1487,  870,   73,
  757,  876, 1091,   73,  339, 1052,  268, 1244,  740,  747,
   73,  818, 1271,  902,  820,  351,  996,  824,  615,  632,
  996,  698,  996,  903,  934,  996,  996,  566,  996,  996,
  450,  216,  352,  355,  208,  469,  265,  910, 1000,  355,
  361,  887,  468,  351,  505,  351, 1244,   74,  756, 1497,
 1498, 1499,  513, 1245,  935,  953, 1038,  507,  507,  809,
  352,  809,  352,   73,  755, 1488,  255,  825,  746,  371,
   73,  757,  632,  714,  851,  586,  632, 1002,  632,  632,
  632,  632,  632,  632,  632,  632,  632,  632,  632,  747,
  567,  888, 1107,  818,  328, 1440,  820,  632,   20,  632,
 1113,  632,   74,  818,  355,  818,  820,  208,  820,  381,
 1236,  632,  632,  632,  946,  469,  947, 1030,   73,  563,
 1237,  996,  565,  371,  952,  715,  772,  214,  714,  632,
 1202, 1440,  685,  599, 1238, 1239, 1240,  451,  208,  372,
  373,  452,  208,  453,   19,   21,  454,  455,  262,  456,
  457, 1241,  714,  374, 1203,  214,  507,  507,  571,  961,
  747,  534, 1204,  772,  478,  217,  507,  507, 1038,  479,
   20,  717, 1265,  691, 1536, 1537, 1047,  632,  250,  472,
  715, 1547, 1338,  586, 1205, 1552,  692, 1441,  265, 1206,
 1207,   19,  257,  372,  373, 1208,  600, 1242,  197, 1209,
  262, 1210, 1211, 1212,  715,  578,  985,  374,  732,  601,
  795, 1213,  686, 1266,  691,  579, 1338,   21,  545,  991,
  351, 1050,   21, 1441, 1214, 1229,  580,  692, 1006, 1215,
 1014, 1216,  546,  363,  572, 1368,  748, 1071, 1222,  250,
  478,  501,  380, 1267,  691,  479,   43,  353,   43,  689,
  691, 1217,  474,  695, 1373, 1374,  547,  692, 1164,  259,
  718, 1380, 1442,  257, 1048,  358,  861, 1394,  861,  704,
   43,  861,  705,  772, 1486,  351, 1389, 1443,   43,  921,
 1444,  795,  711, 1037,  718, 1048,  883, 1164,  530,  421,
  381,  732,  380,  265, 1051,  534, 1055,  772, 1442,  953,
   43,  884,  422, 1413,  208,   43,   43, 1122,  351,  953,
 1082,   43,  208, 1443,  314,   43, 1444,   43,   43,   43,
  208, 1164,  761, 1256, 1218,  833,  861,   43,  861,  861,
  259, 1087, 1096,  359,  351,  361,  578, 1635, 1636,  474,
   43,  342,  602,  417,  361,   43,  579,   43,  361,  603,
  361,  839,  475,  203,  803,  342, 1164,  580,  530,  361,
  409,  410,  343, 1121, 1655,  605,  530,   43,  265, 1146,
  265,  208,  606,   43,   43,  208,  720,  411,  412,  381,
  256,  826,  257,  474,  258, 1513,  378, 1391,  721,   73,
  208,  837,  208,  720,  418, 1037,  539,  257,  361,  358,
  507,  361,  845,  507,   73,  721, 1190,  361,  423,   93,
  656,  361,  586, 1194,  800,  501,  203,  693,  594,   93,
  656, 1162,  693,  970,  971,  707, 1401,  755,  218,  861,
  355,  595,  693,  203,  757, 1159,   28,  708,  218,  208,
   43,  530,  398,  399,  400,  355,  693,  693,  693,  259,
 1162,  419,  260,  361, 1231,  381,  361,  634,  693,  861,
 1087,  755,  361,  693,  259,  361,  361,  359,  757,  206,
 1276, 1226,  361,  420, 1102,  781,  598,  890, 1103,  206,
  203,  890,  424, 1247, 1162, 1163,  609,  864,  693,  866,
 1104,  530,  478,  890, 1302,   90,   90,  474,  874,  257,
  481,  361,  362,  363,  364, 1296,  365,   90,  741,  693,
  879,  634,  361,  361, 1163,  361,  958, 1129, 1130, 1162,
  742,  959,  880,   91,  361,   82,  479,  361,  742,  366,
  367,  368,  576,  742,  861,   91,  301,  488,  301,  507,
    2,  755, 1521,  301,  877,  892, 1136,  507,  757,  892,
  881,  894,   11,  485,  861,  894,   18, 1254, 1255,  244,
  915,  406,  407,  408,  634,  244,  259,  245,  634,  369,
  634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
  634,  486,  244, 1163,  247,  717, 1357,  250,  208,  634,
  809,  634,  809,  634,  413,  414,  415,  416,  659,  661,
  663,  665,  492,  634,  634,  634, 1644, 1645, 1309, 1336,
 1310, 1040, 1311, 1040,  500,  208,  666,  667,  668,  669,
 1345, 1346, 1347,  495,  954,  740,  746, 1406,  647,  649,
  651,  502,  653,  655,  657,  822,  145,  822,  145,  306,
  503,  306,  772, 1336,  522,  208, 1406,  772,  772,  208,
  693,  693,  772,  772,  156,  313,  156,  313,  208,  208,
  208,  208,  163,  284,  163,  208,  361, 1333, 1334,  634,
 1353, 1354,  524, 1337,  849,  850,  529,  351,  772,  540,
  539,  559,  552,  562,  564,  569,  574,  612,  611,  604,
  203,  613,  530, 1418, 1436, 1418,  619,  208,  293,  203,
  203,  203,  203,  701, 1276,  706, 1418, 1337,  712,  727,
  208,  740,  746,  750,  758, 1503,  786,  760,  566, 1506,
  785,  787,  797, 1302,  812,  814,  816,  830,  828,  208,
 1436, 1007, 1516, 1517,  829, 1418,  863,  865, 1013,  882,
  869,  878,  891,  892,  918, 1418,  894,  895,  919,  920,
  924,  195,  931,  950,  925, 1514,  926, 1337,  941, 1337,
  956,  957,  965,   31,  967,  972,   32,  974,  980,  984,
 1337,   33,  981, 1618,  990,  986,   34,  988,  507, 1001,
 1316, 1002,  998,  997, 1003, 1016, 1018, 1027, 1031, 1628,
 1039,   36,   31, 1040, 1043,   32, 1056, 1060,  208, 1337,
   33, 1072,  208, 1057, 1061,   34, 1084, 1078,   38, 1337,
 1247, 1074, 1111,   39, 1079,  208,  208, 1098,  208, 1114,
   36,  781, 1118, 1119, 1125,  208,  208, 1128, 1564, 1191,
 1131, 1132, 1179,   41,   42, 1196, 1199,   38, 1233, 1228,
 1095, 1139,   39, 1264, 1145, 1235,   43,   44, 1268, 1153,
 1596, 1598,   45,   46, 1669, 1269,  196, 1272, 1274, 1256,
  530, 1263,   41,   42, 1273, 1280,  203,  203, 1614,  924,
 1281, 1282,  772,  772, 1283,   43,   44, 1605,  197,  772,
 1288,   45, 1290,  772, 1298,  318, 1306,  381, 1301, 1300,
  507, 1307, 1313, 1317, 1320, 1331,  208,  208, 1650, 1650,
 1614, 1614, 1324,  381, 1326, 1327, 1328, 1329, 1351, 1335,
 1342,  198, 1365,  250, 1366, 1663, 1663, 1356, 1359, 1376,
 1369, 1378,  361, 1391, 1381, 1393, 1384, 1614,  361,   73,
 1397,   73, 1398, 1399, 1390, 1412,  208,  203, 1612, 1414,
  198, 1415, 1449,  208, 1480, 1501, 1454, 1457, 1459,  199,
 1461,  208, 1502,   73, 1500, 1485,  208, 1504, 1495, 1507,
 1510,   73, 1518, 1522, 1511, 1512, 1523, 1529,  381, 1532,
 1534, 1549, 1555, 1551,  361, 1553,  361,  203,  293, 1545,
 1554, 1548,  361,   73,  203,  384, 1559, 1556,   73,   73,
  385,  386,  203, 1569,   73, 1573, 1574,  203,   73, 1576,
   73,   73,   73, 1581, 1582,   73, 1592, 1591, 1583, 1586,
   73,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397, 1603,   73, 1607, 1620, 1602, 1606,   73,  361,
   73, 1622, 1625,  361, 1629,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361, 1619, 1637,  361,
   73, 1630, 1632,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361, 1624,  361, 1623, 1292, 1642,  361,  361,
  361,  842,  361,  361, 1646,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361, 1653,  361,  361, 1658, 1668,    9,  361,  740,
  361, 1036,  922,   73,  361,  924,  924,  361,  528,  923,
  658,   45,   49,  924,  361, 1028,  924,  924,  924,  885,
  924,  924,  659,  924,  924,  924,  924,   46,  924,  924,
  924,  732,   38,  886,  211,  198,  924,  812,  202,   39,
  930,  924,  824,  814,  924,  924,  199,  848,  825,  924,
  924,  924,  815,  849,  924,  924,  334,  352,  338,  720,
  355,  241,  924,  131,  361,  720,  924,  924,  153,  693,
  924,  924,  140,  693,  249,  470,   57,  309,  166,  159,
  141,  310,  167, 1472,  160,  924, 1473,  924,  924,  924,
   28, 1223, 1253, 1234,  924,  924,  924,  924,  924,  924,
  924,  924,  924,  924,  924,  924,  924,  924,  924, 1032,
 1648,  979, 1134,  924, 1135, 1593,  924,  924, 1631, 1621,
 1580, 1608,  999, 1000, 1665,  922, 1494, 1493, 1458, 1667,
 1604,  924,  924, 1652, 1599, 1379,  924,  924,  924, 1597,
  924,  206, 1303, 1492,  975,  556,  610,  930,  853,  905,
  745,  855,  908,  924,  924,  924,  924,  924,  671,  675,
  673,  924,  817,  677,  425,  679,  390,  680, 1386,  955,
 1450,  924,  924, 1150, 1097,  796, 1115,  769,  699, 1073,
 1117,  962,  700, 1293, 1010,  873, 1198,  426,    0,  977,
  976,    0,    0,    0,    0,    0,    0,    0,  924,    0,
    0,    0,  924,  924,    0,    0,  924,  842,  842,  924,
  924,  924,    0,    0,    0,  842,    0,  924,  842,  842,
  842,    0,  842,  842,    0,  842,  842,  842,  842,    0,
  842,  842,  842,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  842,    0,    0,  842,  842,    0,    0,
    0,  842,  842,  842,    0,    0,  842,  842,    0,    0,
    0,    0,    0,    0,  842,    0,    0,    0,  842,  842,
    0,    0,  842,  842,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  842,    0,  842,
  842,  842,    0,    0,    0,    0,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
  842,    0,    0,    0,    0,  842,  355,    0,  842,  842,
    0,    0,  355,    0,    0,  514,    0,    0,    0,    0,
    0,    0,    0,  842,  842,    0,    0,    0,  842,  842,
  842,    0,  842,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  842,  842,  842,  842,  842,
    0,    0,    0,  842,    0,    0,    0,    0,  355,    0,
  355,    0,    0,  842,  842,    0,  355,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  842,    0,    0,    0,  842,  842,    0,    0,  842,    0,
    0,  842,  842,  842,    0,    0,    0,    0,    0,  842,
    0,    0,  390,  355,    0,    0,    0,  355,  390,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
    0,    0,    0,  355,    0,    0,    0,  355,  355,  355,
  355,  355,  355,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  355,  355,  355,    0,  355,  355,    0,  355,
  355,  355,  355,  355,  390,    0,  390,    0,    0,  355,
  355,    0,  390,    0,  355,  355,  355,  355,  355,  355,
  355,  355,  355,  355,  355,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  355,  355,   32,
    0,    0,  355,    0,  355,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  355,  390,
    0,    0,    0,  390,    0,  390,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  390,    0,    0,    0,  390,
    0,    0,    0,  390,  390,    0,  390,  390,  390,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  390,  390,
  390,    0,  390,  390,    0,  390,  390,  390,  390,  390,
    0,  514,    0,    0,    0,  390,  390,  514,    0,    0,
  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
  390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  390,  390,    0,   43,    0,  390,    0,
  390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  514,  390,  514,   31,    0,    0,   32,
    0,  514,    0,    0,   33,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,  514,    0,
    0,    0,  514,    0,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,    0,   41,   42,  514,    0,
    0,    0,  514,  514,    0,  514,  514,  514,    0,   43,
   44,    0,   52,    0,    0,   45,    0,  514,  514,  514,
    0,  514,  514,    0,  514,  514,  514,  514,  514,    0,
    0,    0,    0,    0,  514,  514,    0,    0,    0,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
    0,    0,    0,    0,    0,   32,   32,    0,    0,    0,
   32,    0,  514,  514,    0,    0,    0,  514,    0,  514,
    0,    0,   32,   32,  198,    0,    0,   32,    0,    0,
    0,    0,    0,  514,   32,    0,    0,   32,   32,   32,
    0,    0,   32,    0,   32,    0,    0,    0,    0,    0,
    0,   32,   32,   32,    0,    0,   32,    0,   32,    0,
   32,    0,  293,   32,   32,    0,    0,    0,   32,   32,
   32,    0,    0,   32,    0,   32,    0,   32,    0,   32,
   32,   32,   32,   32,    0,    0,    0,    0,    0,    0,
    0,   32,    0,   32,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,   32,   32,    0,    0,   32,   32,
    0,   32,   43,   43,   32,    0,    0,   43,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
   43,   32,    0,    0,   43,    0,    0,   32,   32,    0,
    0,   43,    0,    0,   43,   43,   43,    0,    0,   43,
    0,   43,    0,  529,    0,    0,    0,    0,   43,   43,
   43,    0,    0,   43,    0,   43,    0,   43,    0,    0,
   43,   43,    0,    0,    0,   43,   43,   43,    0,    0,
   43,    0,   43,    0,    0,    0,   43,   43,   43,   43,
   43,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   43,   74,    0,    0,   32,   32,    0,    0,    0,    0,
    0,   43,   43,    0,    0,   43,   43,   32,   43,   52,
    0,   43,    0,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,    0,    0,   43,    0,
   52,    0,    0,    0,   43,   43,    0,   52,    0,    0,
   52,    0,    0,    0,    0,   52,    0,    0,    0,    0,
    0,    0,    0,    0,   52,   52,   52,    0,    0,    0,
    0,   52,    0,    0,    0,    0,   52,   52,    0,    0,
    0,   52,   52,   52,    0,    0,    0,    0,   52,    0,
   52,    0,   52,    0,   52,   52,   52,    0,    0,    0,
    0,    0,    0,    0,   52,    0,   52,    0,    0,    0,
    0,   43,   43,    0,    0,   53,    0,   52,   52,    0,
    0,    0,   52,    0,   52,    0,    0,   52,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,    0,    0,    0,    0,    0,
   52,   52,   51,    0,    0,    0,   51,    0,    0,    0,
    0,    0,    0, 1462,    0,    0,    0, 1236,   51,    0,
    0,    0,    0,   51,    0,    0,    0, 1237, 1463, 1464,
   51,    0,    0,   51, 1465,    0,    0,    0,   51,    0,
    0, 1238, 1239, 1240,    0,    0, 1467,   51,   51,   51,
 1468,    0,    0,   54,   51,    0,    0,    0, 1241,   51,
   51,    0,    0, 1469,   51,   51,   51,   52,   52,    0,
 1470,   51,    0,    0,    0,   51,    0,   51,   51,   51,
    0,    0,    0,    0,    0,    0,    0,   51,    0,   51,
    0,    0,    0,    0,    0,    0,    0,    0, 1471,    0,
   51,   51,    0,    0, 1242,   51,    0,   51,   74,    0,
   51,    0,   74,    0,   74,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   74,   74,    0,   51,    0,   74,
    0,    0,    0,    0,   51,    0,   74,    0,    0,   74,
   74,   74,    0,    0,   74,    0,   74,    0,    0,    0,
    0,    0,    0,   74,   74,   74,    0,    0,   74,    0,
    0,   74,   74,    0,    0,   74,   74,    0,    0,    0,
   74,   74,   74,    0,    0,   74,   74,   74,    0,   74,
    0,   74,   74,   74,   74,   74,    0,    0,   74,    0,
    0,    0,    0,   74,    0,   74,    0,    0,    0,    0,
   51,   51,    0,    0,    0,    0,   74,    0,    0,    0,
   74,   74,    0,   74,    0,    0,   74,    0,    0,    0,
    0,    0,   53,    0,    0,  280,   73,    0,    0,    0,
    0,    0,    0,   74,    0,   74,   74,    0,   73,    0,
    0,    0,    0,   73,  309,    0,    0,    0,    0,    0,
   73,    0,    0,   73,    0,  331,    0,    0,   73,  334,
  336,  338,  340,  342,  344,  346,  348,   73,   73,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
   73,    0,    0,    0,   73,   73,   73,    0,    0,    0,
    0,   73,    0,    0,    0,   73,    0,   73,   73,   73,
    0,    0,    0,    0,    0,   74,   74,   73,    0,   73,
   54,    0,    0,    0,   73,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,   73,   73,   73,    0,    0,
   73,   73,    0,    0,    0,    0,    0,    0,   73,    0,
    0,   73,    0,    0,    0,    0,   73,   73,  596,    0,
    0,    0,   73,   53,    0,   73,   73,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,   73,    0,
    0,    0,   73,   73,   73,    0,   73,    0,    0,   73,
    0,    0,    0,   73,   73,   73,   73,   73,    0,    0,
    0,    0,    0,    0,    0,   73,    0,   73,    0,    0,
    0,    0,  596,    0,    0,    0,   73,    0,   73,    0,
    0,   73,   73,   73,    0,   73,    0,   73,   73,    0,
   73,   73,    0,   73,   73,   73,    0,    0,   73,    0,
    0,    0,    0,   73,    0,   73,    0,  331,    0,    0,
    0,   54,    0,    0,    0,    0,   73,    0,    0,    0,
    0,   73,    0,   73,    0,  596,    0,  331,    0,  596,
    0,  596,  596,  596,  596,  596,  596,  596,  596,  596,
  596,  596,    0,   73,    0,  361,    0,    0,    0,  320,
  596,  361,  596,    0,  596,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  596,  596,  596,    0,    0,    0,
    0,    0,  596,  596,  596,  596,    0,    0,   73,    0,
    0,  596,  596,    0,    0,    0,  596,  596,  596,  596,
  596,  596,  596,  596,  596,  596,  596,    0,    0,  361,
    0,    0,    0,    0,    0,  361,    0,    0,    0,  596,
    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  636,  638,  640,
  596,    0,  646,  646,  646,  646,  646,  646,  646,  646,
  646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
  646,  646,  361,    0,    0,    0,  361,    0,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
    0,    0,  361,    0,    0,    0,    0,  361,  361,  361,
  361,  361,  361,  361,  361,  361,    0,  361,  361,    0,
    0,  361,  361,  361,  361,  361,  361,    0,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,    0,  361,  361,    0,    0,
    0,    0,  361,  361,    0,    0,    0,  361,  361,    0,
  361,    0,    0,    0,    0,    0,    0,  361,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,  361,
    0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,    0,    0,    0,    0,    0,    0,    0,
  361,    0,  361,  361,  361,  361,  361,  361,  361,    0,
  361,  510,    0,    0,  361,  361,  361,  510,  361,  361,
    0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,    0,  361,
  361,    0,    0,    0,    0,  510,    0,    0,    0,    0,
  361,  510,    0,  361,    0,    0,    0,    0,    0,    0,
  361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  510,    0,
    0,    0,  510,    0,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,    0,    0,    0,    0,    0,
    0,    0,    0,  510,    0,  510,  510,  510,    0,  510,
  510,  510,    0,  510,    0,    0,    0,  510,  510,  510,
    0,  510,  510,    0,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,    0,  510,  510,    0,    0,   59,    0,    0,    0,
    0,    0,    0,  510,   60,    0,  510,   61,   31,    0,
    0,   32,   62,  510,   63,   64,   33,   65,    0,   66,
   67,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   68,    0,    0,   69,   36,    0,    0,    0,
   70,   71,   72,    0,    0,   73,   74,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,   75,   39,    0,
    0,   76,   77,    0,  554,    0,    0,    0,    0,    0,
  554,    0,    0,    0,    0,    0,   78,    0,   41,   42,
   79,    0,    0,    0,    0,   80,   81,   82,   83,   84,
   85,   43,   44,   86,   87,   88,   89,   45,   90,   91,
    0,    0,    0,    0,   92,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  554,    0,
    0,    0,   95,   96,  554,    0,    0,    0,  361,   97,
    0,   98,    0,    0,  361,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   99,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  105,  106,    0,    0,    0,    0,    0,    0,
    0,  554,    0,    0,    0,  554,    0,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  361,  107,
    0,    0,    0,  108,  109,    0,  554,  110,  554,    0,
  554,  111,  112,    0,    0,    0,    0,    0,  213,    0,
  554,  554,  554,    0,  554,  554,    0,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,    0,
    0,    0,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,    0,  554,  554,    0,    0,    0,
    0,    0,  361,  361,  361,  361,  361,  361,  361,    0,
  361,  578,    0,    0,  361,  800,  554,  578,  361,  361,
    0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,    0,  361,
  361,    0,    0,    0,    0,  578,    0,    0,    0,    0,
  361,  578,    0,  361,    0,    0,    0,    0,    0,    0,
  361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  585,    0,    0,    0,    0,    0,
  585,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  578,    0,
    0,    0,  578,    0,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,    0,    0,    0,
    0,    0,    0,  578,    0,  578,    0,  578,  585,    0,
    0,    0,    0,    0,  585,    0,    0,  578,  578,  578,
    0,  578,  578,    0,    0,  578,  578,  578,  578,    0,
    0,  578,  578,  578,  578,  578,    0,    0,    0,  578,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,  585,  578,  578,    0,  585,  586,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,  585,    0,    0,
    0,    0,    0,  578,    0,    0,  585,    0,  585,    0,
  585,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  585,  585,  585,    0,  585,  585,    0,    0,  585,  585,
  585,  585,    0,    0,  586,    0,    0,  585,  585,    0,
  586,    0,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  587,    0,  585,  585,    0,    0,  587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  585,  586,    0,    0,
    0,  586,    0,  586,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,    0,    0,    0,    0,    0,    0,
    0,    0,  586,    0,  586,    0,  586,  587,    0,    0,
    0,    0,    0,  587,    0,    0,  586,  586,  586,    0,
  586,  586,    0,    0,  586,  586,  586,  586,    0,    0,
    0,    0,    0,  586,  586,    0,    0,    0,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  588,
  587,  586,  586,    0,  587,  588,  587,  587,  587,  587,
  587,  587,  587,  587,  587,  587,  587,    0,    0,    0,
    0,    0,  586,    0,    0,  587,    0,  587,    0,  587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  587,
  587,  587,    0,  587,  587,    0,    0,  587,  587,  587,
  587,    0,    0,  588,    0,    0,  587,  587,    0,  588,
    0,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  587,  587,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  597,    0,  587,  587,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  587,  588,    0,    0,    0,
  588,    0,  588,  588,  588,  588,  588,  588,  588,  588,
  588,  588,  588,    0,    0,    0,    0,    0,    0,    0,
    0,  588,    0,  588,    0,  588,  597,    0,    0,    0,
    0,    0,    0,    0,    0,  588,  588,  588,    0,  588,
  588,    0,    0,  588,  588,  588,  588,    0,    0,    0,
    0,  598,  588,  588,    0,    0,    0,  588,  588,  588,
  588,  588,  588,  588,  588,  588,  588,  588,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  597,
  588,  588,    0,  597,    0,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  597,  597,    0,    0,    0,    0,
    0,  588,    0,    0,  597,  598,  597,    0,  597,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  597,  597,
  597,    0,    0,    0,    0,    0,  597,  597,  597,  597,
    0,    0,  599,    0,    0,  597,  597,    0,    0,    0,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
  597,    0,    0,    0,    0,    0,    0,    0,  598,    0,
    0,    0,  598,  597,  598,  598,  598,  598,  598,  598,
  598,  598,  598,  598,  598,    0,    0,    0,    0,    0,
    0,    0,    0,  598,  597,  598,  599,  598,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  598,  598,  598,
    0,    0,    0,    0,    0,  598,  598,  598,  598,    0,
    0,  603,    0,    0,  598,  598,    0,    0,    0,  598,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  599,
    0,    0,  598,  599,    0,  599,  599,  599,  599,  599,
  599,  599,  599,  599,  599,  599,    0,    0,    0,    0,
    0,    0,    0,  598,  599,  603,  599,    0,  599,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  599,  599,
  599,    0,    0,    0,    0,    0,  599,  599,  599,  599,
    0,    0,  604,    0,    0,  599,  599,    0,    0,    0,
  599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
  599,    0,    0,    0,    0,    0,    0,    0,  603,    0,
    0,    0,  603,  599,  603,  603,  603,  603,  603,  603,
  603,  603,  603,  603,  603,    0,    0,    0,    0,    0,
    0,    0,    0,  603,  599,  603,  604,  603,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  603,  603,  603,
    0,    0,    0,    0,    0,  603,  603,  603,  603,    0,
    0,  605,    0,    0,  603,  603,    0,    0,    0,    0,
    0,    0,  603,  603,  603,  603,  603,  603,  603,  603,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  604,
    0,    0,  603,  604,    0,  604,  604,  604,  604,  604,
  604,  604,  604,  604,  604,  604,    0,    0,    0,    0,
    0,    0,    0,  603,  604,  605,  604,    0,  604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  604,  604,
  604,    0,    0,    0,    0,    0,  604,  604,  604,  604,
    0,    0,  606,    0,    0,  604,  604,    0,    0,    0,
    0,    0,    0,  604,  604,  604,  604,  604,  604,  604,
  604,    0,    0,    0,    0,    0,    0,    0,  605,    0,
    0,    0,  605,  604,  605,  605,  605,  605,  605,  605,
  605,  605,  605,  605,  605,    0,    0,    0,    0,    0,
    0,    0,    0,  605,  604,  605,  606,  605,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  605,  605,  605,
    0,    0,    0,    0,    0,  605,  605,  605,  605,    0,
    0,  607,    0,    0,  605,  605,    0,    0,    0,    0,
    0,    0,  605,  605,  605,  605,  605,  605,  605,  605,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  606,
    0,    0,  605,  606,    0,  606,  606,  606,  606,  606,
  606,  606,  606,  606,  606,  606,    0,    0,    0,    0,
    0,    0,    0,  605,  606,  607,  606,    0,  606,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  606,  606,
  606,    0,    0,    0,    0,    0,  606,  606,  606,  606,
    0,    0,  612,    0,    0,  606,  606,    0,    0,    0,
    0,    0,    0,  606,  606,  606,  606,  606,  606,  606,
  606,    0,    0,    0,    0,    0,    0,    0,  607,    0,
    0,    0,  607,  606,  607,  607,  607,  607,  607,  607,
  607,  607,  607,  607,  607,    0,    0,    0,    0,    0,
    0,    0,    0,  607,  606,  607,  612,  607,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  607,  607,  607,
    0,    0,    0,    0,    0,  607,  607,  607,  607,    0,
    0,  613,    0,    0,  607,  607,    0,    0,    0,    0,
    0,    0,  607,  607,  607,  607,  607,  607,  607,  607,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  612,
    0,    0,  607,  612,    0,  612,  612,  612,  612,  612,
  612,  612,  612,  612,  612,  612,    0,    0,    0,    0,
    0,    0,    0,  607,  612,  613,  612,    0,  612,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  612,  612,
  612,    0,    0,    0,    0,    0,    0,    0,  612,  612,
    0,    0,  615,    0,    0,  612,  612,    0,    0,    0,
    0,    0,    0,    0,    0,  612,  612,  612,  612,  612,
  612,    0,    0,    0,    0,    0,    0,    0,  613,    0,
    0,    0,  613,  612,  613,  613,  613,  613,  613,  613,
  613,  613,  613,  613,  613,    0,    0,    0,    0,    0,
    0,    0,    0,  613,  612,  613,  615,  613,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  613,  613,  613,
    0,    0,    0,    0,    0,    0,    0,  613,  613,    0,
    0,  614,    0,    0,  613,  613,    0,    0,    0,    0,
    0,    0,    0,    0,  613,  613,  613,  613,  613,  613,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  615,
    0,    0,  613,  615,    0,  615,  615,  615,  615,  615,
  615,  615,  615,  615,  615,  615,    0,    0,    0,    0,
    0,    0,    0,  613,  615,  614,  615,    0,  615,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  615,  615,
  615,    0,    0,    0,    0,    0,    0,    0,  615,  615,
    0,    0,  616,    0,    0,  615,  615,    0,    0,    0,
    0,    0,    0,    0,    0,  615,  615,  615,  615,  615,
  615,    0,    0,    0,    0,    0,    0,    0,  614,    0,
    0,    0,  614,  615,  614,  614,  614,  614,  614,  614,
  614,  614,  614,  614,  614,    0,    0,    0,    0,    0,
    0,    0,    0,  614,  615,  614,  616,  614,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  614,  614,  614,
    0,    0,    0,    0,    0,    0,    0,  614,  614,    0,
    0,  617,    0,    0,  614,  614,    0,    0,    0,    0,
    0,    0,    0,    0,  614,  614,  614,  614,  614,  614,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  616,
    0,    0,  614,  616,    0,  616,  616,  616,  616,  616,
  616,  616,  616,  616,  616,  616,    0,    0,    0,    0,
    0,    0,    0,  614,  616,  617,  616,    0,  616,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  616,  616,
  616,    0,    0,    0,    0,    0,    0,    0,  616,  616,
    0,    0,  618,    0,    0,  616,  616,    0,    0,    0,
    0,    0,    0,    0,    0,  616,  616,  616,  616,  616,
  616,    0,    0,    0,    0,    0,    0,    0,  617,    0,
    0,    0,  617,  616,  617,  617,  617,  617,  617,  617,
  617,  617,  617,  617,  617,    0,    0,    0,    0,    0,
    0,    0,    0,  617,  616,  617,  618,  617,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  617,  617,  617,
    0,    0,    0,    0,    0,    0,    0,  617,  617,    0,
    0,  620,    0,    0,  617,  617,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  617,  617,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  618,
    0,    0,  617,  618,    0,  618,  618,  618,  618,  618,
  618,  618,  618,  618,  618,  618,    0,    0,    0,    0,
    0,    0,    0,  617,  618,  620,  618,    0,  618,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  618,  618,
  618,    0,    0,    0,    0,    0,    0,    0,  618,  618,
    0,    0,  621,    0,    0,  618,  618,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  618,
  618,    0,    0,    0,    0,    0,    0,    0,  620,    0,
    0,    0,  620,  618,  620,  620,  620,  620,  620,  620,
  620,  620,  620,  620,  620,    0,  575,    0,    0,    0,
    0,    0,    0,  620,  618,  620,  621,  620,   31,    0,
    0,   32,    0,    0,    0,    0,   33,  620,  620,  620,
    0,   34,    0,    0,    0,    0,    0,    0,  620,    0,
    0,  623,    0,    0,  620,  620,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  620,  620,
    0,    0,    0,   38,    0,    0,    0,    0,   39,  621,
    0,    0,  620,  621,    0,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,    0,    0,   41,   42,
    0,    0,    0,  620,  621,  623,  621,    0,  621,    0,
    0,   43,   44,    0,    0,    0,    0,   45,  621,  621,
  621,  318,    0,    0,    0,    0,    0,    0,    0,  621,
    0,    0,  624,    0,    0,  621,  621,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  621,
  621,    0,    0,    0,    0,    0,    0,    0,  623,    0,
    0,    0,  623,  621,  623,  623,  623,  623,  623,  623,
  623,  623,  623,  623,  623,    0,  198,    0,    0,    0,
    0,    0,    0,  623,  621,  623,  624,  623,   31,    0,
    0,   32,    0,    0,    0,    0,   33,  623,  623,  623,
    0,   34,    0,    0,    0,    0,    0,    0,  623,    0,
   35,  626,    0,    0,  293,  623,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,  623,  623,
    0,    0,    0,   38,    0,    0,    0,    0,   39,  624,
    0,    0,  623,  624,   40,  624,  624,  624,  624,  624,
  624,  624,  624,  624,  624,  624,    0,    0,   41,   42,
    0,    0,    0,  623,  624,  626,  624,    0,  624,    0,
    0,   43,   44,    0,    0,    0,    0,   45,  624,  624,
  624,    0,    0,    0,    0,    0,    0,    0,    0,  624,
    0,    0,  627,    0,    0,    0,  624,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  624,
  624,    0,    0,    0,    0,    0,    0,    0,  626,    0,
    0,    0,  626,  624,  626,  626,  626,  626,  626,  626,
  626,  626,  626,  626,  626,    0,  641,    0,    0,    0,
    0,    0,    0,  626,  624,  626,  627,  626,   31,    0,
    0,   32,    0,    0,    0,    0,   33,  626,  626,  626,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  629,    0,    0,   46,  626,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  626,  626,
    0,    0,    0,   38,    0,    0,    0,    0,   39,  627,
    0,    0,  626,  627,    0,  627,  627,  627,  627,  627,
  627,  627,  627,  627,  627,  627,    0,    0,   41,   42,
    0,    0,    0,  626,  627,  629,  627,    0,  627,    0,
    0,   43,   44,    0,    0,    0,    0,   45,  627,  627,
  627,  318,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  630,    0,    0,    0,  627,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  627,
  627,    0,    0,    0,    0,    0,    0,    0,  629,    0,
    0,    0,  629,  627,  629,  629,  629,  629,  629,  629,
  629,  629,  629,  629,  629,    0,  198,    0,    0,    0,
    0,    0,    0,  629,  627,  629,  630,  629,   31,    0,
    0,   32,    0,    0,    0,    0,   33,  629,  629,  629,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1012,    0,    0,  293,  629,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  629,
    0,    0,    0,   38,    0,    0,    0,    0,   39,  630,
    0,    0,  629,  630,    0,  630,  630,  630,  630,  630,
  630,  630,  630,  630,  630,  630,    0,    0,   41,   42,
    0,    0,    0,  629,  630, 1012,  630,    0,  630,    0,
    0,   43,   44,    0,    0,    0,    0,   45,  630,  630,
  630,  318,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  630,    0,    0,    0,
    0,    0,    0,  197,    0,    0,    0,    0,    0,    0,
  630,    0,    0,    0,    0,    0,    0,    0, 1012,    0,
    0,    0, 1012,  630, 1012, 1012, 1012, 1012, 1012, 1012,
 1012, 1012, 1012, 1012,    0,    0,  198,    0,    0,    0,
    0,    0,    0, 1012,  630, 1012,    0, 1012,    0,    0,
    0,    0, 1017,    0,    0,    0,    0, 1012, 1012, 1012,
 1017,    0,    0, 1017, 1017,    0,    0, 1017, 1017,    0,
 1017, 1017, 1017, 1017,  319, 1017, 1017, 1017,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1017,    0,
    0, 1017, 1017,    0,    0,    0, 1017, 1017, 1017,    0,
    0, 1017, 1017,    0,    0,    0,    0,    0,    0, 1017,
    0,    0,    0, 1017, 1017,    0,    0, 1017, 1017,    0,
    0,    0,    0, 1012,    0,    0,    0,    0,    0,    0,
    0,    0, 1017,    0, 1017, 1017, 1017,    0,    0,    0,
    0, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
 1017, 1017, 1017, 1017, 1017, 1017,    0,    0,    0,    0,
 1017,    0,    0, 1017, 1017,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1017, 1017,
    0,    0,    0, 1017,    0, 1017,    0, 1017,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1017, 1017, 1017, 1017, 1017,    0,    0,    0, 1017,    0,
    0,    0,    0,    0,    0,  853,    0,    0, 1017, 1017,
    0,    0,    0,  853,    0,    0,  853,  853,    0,    0,
  853,  853,    0,  853,  853,  853,  853,    0,  853,  853,
  853,    0,    0,    0,    0, 1017,    0,    0,    0, 1017,
 1017,  853,    0, 1017,  853,  853,    0, 1017, 1017,  853,
  853,  853,    0,    0,  853,  853,    0,    0,    0,    0,
    0,    0,  853,    0,    0,    0,  853,  853,    0,    0,
  853,  853,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  853,    0,  853,  853,  853,
    0,    0,    0,    0,  853,  853,  853,  853,  853,  853,
  853,  853,  853,  853,  853,  853,  853,  853,  853,    0,
    0,    0,    0,  853,    0,    0,  853,  853,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  853,  853,    0,    0,    0,  853,    0,  853,    0,
  853,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  853,  853,  853,  853,  853,    0,    0,
    0,  853,    0,    0,    0,    0,    0,    0,   59,    0,
    0,  853,  853,    0,    0,    0,   60,    0,    0,   61,
   31,    0,    0,   32,   62,    0,   63,   64,   33,   65,
    0,   66,   67,   34,    0,    0,    0,    0,  853,    0,
    0,    0,  853,  853,   68,    0,  853,   69,   36,    0,
  853,  853,   70,   71,   72,    0,    0,   73,   74,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,   75,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
   41,   42,   79,    0,    0,    0,    0,   80,   81,   82,
   83,   84,   85,   43,   44,   86,   87,   88,   89,   45,
   90,   91,    0,    0,    0,    0,   92,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   95,   96,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   99,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  429,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,   61,   31,    0,    0,   32,   62,    0,   63,
   64,   33,   65,    0,   66,   67,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  109,   68,    0,  110,
   69,   36,    0,  111,  112,   70,   71,   72,    0,    0,
   73,   74,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,   75,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   78,    0,   41,   42,   79,    0,    0,    0,    0,
   80,   81,   82,   83,   84,   85,   43,   44,   86,   87,
   88,   89,   45,   90,   91,    0,    0,    0,    0,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  751,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,   61,   31,    0,    0,   32,
   62,    0,   63,   64,   33,   65,    0,   66,   67,   34,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  109,
   68,    0,  110,   69,   36,    0,  111,  112,   70,   71,
   72,    0,    0,   73,   74,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,   75,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   78,    0,   41,   42,   79,    0,
    0,    0,    0,   80,   81,   82,   83,   84,   85,   43,
   44,   86,   87,   88,   89,   45,   90,   91,  361,    0,
    0,    0,   92,  800,    0,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,   73,
   95,   96,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,   99,  100,  101,  102,  103,    0,    0,   73,
  104,    0,  361,    0,    0,    0,    0,    0,    0,    0,
  105,  106,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,  800,    0,    0,    0,   73,   73,    0,    0,
    0,    0,   73,    0,    0,    0,   73,  107,   73,   73,
   73,  108,  109,    0,    0,  110,    0,    0,   73,  111,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,    0,   73,    0,   73,    0,
    0,    0,    0,    0,  361,    0,    0,  361,    0,  361,
  361,  361,  361,    0,  361,    0,    0,    0,   73,  800,
  361,    0,  361,  361,  321,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,    0,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,  361,  361,    0,    0,  906,    0,    0,
    0,    0,    0,    0,  361,   60,    0,  361,    0,   31,
    0,    0,   32,  274,  361,    0,    0,   33,   65,    0,
   66,   73,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   31,   68,    0,   32,    0,   36,    0,    0,
   33,    0,    0,  275,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,   39,
   36,    0,   76,   77,    0,    0,  510,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  511,   38,    0,   41,
   42,   79,   39,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,   41,   42,    0,    0,    0,    0,   93,   94,
    0,    0,    0,    0,    0,   43,   44,    0,    0,    0,
    0,   45,    0,  297,   96,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,  291,    0,    0,    0,    0,
  762,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,  292,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  504,   68,    0,  110,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,  293,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,  763,    0,    0,    0,    0,    0,    0,
    0,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  297,  298,    0,    0,
    0,  693,  693,   97,    0,   98,  693,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  693,  693,  693,  100,
  101,  102,  103,  693,    0,    0,  104,    0,    0,    0,
  693,  693,  693,  296,    0,  693,  105,  106,    0,  693,
    0,   60,  693,    0,    0,   31,    0,  693,   32,  274,
    0,    0,  693,   33,   65,    0,   66,    0,   34,  693,
    0,    0,    0,  107,    0,    0,    0,  108,  299,   68,
    0,  110,  693,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,  693,    0,    0,
   38,    0,    0,  693,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
  298,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  304,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  299,   68,    0,  110,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  297,  298,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  380,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  299,   68,    0,  110,    0,   36,
    0,  111,  112,    0,    0,  275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  297,  298,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  596,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,    0,    0,
    0,    0,  107,    0,    0,    0,  108,  299,   68,    0,
  110,    0,   36,    0,  111,  112,    0,    0,  275,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,    0,    0,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,   94,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  297,   96,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  607,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  504,   68,    0,  110,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  297,   96,    0,    0,    0,    0,    0,   97,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  860,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,  107,    0,
    0,    0,  108,  504,   68,    0,  110,    0,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  297,  298,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  960,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  299,   68,    0,  110,
    0,   36,    0,  111,  112,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  297,  298,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  329,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,  643,  107,    0,    0,    0,  108,  299,
   68,    0,  110,    0,   36,   31,  111,  112,   32,    0,
  275,    0,    0,   33,    0,    0,    0,    0,   34,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,   36,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
   38,    0,    0,    0,   81,   39,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,  330,   41,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,   44,
  277,  278,    0,    0,   45,    0,    0,   97,  318,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  273,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,  198,    0,    0,  932,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,   31,  111,
  112,   32,    0,  275,    0,    0,   33,    0,    0,    0,
    0,   34,    0,    0,   38,    0,    0,    0,    0,   39,
    0,  293,   76,   77,    0,    0,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,   38,    0,    0,    0,   81,   39,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   43,   44,  277,  278,    0,    0,   45,    0,    0,
   97,  318,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  308,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,  198,    0,    0, 1108,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,   31,  111,  112,   32,    0,  275,    0,    0,   33,
    0,    0,    0,    0,   34,    0,    0,   38,    0,    0,
    0,    0,   39,    0,  933,   76,   77,    0,    0,   36,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,   38,    0,    0,    0,
   81,   39,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   44,  277,  278,    0,    0,
   45,    0,    0,   97,  581,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  333,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,  198,
    0,    0, 1295,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,   31,  111,  112,   32,    0,  275,
    0,    0,   33,    0,    0,    0,    0,   34,    0,    0,
   38,    0,    0,    0,    0,   39,    0,  293,   76,   77,
    0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,   38,
    0,    0,    0,   81,   39,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,   44,  277,
  278,    0,    0,   45,    0,    0,   97,  318,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  335,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,  198,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,  211,  111,  112,
  211,    0,  275,    0,    0,  211,    0,    0,    0,    0,
  211,    0,    0,   38,    0,    0,    0,    0,   39,    0,
  293,   76,   77,    0,    0,  211,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,  211,    0,    0,    0,   81,  211,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  211,  211,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  211,  211,  277,  278,    0,    0,  211,    0,    0,   97,
  211,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  337,
    0, 1039,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,  211,    0,    0,    0,  107,
    0,    0,    0,  108,  279,   68,    0,    0,    0,   36,
   31,  111,  112,   32,    0,  275,    0,    0,   33,    0,
    0,    0,    0,   34,    0,    0,   38,    0,    0,    0,
    0,   39,    0,  211,   76,   77,    0,    0,   36,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,   38,    0,    0,    0,   81,
   39,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,   44,  277,  278,    0,    0,   45,
    0,    0,   97,  318,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  339,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,  198,    0,
    0,    0,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,   31,  111,  112,   32,    0,  275,    0,
    0,   33,    0,    0,    0,    0,   34,    0,    0,   38,
    0,    0,    0,    0,   39,    0,  293,   76,   77,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,   38,    0,
    0,    0,   81,   39,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,   44,  277,  278,
    0,    0,   45,    0,    0,   97,  581,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  341,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,  198,    0,    0,    0,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,   31,  111,  112,   32,
    0,  275,    0,    0,   33,    0,    0,    0,    0,   34,
    0,    0,   38,    0,    0,    0,    0,   39,    0,  293,
   76,   77,    0,    0,   36,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,   38,    0,    0,    0,   81,   39,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
   44,  277,  278,    0,    0,   45,    0,    0,   97,  196,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  343,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,  198,    0,    0,    0,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,   31,
  111,  112,   32,    0,  275,    0,    0,   33,    0,    0,
    0,    0,   34,    0,    0,   38,    0,    0,    0,    0,
   39,    0,  293,   76,   77,    0,    0,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,   38,    0,    0,    0,   81,   39,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,   44,  277,  278,    0,    0,   45,    0,
    0,   97, 1519,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  345,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,  198,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,   31,  111,  112,   32,    0,  275,    0,    0,
   33,    0,    0,    0,    0,   34,    0,    0,   38,    0,
    0,    0,    0,   39,    0,  293,   76,   77,    0,    0,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,   38,    0,    0,
    0,   81,   39,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   43,   44,  277,  278,    0,
    0,   45,    0,    0,   97, 1610,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  347,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
  198,    0,    0,    0,  107,    0,    0,    0,  108,  279,
   68,    0,    0,    0,   36,  212,  111,  112,  212,    0,
  275,    0,    0,  212,    0,    0,    0,    0,  212,    0,
    0,   38,    0,    0,    0,    0,   39,    0,  293,   76,
   77,    0,    0,  212,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
  212,    0,    0,    0,   81,  212,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  212,  212,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  212,  212,
  277,  278,    0,    0,  212,    0,    0,   97,  212,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  329,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,  212,    0,    0,    0,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,  211,  111,
  112,  211,    0,  275,    0,    0,  211,    0,    0,    0,
    0,  211,    0,    0,   38,    0,    0,    0,    0,   39,
    0,  212,   76,   77,    0,    0,  211,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,  211,    0,    0,    0,   81,  211,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  211,  211,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  211,  211,  277,  278,    0,    0,  211,    0,    0,
   97,  211,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  635,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,  211,    0,    0,    0,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,  211,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  277,  278,    0,    0,
    0,    0,    0,   97,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  637,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  278,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  639,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  277,  278,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  645,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  279,   68,    0,    0,    0,   36,
    0,  111,  112,    0,    0,  275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  277,  278,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  648,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,    0,    0,
    0,    0,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,    0,  111,  112,    0,    0,  275,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,    0,    0,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  278,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  650,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  278,    0,    0,    0,    0,    0,   97,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  652,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,  278,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  654,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,    0,  111,  112,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,  278,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  656,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  279,
   68,    0,    0,    0,   36,    0,  111,  112,    0,    0,
  275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  277,  278,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  658,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,    0,    0,    0,    0,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,    0,  111,
  112,    0,    0,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,   39,
    0,    0,   76,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  278,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  660,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  277,  278,    0,    0,
    0,    0,    0,   97,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  662,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  278,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  664,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  277,  278,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  670,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  279,   68,    0,    0,    0,   36,
    0,  111,  112,    0,    0,  275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  277,  278,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  672,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,    0,    0,
    0,    0,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,    0,  111,  112,    0,    0,  275,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,    0,    0,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  278,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  674,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  278,    0,    0,    0,    0,    0,   97,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  676,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,  278,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  678,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,    0,  111,  112,  218,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,  411,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,  219,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,  278,    0,
    0,    0,    0,    0,   97,  411,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,  220,  221,
  222,  223,    0,  224,  225,  226,  227,  105,  106,  228,
  229,  230,  231,    0,    0,  232,  233,  234,  235,  236,
  237,  238,  239,    0,  240,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  279,
    0,  241,  355,    0,    0,    0,  111,  112,  355,    0,
  411,  411,  411,  411,  411,  411,    0,  411,    0,    0,
    0,    0,    0,    0,    0,  411,  411,    0,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  127,  411,  411,    0,    0,
  127,    0,  361,  355,    0,    0,    0,  411,    0,    0,
  411,    0,  127,  127,    0,    0,    0,  127,    0,    0,
    0,    0,    0,    0,  127,    0,    0,  127,  127,  127,
    0,    0,  127,    0,  127,    0,    0,    0,    0,    0,
    0,  127,  127,  127,    0,    0,  127,    0,  127,    0,
  127,    0,    0,  127,  127,    0,  361,    0,  127,  127,
  127,    0,    0,  127,    0,  127,    0,    0,    0,  127,
  127,  127,  127,  127,    0,    0,    0,    0,    0,    0,
    0,  127,    0,  127,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  127,  127,    0,    0,  127,  127,
    0,  127,    0,    0,  127,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  127,    0,    0,    0,    0,  129,    0,  127,    0,
    0,  361,  361,  361,  361,  361,  361,    0,  361,    0,
    0,    0,  361,  800,    0,    0,  361,  361,    0,    0,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,    0,  361,  361,    0,
    0,    0,   60,    0,  127,  127,   31,    0,  361,   32,
  274,  361,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   68,    0,    0,    0,   36,    0,    0,    0,    0,    0,
  275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,  510,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  511,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  297,   96,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  512,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,    0,   60,    0,
  105,  106,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   68,  107,    0,    0,
   36,  108,  504,    0,    0,  110,  275,    0,    0,  111,
  112,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,  553,    0,    0,    0,    0,
    0,   93,   94,    0,  694,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  694,  694,  297,  298,    0,  694,
    0,    0,    0,   97,    0,   98,    0,    0,    0,  694,
  694,  694,    0,    0,    0,    0,  694,    0,    0,  100,
  101,  102,  103,  694,  694,  694,  104,    0,  694,    0,
  694,    0,  694,    0,   60,  694,  105,  106,   31,    0,
  694,   32,  274,    0,    0,  694,   33,   65,    0,   66,
    0,   34,  694,    0,    0,    0,    0,    0,  694,    0,
    0,    0,   68,  107,    0,  694,   36,  108,  299,    0,
    0,  110,  275,    0,    0,  111,  112,  694,    0,    0,
  694,    0,    0,   38,    0,    0,  694,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  694,  694,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,  763,
    0,    0,    0,    0,    0,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  693,  693,  297,  298,    0,  693,    0,    0,    0,   97,
    0,   98,    0,    0,    0,  693,  693,  693,    0,    0,
    0,    0,  693,    0,    0,  100,  101,  102,  103,  693,
  693,  693,  104,    0,  693,    0,  693,    0,  693,    0,
   60,  693,  105,  106,   31,    0,  693,   32,  274,    0,
    0,  693,   33,   65,    0,   66,    0,   34,  693,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   68,  107,
    0,  693,   36,  108,  299,    0,    0,  110,  275,    0,
    0,  111,  112,  693,    0,    0,  693,    0,    0,   38,
    0,    0,  693,    0,   39,    0,    0,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,   94,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1462,  297,  298,
    0, 1236,    0,    0,    0,   97,    0,   98,    0,    0,
    0, 1237, 1463, 1464,    0,    0,    0,    0, 1465,    0,
    0,  100,  101,  102,  103, 1466, 1239, 1240,  104,    0,
 1467,    0,   20,    0, 1468,    0,   60,    0,  105,  106,
   31,    0, 1241,   32,  274,    0,    0, 1469,   33,   65,
    0,   66,    0,   34, 1470,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   68,  107,    0,    0,   36,  108,
  299,    0,    0,  110,  275,    0,    0,  111,  112,   21,
    0,    0, 1471,    0,    0,   38,    0,    0, 1242,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  297,   96,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,    0,   60,    0,  105,  106,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   68,  107,    0,    0,   36,  108,  504,    0,    0,  110,
  275,    0,    0,  111,  112,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  297,   96,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,    0,  660,    0,
  105,  106,  660,    0,    0,  660,  660,    0,    0,    0,
  660,  660,    0,  660,    0,  660,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  660,  107,    0,    0,
  660,  108, 1033,    0,    0,  110,  660,    0,    0,  111,
  112,    0,    0,    0,    0,    0,    0,  660,    0,    0,
    0,    0,  660,    0,    0,  660,  660,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  660,  660,  660,    0,    0,    0,    0,    0,
  660,    0,  660,    0,  660,  660,  660,  660,  660,    0,
    0,  660,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  660,  660,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  660,  660,    0,    0,
    0,    0,    0,  660,    0,  660,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  660,
  660,  660,  660,    0,    0,    0,  660,    0,    0,    0,
    0,    0,    0,    0,  103,    0,  660,  660,  103,    0,
    0,  103,  103,    0,    0,    0,  103,  103,    0,  103,
    0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,  660,    0,    0,  103,  660,  660,    0,
    0,  660,  103,    0,    0,  660,  660,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,  103,    0,
    0,  103,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  103,  103,
  103,    0,    0,    0,    0,    0,  103,    0,  103,    0,
  103,  103,  103,  103,  103,    0,    0,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  103,  103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,  103,    0,    0,    0,    0,    0,  103,
    0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  103,  103,  103,  103,    0,
    0,    0,  103,    0,    0,    0,    0,    0,    0,    0,
  171,    0,  103,  103,  171,    0,    0,  171,  171,    0,
    0,    0,  171,  171,    0,  171,    0,  171,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  171,  103,
    0,    0,  171,  103,  103,    0,    0,  103,  171,    0,
    0,  103,  103,    0,    0,    0,    0,    0,    0,  171,
    0,    0,    0,    0,  171,    0,    0,  171,  171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  171,  171,  171,    0,    0,    0,
    0,    0,  171,    0,  171,    0,  171,  171,  171,  171,
  171,    0,    0,  171,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  171,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  171,  171,
    0,    0,    0,    0,    0,  171,    0,  171,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  171,  171,  171,  171,    0,    0,    0,  171,    0,
    0,    0,    0,    0,    0,    0,   60,    0,  171,  171,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   68,  171,    0,    0,   36,  171,
  171,    0,    0,  171,  275,    0,    0,  171,  171,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,   51,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,   51,   45,
    0,    0,    0,   51,    0,    0,    0,    0,    0,    0,
   51,    0,    0,   51,    0,    0,    0,    0,   51,    0,
    0,    0,    0,    0,  277,  278,    0,   51,   51,   51,
    0,   97,    0,   98,   51,    0,    0,    0,    0,   51,
   51,    0,    0,    0,   51,   51,   51,  100,  101,  102,
  103,   51,    0,    0,  104,   51,    0,   51,   51,   51,
    0,    0,    0,    0,  105,  106,    0,   51,    0,   51,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   51,    0,    0,    0,   51,    0,   51,   74,    0,
   51,  107,    0,    0,    0,  108,  279,    0,    0,    0,
   74,   74,    0,  111,  112,   74,    0,   51,    0,    0,
    0,    0,   74,   51,   51,   74,   74,   74,    0,    0,
   74,    0,   74,    0,    0,    0,    0,    0,    0,   74,
   74,   74,    0,    0,   74,    0,   74,    0,   74,    0,
    0,   74,   74,    0,    0,    0,   74,   74,   74,    0,
    0,   74,    0,   74,    0,    0,    0,   74,   74,   74,
   74,   74,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   51,   74,   74,    0,    0,   74,   74,    0,   74,
   73,    0,   74,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,   73,    0,    0,    0,   73,    0,   74,
    0,    0,    0,    0,   73,    0,    0,   73,   73,   73,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,   73,   73,   73,    0,    0,   73,    0,   73,    0,
   73,    0,    0,   73,   73,    0,    0,    0,   73,   73,
   73,    0,    0,   73,    0,   73,    0,    0,    0,   73,
   73,   73,   73,   73,    0,    0,    0,    0,    0,    0,
    0,   73,    0,   73,    0,    0,    0,    0,    0,    0,
    0,   74,   74,    0,   73,   73,    0,    0,   73,   73,
    0,   73,   73,    0,   73,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,   73,    0,    0,    0,   73,
    0,   73,    0,    0,    0,    0,   73,  106,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
    0,    0,    0,   73,   73,   73,    0,    0,   73,    0,
   73,    0,   73,    0,    0,   73,   73,    0,    0,    0,
   73,   73,   73,    0,    0,   73,    0,   73,    0,    0,
    0,   73,   73,   73,   73,   73,    0,    0,    0,    0,
    0,    0,    0,   73,    0,   73,    0,    0,    0,    0,
    0,    0,    0,    0,   73,    0,   73,   73,    0,    0,
   73,   73,    0,   73,   73,    0,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,   73,    0,    0,
    0,   73,    0,   73,    0,    0,    0,    0,   73,  107,
    0,   73,   73,   73,    0,    0,   73,    0,   73,    0,
    0,    0,    0,    0,    0,   73,   73,   73,    0,    0,
   73,    0,   73,    0,   73,    0,    0,   73,   73,    0,
    0,    0,   73,   73,   73,    0,    0,   73,    0,   73,
    0,    0,    0,   73,   73,   73,   73,   73,    0,    0,
    0,    0,    0,    0,    0,   73,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,   73,   73,
    0,    0,   73,   73,    0,   73,   73,    0,   73,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   73,   73,
    0,    0,    0,   73,    0,   73,    0,    0,    0,    0,
   73,    0,    0,   73,   73,   73,    0,    0,   73,    0,
   73,    0,    0,    0,    0,    0,    0,   73,   73,   73,
    0,    0,   73,    0,    0,    0,   73,    0,    0,   73,
   73,    0,    0,    0,   73,   73,   73,    0,    0,   73,
    0,   73,    0,    0,    0,   73,   73,   73,   73,   73,
    0,    0,    0,    0,    0,    0,    0,   73,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
   73,    0,    0,    0,   73,   73,    0,   73,   73,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,   73,    0,    0,    0,   73,    0,   73,    0,    0,
    0,    0,   73,  248,    0,   73,   73,   73,    0,    0,
   73,    0,   73,    0,    0,    0,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,    0,    0,   73,    0,
    0,   73,   73,    0,    0,    0,   73,   73,   73,    0,
    0,   73,    0,   73,    0,    0,    0,   73,   73,   73,
   73,   73,    0,    0,   63,    0,    0,    0,    0,   73,
    0,   73,    0,    0,    0,    0,   63,    0,    0,    0,
   73,   63,   73,    0,    0,    0,   73,   73,   63,   73,
    0,   63,   73,    0,    0,    0,   63,    0,    0,    0,
    0,    0,    0,    0,    0,   63,   63,   63,    0,   73,
    0,    0,   63,    0,    0,  249,    0,   63,   63,    0,
    0,    0,   63,   63,   63,    0,    0,    0,    0,   63,
    0,    0,    0,   63,    0,   63,   63,   63,    0,    0,
    0,    0,    0,    0,    0,   63,    0,   63,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,   63,   63,
    0,    0,    0,   63,   73,   63,    0,    0,   63,   73,
    0,    0,    0,    0,    0,    0,   73,    0,    0,   73,
    0,    0,   73,    0,   73,   63,    0,    0,    0,    0,
   65,    0,   63,   73,   73,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,   73,    0,    0,    0,
   73,   73,   73,    0,    0,    0,    0,   73,    0,    0,
    0,   73,    0,   73,   73,   73,    0,    0,   74,    0,
    0,    0,    0,   73,    0,   73,    0,    0,    0,    0,
   74,    0,    0,    0,    0,   74,   73,    0,    0,    0,
    0,   73,   74,   73,    0,   74,   73,    0,   63,    0,
   74,    0,    0,    0,    0,    0,    0,    0,    0,   74,
   74,   74,    0,   73,    0,    0,    0,    0,    0,   53,
    0,   74,   74,    0,    0,    0,   74,   74,   74,    0,
    0,    0,    0,   74,    0,    0,    0,   74,    0,   74,
   74,   74,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   74,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,    0,   73,    0,   74,    0,   74,
   73,    0,   74,    0,    0,    0,    0,   73,    0,    0,
   73,    0,    0,    0,    0,   73,   73,    0,    0,   74,
    0,    0,    0,    0,   73,   73,   73,    0,    0,   73,
    0,    0,    0,    0,    0,    0,   73,   73,    0,    0,
    0,   73,   73,   73,    0,    0,    0,    0,   73,    0,
    0,    0,   73,   73,   73,   73,   73,    0,    0,    0,
    0,   73,    0,    0,   73,    0,   73,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
    0,    0,   73,   73,   73,    0,    0,   73,   73,   73,
    0,   73,   74,    0,   73,    0,    0,    0,   73,   73,
   73,   73,   73,    0,   73,    0,    0,    0,    0,    0,
   73,   43,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,   73,    0,    0,   73,   73,   73,    0,
   73,    0,   73,    0,    0,   43,   73,    0,   73,   73,
   73,    0,    0,   43,    0,    0,    0,    0,   73,   73,
   73,    0,   73,   73,    0,    0,  229,    0,    0,    0,
    0,   73,    0,    0,    0,   43,   73,    0,   73,    0,
   43,   43,    0,   73,    0,    0,   43,   73,    0,    0,
   43,   73,   43,   43,   43,    0,    0,   43,   73,    0,
   73,   73,   43, 1202,  231,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,   43,    0,    0,   73,   73,
   43,    0,   43,    0,   73,    0,    0, 1203,   73,    0,
   73,   73,   73,   73,    0, 1204,    0,    0,    0,    0,
   73, 1202,   43,    0,    0,    0,    0,    0,   43,   43,
    0,    0,    0,   73,    0,    0,    0, 1205,   73,    0,
   73,    0, 1206, 1207,    0, 1203,    0,    0, 1208,    0,
    0,   73, 1209, 1204, 1210, 1211, 1212,    0,    0,    0,
   73,    0,   73,   73, 1213,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1205,    0, 1214,    0,    0,
 1206, 1207, 1215,    0, 1216,    0, 1208,    0,    0,    0,
 1209,    0, 1210, 1211, 1212,   43,    0,    0,    0,    0,
    0,    0, 1213,   31, 1217,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0, 1214,   34,    0,    0,    0,
 1215,    0, 1216,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   73,    0,    0,    0,    0,   31,    0,
    0,   32, 1217, 1403,    0,    0,   33,    0,   38,    0,
    0,   34,    0,   39,  211,    0,    0,  211,    0,    0,
  578,    0,  211,    0,    0,    0,   36,  211,    0,    0,
  579,    0,    0,   41,   42,    0, 1256, 1218,    0,    0,
    0,  580,  211,   38,    0,    0,   43,   44,   39,    0,
    0, 1404,   45,    0,    0,    0,  581,    0,    0,  211,
    0,    0,    0,    0,  211,    0,    0,    0,   41,   42,
    0,    0,    0,    0, 1405, 1218,    0,    0,  582,    0,
    0,   43,   44,    0,  211,  211,    0,   45,    0,    0,
    0,  318,    0,    0,    0,    0,    0,  211,  211,    0,
    0,    0,    0,  211,    0,    0,    0,  211,    0,    0,
    0,  198,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1039,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  198,    0,    0,  583,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  293,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  211,
  };
  protected static readonly short [] yyCheck = {            17,
    6,   62,  286,  109,   93,   94,  138,    6,   17,  317,
  292,  253,  211,   20,   20,   17,  261,  193,  520,   55,
  561,  593,  573,   84,  354,   86,  682,    0,  585, 1139,
    0, 1061,   64,   18,   51,  735,    0,  208,    0,  256,
  269,  256,  256,    0,   82,    0,  256,   60, 1078, 1238,
  256,  938,   65,    0,    0,   20,   69,   70, 1012,  269,
   78,   74,   75,  256,   82,    0,   79,   80,  256,   76,
   76,  267,    0,   86,  256,  256,  782,   90,  784,   92,
   98,  256,  256,   55,  256,  269,  359,   93,   94,  256,
  256,  593, 1137,  256,  800, 1125,  369,  267,  256,  256,
  309,  256,  115,  116,  810,  269,  256,  256,  778,  256,
 1077,  263, 1136,  277,  404,  360,  391,  289,  256, 1137,
  138, 1166, 1239, 1240,  346,  370,  363,  216,  217,  256,
  363,  256, 1410,  693,  694,  256, 1422,  270,  363,  450,
  336,  393, 1259,  257,  162,  815,  256,  356, 1166,  392,
  387,  381,  404,  162,  387, 1200,  467,  256,  194,  402,
  162,  294,  387,  720,  336, 1451,  336,  404, 1446, 1286,
  387,  404,  387,  279,  391,  381,  262,  391,  468,  454,
  682,  753, 1200,  272,  310,  337, 1153, 1141,  256,  404,
 1235,  256,  281,  299,  387,   17,  363,  256,  391,  325,
  367, 1225,  369,  387,  388,  372,  373,  403,  375,  376,
  216,  217, 1099,  302,  363,  251,  391, 1235,  367,  383,
  369,  409,  404,  372,  373,  242,  375,  376,  409,  471,
  316,  460,  454,  403,  391,  402,  393,  364,  568,  389,
  387,  458,  260,  261,  458,  403,  403,  456,  247,  267,
  460,  753,  313,  402,  409,  287,  288,  463,  464,  465,
  466,  309,  351,  276,  402,  458,  272,  818,  286,  301,
  283,  289,  290,  291,  306,  281,  460, 1466,  403,  949,
  454,  402,  454,  458,  257,  303,  292,  257,  454,  256,
  454,  454,  256,  403,  312,  257,  302,  315, 1004,  317,
  257,  468,  257,  402,  256, 1335,  456,  302,  356,  315,
  257,  257,  401,  402, 1344, 1345, 1346, 1347,  356,  468,
  406,  407,  257,  355,  256,  390,   17,  291,  454,  257,
  603,  390, 1032,  606,  402,   17,  309,  402,  356,   17,
  162,  359,  360,  402,  308,  351, 1463, 1053,  354,  302,
  393,  369,  370, 1470,  256,  328,  943,  257,  328,  256,
  256,  404,  448,  452,  453, 1410,  384,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
   17,  328,  328,  356,  555,  556,  256,  256,  383,  354,
  454,  721, 1410,  328, 1100,  401,  402,  503,  504,  363,
  328, 1446,   17,   17,  964,  423,  966,  256,  456,  969,
   17,  388,   17,   17, 1120,  256,  389,  449,  388,  389,
  468,   17,  309,  387,  391,  387,  393,  391, 1446,  393,
  383,  363,   17,  522, 1140,  367,  403,  369, 1144,  403,
  372,  373,  389,  375,  376,   17,  452,  453, 1558,  256,
  402,  256,  404,  256, 1143,  346,  492,  409, 1418,  454,
  391, 1048,  457,  263, 1024,  472, 1026, 1027, 1019,  356,
  559,  162,  489,  490,  256,  346, 1436,  454,  495,  310,
  162, 1511, 1512,  456,  162,  546,  547,  619,  594,  256,
  392,  498,  510,  511,  600,  392,  392,   20,  828,  531,
 1057,  454,  389,  488,  457,  750,  256,  256,  526,  527,
 1051,  520,  256,  403, 1055, 1411,  522,  256,  520,  409,
  552,  391,  363,  392,  256,  162,  367,  458,  369, 1080,
  772,  372,  373,  546,  375,  376,  468,  337,  310, 1228,
   63,  483,  555,  392,  562,  256,  564,  162,  162,  310,
   73,  859, 1582,  559,  325,  162,  528,  162,  162,  319,
  592,  389,  568,  454,  335, 1461,  162, 1127,   91,  456,
   93,   94,   95,  404, 1230,  346,  310,  162, 1150,  585,
  324,  599,  389,  454,  593,  603,  389,  392,  606,  256,
  162,  593, 1622,  611,  612,  613,  363, 1157,  704, 1629,
  367,  619,  369,  568, 1564,  372,  373, 1637,  375,  376,
  392,  366, 1642,  363, 1116,  383,  558,  367,  388,  369,
  585,  392,  372,  373, 1294,  375,  376,  468,  399, 1299,
 1300, 1378,  404,  461, 1304, 1305, 1596,  388, 1598,  366,
  389,  366,  388,  404, 1185,  256,  380,  310, 1150,  383,
  389,  389,  363,  325, 1614,  389,  367,  389,  369,  393,
 1330,  372,  373,  335,  375,  376,  421,  387,  388,  325,
  688,  684, 1232,  682,  346,  693,  694,  256,  696,  335,
  682,  787,  409,  454,  388,  993,  454, 1220,  387,  388,
  346,  310, 1252,  325,  310,  450,  363,  402,  468,  310,
  367,  468,  369,  335,  793,  372,  373,  391,  375,  376,
  256,  324,  467,  383,  720,  388,  387,  468,  468,  389,
  454,  402,  468,  450,  742,  450, 1259,  399, 1230, 1476,
 1477, 1478,  750,  404,  795,  824,  981,  260,  261,  402,
  467,  404,  467,  399,  753,  324,  404,  452,  468,  383,
  454,  753,  363,  308,  388,  720,  367,  468,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  468,
  454,  452, 1056,  392,  297, 1410,  392,  388,  309,  390,
 1064,  392,  454,  402,  454,  404,  402,  793,  404,  807,
  278,  402,  403,  404,  812,  468,  814,  973,  454,  322,
  288,  468,  325,  383,  822,  308,  778,   28,  363,  420,
  261, 1446,  388,  391,  302,  303,  304,  363,  824,  453,
  454,  367,  828,  369,  309,  356,  372,  373,  404,  375,
  376,  319,  387,  467,  285,   56,  359,  360,  392,  857,
  392,  859,  293,  815,  392,  324,  369,  370, 1093,  392,
  309,  887,  273,  273, 1524, 1525,  988,  468,  389,  409,
  363, 1531, 1325,  828,  315, 1535,  273, 1410,  387,  320,
  321,  356,  391,  453,  454,  326,  454,  365,  383,  330,
  404,  332,  333,  334,  387,  325,  904,  467,  895,  467,
  383,  342,  468,  314,  314,  335, 1359,  356,  256,  917,
  450,  990,  387, 1446,  355, 1189,  346,  314,  403,  360,
  942,  362,  270,  393,  468, 1351,  468, 1006,  388,  389,
  468, 1163,  402,  344,  344,  468,  261, 1033,  263,  452,
  453,  382,  380,  456, 1353, 1354,  294,  344, 1137,  458,
  363, 1360, 1410,  391,  989,  393,  964, 1383,  966,  454,
  285,  969,  475,  925,  405,  450, 1375, 1410,  293,  399,
 1410,  454,  485,  981,  387, 1010,  310, 1166,  986,  434,
  988,  978,  452,  387,  992,  993,  994,  949, 1446,  392,
  315,  325,  447, 1402,  990,  320,  321, 1076,  450,  402,
 1022,  326,  998, 1446,  319,  330, 1446,  332,  333,  334,
 1006, 1200,  525,  454,  455,  467, 1024,  342, 1026, 1027,
  458, 1029, 1044,  461,  450,  380,  325, 1616, 1617,  380,
  355,  388,  454,  412,  389,  360,  335,  362,  393,  461,
  395,  467,  393,  998,  557,  402, 1235,  346, 1056,  404,
  410,  411,  409, 1075, 1643,  454, 1064,  382,  387, 1110,
  387, 1057,  461,  388,  389, 1061,  387,  427,  428, 1077,
  389,  584,  391,  380,  393,  404,  390,  404,  387,  310,
 1076,  598, 1078,  404,  419, 1093,  393,  391,  380,  393,
  603,  383,  609,  606,  325,  404, 1147,  389,  420,  392,
  392,  393, 1057, 1154,  459, 1337, 1061,  273,  454,  402,
  402, 1137,  278,  377,  378,  390, 1390, 1116,  392, 1127,
  389,  467,  288, 1078, 1116, 1133,  395,  402,  402, 1125,
  455, 1139,  416,  417,  418,  404,  302,  303,  304,  458,
 1166,  413,  461,  380, 1195, 1153,  383,  256,  314, 1157,
 1158, 1150,  389,  319,  458,  392,  393,  461, 1150,  392,
 1256,  388,  454,  433,  388,  392,  360,  388,  392,  402,
 1125,  392,  387, 1224, 1200, 1137,  370,  690,  344,  692,
  404, 1189,  404,  404, 1280,  390,  391,  380,  701,  391,
  389,  393,  394,  395,  396, 1274,  398,  402,  390,  365,
  390,  310,  390,  391, 1166,  393,  390,  377,  378, 1235,
  402,  390,  402,  390,  402,  403,  459,  454,  402,  421,
  422,  423, 1301,  402, 1232,  402,  402,  387,  404,  742,
  381, 1230, 1504,  409,  705,  388,  387,  750, 1230,  392,
  711,  388,    0,  393, 1252,  392,    4, 1236, 1237,  391,
  763,  424,  425,  426,  363,  391,  458,  393,  367,  461,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  454,  391, 1235,  393, 1301,  388,  389, 1274,  388,
  402,  390,  404,  392,  429,  430,  431,  432,  409,  410,
  411,  412,  450,  402,  403,  404,  384,  385, 1287, 1325,
 1289,  390, 1291,  392,  328, 1301,  413,  414,  415,  416,
 1327, 1328, 1329,  454,  827,  387,  388, 1396,  403,  404,
  405,  256,  406,  407,  408,  402,  402,  404,  404,  402,
  454,  404, 1294, 1359,  403, 1331, 1415, 1299, 1300, 1335,
  384,  385, 1304, 1305,  402,  402,  404,  404, 1344, 1345,
 1346, 1347,  402,  391,  404, 1351,    0, 1322, 1323,  468,
 1333, 1334,  302, 1325,  612,  613,  391,  450, 1330,  256,
  393,  403,  454,  310,  310,  366,  454,  403,  409,  454,
 1335,  403, 1390, 1409, 1410, 1411,  402, 1383,  454, 1344,
 1345, 1346, 1347,  379, 1490,  395, 1422, 1359,  404,  389,
 1396,  403,  256,  402,  392, 1484,  411,  392,  391, 1488,
  392,  454,  392, 1509,  310,  310,  391,  256,  402, 1415,
 1446,  934, 1501, 1502,  392, 1451,  310,  310,  941,  388,
  409,  404,  392,  402,  310, 1461,  403,  402,  404,  310,
  392,  256,  387,  392,  402, 1496,  402, 1409,  402, 1411,
  366,  392,  310,  268,  310,  402,  271,  454,  390,  393,
 1422,  276,  391, 1585,  403,  409,  281,  409,  981,  256,
  256,  392,  403,  454,  287,  392,  366,  374,  390, 1601,
  387,  296,  268,  454,  402,  271,  409,  402, 1484, 1451,
  276,  392, 1488,  403,  403,  281,  370,  403,  313, 1461,
 1551,  392,  256,  318,  392, 1501, 1502,  392, 1504,  388,
  296,  392,  392,  256,  403, 1511, 1512,  370, 1544,  387,
  402,  390,  388,  338,  339,  371,  388,  313,  371,  402,
 1043,  409,  318,  302,  409,  387,  351,  352,  388,  409,
 1566, 1567,  357,  454, 1666,  379,  361,  388,  403,  454,
 1558,  454,  338,  339,  391,  454, 1511, 1512, 1584,    0,
  391,  391, 1524, 1525,  409,  351,  352, 1575,  383, 1531,
  256,  357,  256, 1535,  393,  361,  453, 1585,  450,  391,
 1093,  404,  387,  393,  391,  291, 1582, 1583, 1639, 1640,
 1616, 1617,  392, 1601,  392,  392,  392,  392,  308,  403,
  403,  416,  392,  389,  256, 1656, 1657,  454,  402,  256,
  363,  388,  256,  404,  403,  361,  454, 1643,  262,  261,
  387,  263,  387,  387,  409,  404, 1622, 1582, 1583,  391,
  416,  402,  392, 1629,  454,  403,  388,  388,  388,  454,
  387, 1637,  403,  285,  388,  454, 1642,  403,  454,  391,
  391,  293,  391,  454,  403,  403,  391,  387, 1666,  256,
  391,  389,  387,  392,  308,  392,  310, 1622,  454,  409,
  392,  404,  316,  315, 1629,  409,  402,  409,  320,  321,
  414,  415, 1637,  402,  326,  392,  256, 1642,  330,  402,
  332,  333,  334,  392,  403,  337,  404,  454,  403,  402,
  342,  435,  436,  437,  438,  439,  440,  441,  442,  443,
  444,  445,  404,  355,  404,  404,  454,  454,  360,  363,
  362,  403,  388,  367,  403,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,  454,  403,  383,
  382,  390,  387,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  337,  398,  263, 1269,  403,  402,  403,
  404,    0,  406,  407,  388,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
  444,  445,  409,  447,  448,  409,  388,    0,  452,  387,
  454,    0,  404,  455,  458,  256,  257,  461,  404,  404,
  392,  390,  388,  264,  468,    0,  267,  268,  269,  404,
  271,  272,  392,  274,  275,  276,  277,  390,  279,  280,
  281,  454,  387,  404,  454,  392,  287,  404,  392,  387,
  392,  292,  404,  392,  295,  296,  392,  388,  404,  300,
  301,  302,  392,  388,  305,  306,  387,  404,  388,  387,
    0,  454,  313,  454,  393,  404,  317,  318,  389,  337,
  321,  322,  404,  263,   54,  194,   12,  404,  404,  404,
  404,  404,  404, 1453,  404,  336, 1453,  338,  339,  340,
    5, 1166, 1235, 1200,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,  978,
 1638,  895, 1093,  364, 1093, 1561,  367,  368, 1606, 1588,
 1551, 1578,  925,  925, 1657,  771, 1470, 1469, 1446, 1659,
 1571,  382,  383, 1640, 1567, 1359,  387,  388,  389, 1566,
  391,   20, 1280, 1468,  887,  315,  370,  786,  618,  742,
  511,  620,  750,  404,  405,  406,  407,  408,  417,  419,
  418,  412,  568,  420,  162,  421,    0,  422, 1371,  828,
 1415,  422,  423, 1116, 1045,  548, 1067,  527,  461, 1010,
 1069,  858,  461, 1271,  937,  699, 1158,  162,   -1,  893,
  892,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,   -1,   -1,  457,  256,  257,  460,
  461,  462,   -1,   -1,   -1,  264,   -1,  468,  267,  268,
  269,   -1,  271,  272,   -1,  274,  275,  276,  277,   -1,
  279,  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,  296,   -1,   -1,
   -1,  300,  301,  302,   -1,   -1,  305,  306,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,   -1,   -1,   -1,   -1,  364,  256,   -1,  367,  368,
   -1,   -1,  262,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,  387,  388,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  404,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,  308,   -1,
  310,   -1,   -1,  422,  423,   -1,  316,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,   -1,   -1,  457,   -1,
   -1,  460,  461,  462,   -1,   -1,   -1,   -1,   -1,  468,
   -1,   -1,  256,  363,   -1,   -1,   -1,  367,  262,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,  383,   -1,   -1,   -1,  387,  388,  389,
  390,  391,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,  406,  407,   -1,  409,
  410,  411,  412,  413,  308,   -1,  310,   -1,   -1,  419,
  420,   -1,  316,   -1,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  447,  448,    0,
   -1,   -1,  452,   -1,  454,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  363,
   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,  383,
   -1,   -1,   -1,  387,  388,   -1,  390,  391,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,  406,  407,   -1,  409,  410,  411,  412,  413,
   -1,  256,   -1,   -1,   -1,  419,  420,  262,   -1,   -1,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  447,  448,   -1,    0,   -1,  452,   -1,
  454,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  308,  468,  310,  268,   -1,   -1,  271,
   -1,  316,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,  363,   -1,
   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,  338,  339,  383,   -1,
   -1,   -1,  387,  388,   -1,  390,  391,  392,   -1,  351,
  352,   -1,    0,   -1,   -1,  357,   -1,  402,  403,  404,
   -1,  406,  407,   -1,  409,  410,  411,  412,  413,   -1,
   -1,   -1,   -1,   -1,  419,  420,   -1,   -1,   -1,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  447,  448,   -1,   -1,   -1,  452,   -1,  454,
   -1,   -1,  273,  274,  416,   -1,   -1,  278,   -1,   -1,
   -1,   -1,   -1,  468,  285,   -1,   -1,  288,  289,  290,
   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,
  311,   -1,  454,  314,  315,   -1,   -1,   -1,  319,  320,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,  344,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,  359,  360,
   -1,  362,  256,  257,  365,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  274,  382,   -1,   -1,  278,   -1,   -1,  388,  389,   -1,
   -1,  285,   -1,   -1,  288,  289,  290,   -1,   -1,  293,
   -1,  295,   -1,  404,   -1,   -1,   -1,   -1,  302,  303,
  304,   -1,   -1,  307,   -1,  309,   -1,  311,   -1,   -1,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
  324,   -1,  326,   -1,   -1,   -1,  330,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,    0,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,  359,  360,  468,  362,  257,
   -1,  365,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,  382,   -1,
  278,   -1,   -1,   -1,  388,  389,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
  328,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,
   -1,  455,  456,   -1,   -1,    0,   -1,  355,  356,   -1,
   -1,   -1,  360,   -1,  362,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   -1,   -1,   -1,  278,  273,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  288,  289,  290,
  285,   -1,   -1,  288,  295,   -1,   -1,   -1,  293,   -1,
   -1,  302,  303,  304,   -1,   -1,  307,  302,  303,  304,
  311,   -1,   -1,    0,  309,   -1,   -1,   -1,  319,  314,
  315,   -1,   -1,  324,  319,  320,  321,  455,  456,   -1,
  331,  326,   -1,   -1,   -1,  330,   -1,  332,  333,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,   -1,
  355,  356,   -1,   -1,  365,  360,   -1,  362,  257,   -1,
  365,   -1,  261,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  382,   -1,  278,
   -1,   -1,   -1,   -1,  389,   -1,  285,   -1,   -1,  288,
  289,  290,   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,
  319,  320,  321,   -1,   -1,  324,  325,  326,   -1,  328,
   -1,  330,  331,  332,  333,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
  455,  456,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
  359,  360,   -1,  362,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   66,  261,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,  384,  385,   -1,  273,   -1,
   -1,   -1,   -1,  278,   85,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   96,   -1,   -1,  293,  100,
  101,  102,  103,  104,  105,  106,  107,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,   -1,
   -1,  326,   -1,   -1,   -1,  330,   -1,  332,  333,  334,
   -1,   -1,   -1,   -1,   -1,  454,  455,  342,   -1,  344,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
  355,   -1,   -1,   -1,   -1,  360,  273,  362,   -1,   -1,
  365,  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  382,  256,   -1,
   -1,   -1,  261,  388,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,
   -1,   -1,  319,  320,  321,   -1,  285,   -1,   -1,  326,
   -1,   -1,   -1,  330,  293,  332,  333,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,
   -1,   -1,  310,   -1,   -1,   -1,  315,   -1,  355,   -1,
   -1,  320,  321,  360,   -1,  362,   -1,  326,  365,   -1,
  455,  330,   -1,  332,  333,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  342,   -1,  382,   -1,  278,   -1,   -1,
   -1,  388,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
   -1,  360,   -1,  362,   -1,  363,   -1,  298,   -1,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,  382,   -1,  256,   -1,   -1,   -1,  388,
  388,  262,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,
   -1,   -1,  410,  411,  412,  413,   -1,   -1,  455,   -1,
   -1,  419,  420,   -1,   -1,   -1,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,   -1,   -1,  310,
   -1,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,  447,
   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,  400,
  468,   -1,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  363,   -1,   -1,   -1,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
   -1,   -1,  383,   -1,   -1,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,   -1,  398,  256,   -1,
   -1,  402,  403,  404,  262,  406,  407,   -1,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
  441,  442,  443,  444,  445,   -1,  447,  448,   -1,   -1,
   -1,   -1,  310,  454,   -1,   -1,   -1,  458,  316,   -1,
  461,   -1,   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  388,   -1,  390,  391,  392,  393,  394,  395,  396,   -1,
  398,  256,   -1,   -1,  402,  403,  404,  262,  406,  407,
   -1,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  442,  443,  444,  445,   -1,  447,
  448,   -1,   -1,   -1,   -1,  310,   -1,   -1,   -1,   -1,
  458,  316,   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,
  468,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,   -1,  390,  391,  392,   -1,  394,
  395,  396,   -1,  398,   -1,   -1,   -1,  402,  403,  404,
   -1,  406,  407,   -1,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  445,   -1,  447,  448,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,  458,  264,   -1,  461,  267,  268,   -1,
   -1,  271,  272,  468,  274,  275,  276,  277,   -1,  279,
  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,  295,  296,   -1,   -1,   -1,
  300,  301,  302,   -1,   -1,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,   -1,
   -1,  321,  322,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,
   -1,   -1,  382,  383,  316,   -1,   -1,   -1,  256,  389,
   -1,  391,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  404,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  363,   -1,   -1,   -1,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  316,  449,
   -1,   -1,   -1,  453,  454,   -1,  388,  457,  390,   -1,
  392,  461,  462,   -1,   -1,   -1,   -1,   -1,  468,   -1,
  402,  403,  404,   -1,  406,  407,   -1,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,   -1,
   -1,   -1,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,
  442,  443,  444,  445,   -1,  447,  448,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,   -1,
  398,  256,   -1,   -1,  402,  403,  468,  262,  406,  407,
   -1,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  442,  443,  444,  445,   -1,  447,
  448,   -1,   -1,   -1,   -1,  310,   -1,   -1,   -1,   -1,
  458,  316,   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,
  468,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,   -1,  390,   -1,  392,  310,   -1,
   -1,   -1,   -1,   -1,  316,   -1,   -1,  402,  403,  404,
   -1,  406,  407,   -1,   -1,  410,  411,  412,  413,   -1,
   -1,  416,  417,  418,  419,  420,   -1,   -1,   -1,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  363,  447,  448,   -1,  367,  262,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,   -1,   -1,
   -1,   -1,   -1,  468,   -1,   -1,  388,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,  403,  404,   -1,  406,  407,   -1,   -1,  410,  411,
  412,  413,   -1,   -1,  310,   -1,   -1,  419,  420,   -1,
  316,   -1,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  447,  448,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  468,  363,   -1,   -1,
   -1,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  388,   -1,  390,   -1,  392,  310,   -1,   -1,
   -1,   -1,   -1,  316,   -1,   -1,  402,  403,  404,   -1,
  406,  407,   -1,   -1,  410,  411,  412,  413,   -1,   -1,
   -1,   -1,   -1,  419,  420,   -1,   -1,   -1,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  363,  447,  448,   -1,  367,  262,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,
   -1,   -1,  468,   -1,   -1,  388,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,
  403,  404,   -1,  406,  407,   -1,   -1,  410,  411,  412,
  413,   -1,   -1,  310,   -1,   -1,  419,  420,   -1,  316,
   -1,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,  447,  448,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  468,  363,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  388,   -1,  390,   -1,  392,  310,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  402,  403,  404,   -1,  406,
  407,   -1,   -1,  410,  411,  412,  413,   -1,   -1,   -1,
   -1,  256,  419,  420,   -1,   -1,   -1,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
  447,  448,   -1,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,  468,   -1,   -1,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,  427,  428,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,  427,  428,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,  410,  411,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,  427,  428,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  429,  430,  431,  432,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  429,  430,  431,  432,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,  434,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,  268,   -1,
   -1,  271,   -1,   -1,   -1,   -1,  276,  402,  403,  404,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,
   -1,  256,   -1,   -1,  419,  420,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,  434,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  338,  339,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,  402,  403,
  404,  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
   -1,   -1,  256,   -1,   -1,  419,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,  416,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,  268,   -1,
   -1,  271,   -1,   -1,   -1,   -1,  276,  402,  403,  404,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,
  290,  256,   -1,   -1,  454,  420,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  307,  433,  434,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,  363,
   -1,   -1,  447,  367,  324,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  338,  339,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,  402,  403,
  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
   -1,   -1,  256,   -1,   -1,   -1,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,  268,   -1,
   -1,  271,   -1,   -1,   -1,   -1,  276,  402,  403,  404,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  454,  420,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,  434,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  338,  339,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,  402,  403,
  404,  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  420,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,   -1,  416,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,  310,  392,  268,   -1,
   -1,  271,   -1,   -1,   -1,   -1,  276,  402,  403,  404,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  454,  420,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  434,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,  363,
   -1,   -1,  447,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  338,  339,
   -1,   -1,   -1,  468,  388,  310,  390,   -1,  392,   -1,
   -1,  351,  352,   -1,   -1,   -1,   -1,  357,  402,  403,
  404,  361,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  420,   -1,   -1,   -1,
   -1,   -1,   -1,  383,   -1,   -1,   -1,   -1,   -1,   -1,
  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,  447,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,   -1,   -1,  416,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  468,  390,   -1,  392,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,  402,  403,  404,
  264,   -1,   -1,  267,  268,   -1,   -1,  271,  272,   -1,
  274,  275,  276,  277,  454,  279,  280,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,   -1,
   -1,  295,  296,   -1,   -1,   -1,  300,  301,  302,   -1,
   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,  317,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,  468,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  336,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,  358,  359,   -1,   -1,   -1,   -1,
  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,  387,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  404,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,  267,  268,   -1,   -1,
  271,  272,   -1,  274,  275,  276,  277,   -1,  279,  280,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,  457,  295,  296,   -1,  461,  462,  300,
  301,  302,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,   -1,
   -1,   -1,   -1,  364,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,  387,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  404,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,  267,
  268,   -1,   -1,  271,  272,   -1,  274,  275,  276,  277,
   -1,  279,  280,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,  457,  295,  296,   -1,
  461,  462,  300,  301,  302,   -1,   -1,  305,  306,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  358,  359,   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  404,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,  267,  268,   -1,   -1,  271,  272,   -1,  274,
  275,  276,  277,   -1,  279,  280,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,
  295,  296,   -1,  461,  462,  300,  301,  302,   -1,   -1,
  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,  359,   -1,   -1,   -1,   -1,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,  267,  268,   -1,   -1,  271,
  272,   -1,  274,  275,  276,  277,   -1,  279,  280,  281,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,  457,  295,  296,   -1,  461,  462,  300,  301,
  302,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  336,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  358,  359,  262,   -1,
   -1,   -1,  364,  267,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  263,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,  404,  405,  406,  407,  408,   -1,   -1,  293,
  412,   -1,  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  336,   -1,   -1,   -1,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,  449,  332,  333,
  334,  453,  454,   -1,   -1,  457,   -1,   -1,  342,  461,
  462,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,   -1,   -1,   -1,   -1,  360,   -1,  362,   -1,
   -1,   -1,   -1,   -1,  388,   -1,   -1,  391,   -1,  393,
  394,  395,  396,   -1,  398,   -1,   -1,   -1,  382,  403,
  404,   -1,  406,  407,  388,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,   -1,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
  444,  445,   -1,  447,  448,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,  458,  264,   -1,  461,   -1,  268,
   -1,   -1,  271,  272,  468,   -1,   -1,  276,  277,   -1,
  279,  455,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  268,  292,   -1,  271,   -1,  296,   -1,   -1,
  276,   -1,   -1,  302,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
  296,   -1,  321,  322,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,  313,   -1,  338,
  339,  340,  318,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,   -1,
   -1,  357,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,  391,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,  410,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,  454,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,  359,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,  273,  274,  389,   -1,  391,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  405,
  406,  407,  408,  295,   -1,   -1,  412,   -1,   -1,   -1,
  302,  303,  304,  256,   -1,  307,  422,  423,   -1,  311,
   -1,  264,  314,   -1,   -1,  268,   -1,  319,  271,  272,
   -1,   -1,  324,  276,  277,   -1,  279,   -1,  281,  331,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,  457,  344,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,   -1,   -1,
  313,   -1,   -1,  365,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,  457,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,  457,   -1,  296,
   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
  457,   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,  457,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,  457,   -1,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,
   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,  256,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,  457,   -1,  296,  268,  461,  462,  271,   -1,
  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
  313,   -1,   -1,   -1,  346,  318,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  338,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,
  382,  383,   -1,   -1,  357,   -1,   -1,  389,  361,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,  416,   -1,   -1,  256,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,  268,  461,
  462,  271,   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,  454,  321,  322,   -1,   -1,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,  313,   -1,   -1,   -1,  346,  318,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  351,  352,  382,  383,   -1,   -1,  357,   -1,   -1,
  389,  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,  416,   -1,   -1,  256,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,  268,  461,  462,  271,   -1,  302,   -1,   -1,  276,
   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,  454,  321,  322,   -1,   -1,  296,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,  313,   -1,   -1,   -1,
  346,  318,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  351,  352,  382,  383,   -1,   -1,
  357,   -1,   -1,  389,  361,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,  416,
   -1,   -1,  256,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,  268,  461,  462,  271,   -1,  302,
   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,  454,  321,  322,
   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,  313,
   -1,   -1,   -1,  346,  318,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,  382,
  383,   -1,   -1,  357,   -1,   -1,  389,  361,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,  416,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,  268,  461,  462,
  271,   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,
  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
  454,  321,  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,  313,   -1,   -1,   -1,  346,  318,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  351,  352,  382,  383,   -1,   -1,  357,   -1,   -1,  389,
  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  392,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,  416,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,
  268,  461,  462,  271,   -1,  302,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,  454,  321,  322,   -1,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,  313,   -1,   -1,   -1,  346,
  318,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,  352,  382,  383,   -1,   -1,  357,
   -1,   -1,  389,  361,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,  416,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,  268,  461,  462,  271,   -1,  302,   -1,
   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,  454,  321,  322,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,  313,   -1,
   -1,   -1,  346,  318,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,  382,  383,
   -1,   -1,  357,   -1,   -1,  389,  361,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,  416,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,  268,  461,  462,  271,
   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,  454,
  321,  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,  313,   -1,   -1,   -1,  346,  318,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,
  352,  382,  383,   -1,   -1,  357,   -1,   -1,  389,  361,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,  416,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,  268,
  461,  462,  271,   -1,  302,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,  454,  321,  322,   -1,   -1,  296,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,  313,   -1,   -1,   -1,  346,  318,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  351,  352,  382,  383,   -1,   -1,  357,   -1,
   -1,  389,  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,  416,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,  268,  461,  462,  271,   -1,  302,   -1,   -1,
  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,  454,  321,  322,   -1,   -1,
  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,  313,   -1,   -1,
   -1,  346,  318,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  351,  352,  382,  383,   -1,
   -1,  357,   -1,   -1,  389,  361,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
  416,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,   -1,   -1,  296,  268,  461,  462,  271,   -1,
  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,  454,  321,
  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
  313,   -1,   -1,   -1,  346,  318,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,
  382,  383,   -1,   -1,  357,   -1,   -1,  389,  361,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,  416,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,  268,  461,
  462,  271,   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,  454,  321,  322,   -1,   -1,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,  313,   -1,   -1,   -1,  346,  318,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  351,  352,  382,  383,   -1,   -1,  357,   -1,   -1,
  389,  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,  416,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,  454,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,
   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,
  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,
   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,   -1,  461,  462,  292,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,  348,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,  316,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,  405,  406,
  407,  408,   -1,  410,  411,  412,  413,  422,  423,  416,
  417,  418,  419,   -1,   -1,  422,  423,  424,  425,  426,
  427,  428,  429,   -1,  431,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
   -1,  448,  383,   -1,   -1,   -1,  461,  462,  389,   -1,
  391,  392,  393,  394,  395,  396,   -1,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  406,  407,   -1,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
  441,  442,  443,  444,  445,  256,  447,  448,   -1,   -1,
  261,   -1,  262,  454,   -1,   -1,   -1,  458,   -1,   -1,
  461,   -1,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,  290,
   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,
  311,   -1,   -1,  314,  315,   -1,  316,   -1,  319,  320,
  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,
  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,  359,  360,
   -1,  362,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,   -1,   -1,   -1,   -1,  387,   -1,  389,   -1,
   -1,  391,  392,  393,  394,  395,  396,   -1,  398,   -1,
   -1,   -1,  402,  403,   -1,   -1,  406,  407,   -1,   -1,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
  440,  441,  442,  443,  444,  445,   -1,  447,  448,   -1,
   -1,   -1,  264,   -1,  455,  456,  268,   -1,  458,  271,
  272,  461,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  292,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  335,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,
  422,  423,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  292,  449,   -1,   -1,
  296,  453,  454,   -1,   -1,  457,  302,   -1,   -1,  461,
  462,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,   -1,
   -1,  367,  368,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,  382,  383,   -1,  278,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,  288,
  289,  290,   -1,   -1,   -1,   -1,  295,   -1,   -1,  405,
  406,  407,  408,  302,  303,  304,  412,   -1,  307,   -1,
  309,   -1,  311,   -1,  264,  314,  422,  423,  268,   -1,
  319,  271,  272,   -1,   -1,  324,  276,  277,   -1,  279,
   -1,  281,  331,   -1,   -1,   -1,   -1,   -1,  337,   -1,
   -1,   -1,  292,  449,   -1,  344,  296,  453,  454,   -1,
   -1,  457,  302,   -1,   -1,  461,  462,  356,   -1,   -1,
  359,   -1,   -1,  313,   -1,   -1,  365,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  273,  274,  382,  383,   -1,  278,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,  288,  289,  290,   -1,   -1,
   -1,   -1,  295,   -1,   -1,  405,  406,  407,  408,  302,
  303,  304,  412,   -1,  307,   -1,  309,   -1,  311,   -1,
  264,  314,  422,  423,  268,   -1,  319,  271,  272,   -1,
   -1,  324,  276,  277,   -1,  279,   -1,  281,  331,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  449,
   -1,  344,  296,  453,  454,   -1,   -1,  457,  302,   -1,
   -1,  461,  462,  356,   -1,   -1,  359,   -1,   -1,  313,
   -1,   -1,  365,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  382,  383,
   -1,  278,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,  288,  289,  290,   -1,   -1,   -1,   -1,  295,   -1,
   -1,  405,  406,  407,  408,  302,  303,  304,  412,   -1,
  307,   -1,  309,   -1,  311,   -1,  264,   -1,  422,  423,
  268,   -1,  319,  271,  272,   -1,   -1,  324,  276,  277,
   -1,  279,   -1,  281,  331,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  449,   -1,   -1,  296,  453,
  454,   -1,   -1,  457,  302,   -1,   -1,  461,  462,  356,
   -1,   -1,  359,   -1,   -1,  313,   -1,   -1,  365,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,   -1,  422,  423,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  292,  449,   -1,   -1,  296,  453,  454,   -1,   -1,  457,
  302,   -1,   -1,  461,  462,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,
  422,  423,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  292,  449,   -1,   -1,
  296,  453,  454,   -1,   -1,  457,  302,   -1,   -1,  461,
  462,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,   -1,  422,  423,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  292,  449,   -1,   -1,  296,  453,  454,   -1,
   -1,  457,  302,   -1,   -1,  461,  462,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,   -1,  422,  423,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  449,
   -1,   -1,  296,  453,  454,   -1,   -1,  457,  302,   -1,
   -1,  461,  462,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,  422,  423,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  449,   -1,   -1,  296,  453,
  454,   -1,   -1,  457,  302,   -1,   -1,  461,  462,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,  261,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,  273,  357,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,  302,  303,  304,
   -1,  389,   -1,  391,  309,   -1,   -1,   -1,   -1,  314,
  315,   -1,   -1,   -1,  319,  320,  321,  405,  406,  407,
  408,  326,   -1,   -1,  412,  330,   -1,  332,  333,  334,
   -1,   -1,   -1,   -1,  422,  423,   -1,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,   -1,   -1,   -1,  360,   -1,  362,  261,   -1,
  365,  449,   -1,   -1,   -1,  453,  454,   -1,   -1,   -1,
  273,  274,   -1,  461,  462,  278,   -1,  382,   -1,   -1,
   -1,   -1,  285,  388,  389,  288,  289,  290,   -1,   -1,
  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,  307,   -1,  309,   -1,  311,   -1,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,  324,   -1,  326,   -1,   -1,   -1,  330,  331,  332,
  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  455,  456,  355,  356,   -1,   -1,  359,  360,   -1,  362,
  261,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,  278,   -1,  382,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,  290,
   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,
  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,
  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,
  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  454,  455,   -1,  355,  356,   -1,   -1,  359,  360,
   -1,  362,  261,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,  278,
   -1,  382,   -1,   -1,   -1,   -1,  285,  388,   -1,  288,
  289,  290,   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,
  309,   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,
  319,  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,
   -1,  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  455,   -1,  355,  356,   -1,   -1,
  359,  360,   -1,  362,  261,   -1,  365,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,  278,   -1,  382,   -1,   -1,   -1,   -1,  285,  388,
   -1,  288,  289,  290,   -1,   -1,  293,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,
  307,   -1,  309,   -1,  311,   -1,   -1,  314,  315,   -1,
   -1,   -1,  319,  320,  321,   -1,   -1,  324,   -1,  326,
   -1,   -1,   -1,  330,  331,  332,  333,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,  355,  356,
   -1,   -1,  359,  360,   -1,  362,  261,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,  278,   -1,  382,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,  289,  290,   -1,   -1,  293,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,  304,
   -1,   -1,  307,   -1,   -1,   -1,  311,   -1,   -1,  314,
  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,  324,
   -1,  326,   -1,   -1,   -1,  330,  331,  332,  333,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,   -1,
  355,   -1,   -1,   -1,  359,  360,   -1,  362,  261,   -1,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,  278,   -1,  382,   -1,   -1,
   -1,   -1,  285,  388,   -1,  288,  289,  290,   -1,   -1,
  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,  307,   -1,   -1,   -1,  311,   -1,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,  324,   -1,  326,   -1,   -1,   -1,  330,  331,  332,
  333,  334,   -1,   -1,  261,   -1,   -1,   -1,   -1,  342,
   -1,  344,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
  455,  278,  355,   -1,   -1,   -1,  359,  360,  285,  362,
   -1,  288,  365,   -1,   -1,   -1,  293,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,  303,  304,   -1,  382,
   -1,   -1,  309,   -1,   -1,  388,   -1,  314,  315,   -1,
   -1,   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,   -1,  360,  273,  362,   -1,   -1,  365,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,  455,   -1,  293,  382,   -1,   -1,   -1,   -1,
  387,   -1,  389,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,
  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,   -1,  332,  333,  334,   -1,   -1,  261,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,
  273,   -1,   -1,   -1,   -1,  278,  355,   -1,   -1,   -1,
   -1,  360,  285,  362,   -1,  288,  365,   -1,  455,   -1,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,
  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,  344,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  355,   -1,   -1,  273,   -1,  360,   -1,  362,
  278,   -1,  365,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,  455,   -1,   -1,  382,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  261,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,  285,  332,  333,  334,   -1,   -1,   -1,
   -1,  293,   -1,   -1,  342,   -1,  344,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,
   -1,   -1,  360,  315,  362,   -1,   -1,  365,  320,  321,
   -1,  285,  455,   -1,  326,   -1,   -1,   -1,  330,  293,
  332,  333,  334,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  342,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  355,   -1,   -1,  320,  321,  360,   -1,
  362,   -1,  326,   -1,   -1,  285,  330,   -1,  332,  333,
  334,   -1,   -1,  293,   -1,   -1,   -1,   -1,  342,  261,
  382,   -1,  384,  385,   -1,   -1,  388,   -1,   -1,   -1,
   -1,  355,   -1,   -1,   -1,  315,  360,   -1,  362,   -1,
  320,  321,   -1,  285,   -1,   -1,  326,  455,   -1,   -1,
  330,  293,  332,  333,  334,   -1,   -1,  337,  382,   -1,
  384,  385,  342,  261,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  355,   -1,   -1,  320,  321,
  360,   -1,  362,   -1,  326,   -1,   -1,  285,  330,   -1,
  332,  333,  334,  455,   -1,  293,   -1,   -1,   -1,   -1,
  342,  261,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,  355,   -1,   -1,   -1,  315,  360,   -1,
  362,   -1,  320,  321,   -1,  285,   -1,   -1,  326,   -1,
   -1,  455,  330,  293,  332,  333,  334,   -1,   -1,   -1,
  382,   -1,  384,  385,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  355,   -1,   -1,
  320,  321,  360,   -1,  362,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,  333,  334,  455,   -1,   -1,   -1,   -1,
   -1,   -1,  342,  268,  382,   -1,  271,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  355,  281,   -1,   -1,   -1,
  360,   -1,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,  455,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,  382,  273,   -1,   -1,  276,   -1,  313,   -1,
   -1,  281,   -1,  318,  268,   -1,   -1,  271,   -1,   -1,
  325,   -1,  276,   -1,   -1,   -1,  296,  281,   -1,   -1,
  335,   -1,   -1,  338,  339,   -1,  454,  455,   -1,   -1,
   -1,  346,  296,  313,   -1,   -1,  351,  352,  318,   -1,
   -1,  321,  357,   -1,   -1,   -1,  361,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,  455,   -1,   -1,  383,   -1,
   -1,  351,  352,   -1,  338,  339,   -1,  357,   -1,   -1,
   -1,  361,   -1,   -1,   -1,   -1,   -1,  351,  352,   -1,
   -1,   -1,   -1,  357,   -1,   -1,   -1,  361,   -1,   -1,
   -1,  416,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  416,   -1,   -1,  454,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  416,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  454,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  454,
  };

#line 8010 "ps-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new Tokenizer.LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (is_config_enabled) {
		if (partial_token != null)
			current_container.AddPartial (tc);
		else
			current_container.AddTypeContainer (tc);
	}
	
	is_config_enabled = true;
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

bool IsPartial (object a)
{
	var attrs = a as Attributes;
	if (attrs == null)
		return false;
	foreach (var attr in attrs.Attrs) {
		if (attr.TypeExpression.Name == "Partial")
			return true;
	}
	return false;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, FullNamedExpression retType, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);
	oob_stack.Push (Lexer.AutoSemiInsertion);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc, parameters, retType);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

void CheckIsPlayScript(string elem, Location loc) 
{
	if (!parsing_playscript) {
		report.Error (7035, loc, "`{0}' only supported in PlayScript", elem);
	}

}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else if (sn.Name == "Function")
		return new TypeExpression (compiler.BuiltinTypes.Delegate, GetLocation (e));
	else if (sn.Name == "Class")
		return new TypeExpression (compiler.BuiltinTypes.Type, GetLocation (e));
	else
		return e;
}

Statement ExpressionListToStatementList(List<Expression> list)
{
	if (list.Count == 1) {
		return ConvertExpressionToStatement(list[0]);
	} else if (list.Count > 1) {
		var sl = new StatementList(ConvertExpressionToStatement(list[0]), ConvertExpressionToStatement(list[1]));
		for (var i = 2; i < list.Count; i++) {
			sl.Add(ConvertExpressionToStatement(list[i]));
		}
		return sl;
	}
	
	return new StatementErrorExpression (EmptyExpression.MissingValue);
}

Statement ConvertExpressionToStatement(Expression ex)
{
	Statement ret;
	ExpressionStatement s = ex as ExpressionStatement;
	if (s == null) {
		if (Lexer.ParsingPlayScript) {
			ex.Error_InvalidExpressionStatement (report);
			ret = new StatementErrorExpression (ex);
		} else {
			ret = new AsNonAssignStatementExpression (ex);
		}
	} else {
		ret = new StatementExpression (s);
	}
	return ret;
}

Expression MakeMonoSimdType(string typeName, Location loc)
{
	return new MemberAccess(new MemberAccess(new SimpleName("Mono", loc), "Simd", loc), typeName, loc);
}

LocalVariable GetOrCreateLocalVariable(Block block, string name, LocalVariable.Flags flags, FullNamedExpression typeExpr, Location loc)
{
	INamedBlockVariable existing = null;
	LocalVariable li = null;

	if (!parsing_playscript) {
		if (block.ParametersBlock.TopBlock.GetLocalName (name, block, ref existing)) {
			if (existing is LocalVariable) {
				li = existing as LocalVariable;
				if (li.TypeExpr != null && existing.TypeExpr != null && li.TypeExpr.Equals (existing.TypeExpr)) {
					report.Warning (7138, 1, loc, "Variable is declared more than once.");
					li.DeclFlags |= LocalVariable.Flags.AsIgnoreMultiple;
					return li;
				}
			}
		}
	}
	
	li = new LocalVariable(block, name, flags, loc);
	li.TypeExpr = typeExpr;

	block.AddLocalName (li);
	
	return li;
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return "Literal " + ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
	case Token.IDENTIFIER_MODIFIER:
	case Token.IDENTIFIER_CONFIG:
		return "Identifier " + ((Tokenizer.LocatedToken)lexer.Value).Value ?? "";
	case Token.BOOL:
		return "bool";
	case Token.BOOLEAN:
		return "boolean";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.DOUBLE2:
		return "double2";
	case Token.DOUBLE3:
		return "double3";
	case Token.DOUBLE4:
		return "double4";
	case Token.DYNAMIC:
		return "dynamic";
	case Token.FLOAT:
		return "float";
	case Token.FLOAT2:
		return "float2";
	case Token.FLOAT3:
		return "float3";
	case Token.FLOAT4:
		return "float4";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.LOGICAL_AND_ASSIGN:
		return "&&=";
	case Token.LOGICAL_OR_ASSIGN:
		return "||=";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_USHIFT_RIGHT:
		return ">>>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_REF_EQ:
		return "===";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_IN:
		return "in";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_USHIFT_RIGHT_ASSIGN:
		return ">>>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DELETE:
		return "delete";
	case Token.DO:
		return "do";
	case Token.EACH:
		return "each";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTENDS:
		return "extends";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINAL:
		return "final";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOR_EACH:
		return "for each";
	case Token.FUNCTION:
		return "function";
	case Token.FUNCTION_GET:
		return "function get";
	case Token.FUNCTION_SET:
		return "function set";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLEMENTS:
		return "implements";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IMPORT:
		return "import";
	case Token.IN:
		return "in";
	case Token.INDEXER:
		return "indexer";
	case Token.INSTANCEOF:
		return "instanceof";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NATIVE:
		return "native";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.OVERLOAD:
		return "overload";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROPERTY:
		return "property";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNDEFINED:
		return "undefined";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USE:
		return "use";
	case Token.USING:
		return "using";
	case Token.VAR:
		return "var";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
//	case Token.ARGLIST:
//		return "__arglist";
//	case Token.REFVALUE:
//		return "__refvalue";
//	case Token.REFTYPE:
//		return "__reftype";
//	case Token.MAKEREF:
//		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
	case Token.OPEN_BRACE_INIT:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.DOT_AT:
		return ".@";
	case Token.DOT_STAR:
		return ".*";
	case Token.DOTDOT:
		return "..";
	case Token.DOTDOT_AT:
		return "..@";
	case Token.DOTDOT_STAR:
		return "..*";
	case Token.DOTDOTDOT:
		return "...";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.OP_AT:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BOOLEAN = 266;
  public const int BREAK = 267;
  public const int BYTE = 268;
  public const int CASE = 269;
  public const int CATCH = 270;
  public const int CHAR = 271;
  public const int CHECKED = 272;
  public const int CLASS = 273;
  public const int CONST = 274;
  public const int CONTINUE = 275;
  public const int DECIMAL = 276;
  public const int DEFAULT = 277;
  public const int DELEGATE = 278;
  public const int DELETE = 279;
  public const int DO = 280;
  public const int DOUBLE = 281;
  public const int DOUBLE2 = 282;
  public const int DOUBLE3 = 283;
  public const int DOUBLE4 = 284;
  public const int DYNAMIC = 285;
  public const int EACH = 286;
  public const int ELSE = 287;
  public const int ENUM = 288;
  public const int EVENT = 289;
  public const int EXPLICIT = 290;
  public const int EXTENDS = 291;
  public const int FALSE = 292;
  public const int FINAL = 293;
  public const int FINALLY = 294;
  public const int FIXED = 295;
  public const int FLOAT = 296;
  public const int FLOAT2 = 297;
  public const int FLOAT3 = 298;
  public const int FLOAT4 = 299;
  public const int FOR = 300;
  public const int FOR_EACH = 301;
  public const int FUNCTION = 302;
  public const int FUNCTION_GET = 303;
  public const int FUNCTION_SET = 304;
  public const int GOTO = 305;
  public const int IF = 306;
  public const int IMPLICIT = 307;
  public const int IMPLEMENTS = 308;
  public const int IMPORT = 309;
  public const int IN = 310;
  public const int INDEXER = 311;
  public const int INSTANCEOF = 312;
  public const int INT = 313;
  public const int INTERFACE = 314;
  public const int INTERNAL = 315;
  public const int IS = 316;
  public const int LOCK = 317;
  public const int LONG = 318;
  public const int NAMESPACE = 319;
  public const int NATIVE = 320;
  public const int NEW = 321;
  public const int NULL = 322;
  public const int OBJECT = 323;
  public const int OPERATOR = 324;
  public const int OUT = 325;
  public const int OVERRIDE = 326;
  public const int OVERLOAD = 327;
  public const int PACKAGE = 328;
  public const int PARAMS = 329;
  public const int PRIVATE = 330;
  public const int PROPERTY = 331;
  public const int PROTECTED = 332;
  public const int PUBLIC = 333;
  public const int READONLY = 334;
  public const int REF = 335;
  public const int RETURN = 336;
  public const int REMOVE = 337;
  public const int SBYTE = 338;
  public const int SHORT = 339;
  public const int SIZEOF = 340;
  public const int STACKALLOC = 341;
  public const int STATIC = 342;
  public const int STRING = 343;
  public const int STRUCT = 344;
  public const int SWITCH = 345;
  public const int THIS = 346;
  public const int THROW = 347;
  public const int TRUE = 348;
  public const int TRY = 349;
  public const int TYPEOF = 350;
  public const int UINT = 351;
  public const int ULONG = 352;
  public const int UNCHECKED = 353;
  public const int UNDEFINED = 354;
  public const int UNSAFE = 355;
  public const int USE = 356;
  public const int USHORT = 357;
  public const int USING = 358;
  public const int VAR = 359;
  public const int VIRTUAL = 360;
  public const int VOID = 361;
  public const int VOLATILE = 362;
  public const int WHERE = 363;
  public const int WHILE = 364;
  public const int PARTIAL = 365;
  public const int ARROW = 366;
  public const int FROM = 367;
  public const int FROM_FIRST = 368;
  public const int JOIN = 369;
  public const int ON = 370;
  public const int EQUALS = 371;
  public const int SELECT = 372;
  public const int GROUP = 373;
  public const int BY = 374;
  public const int LET = 375;
  public const int ORDERBY = 376;
  public const int ASCENDING = 377;
  public const int DESCENDING = 378;
  public const int INTO = 379;
  public const int INTERR_NULLABLE = 380;
  public const int EXTERN = 381;
  public const int ASYNC = 382;
  public const int AWAIT = 383;
  public const int GET = 384;
  public const int SET = 385;
  public const int LAST_KEYWORD = 386;
  public const int OPEN_BRACE = 387;
  public const int CLOSE_BRACE = 388;
  public const int OPEN_BRACKET = 389;
  public const int CLOSE_BRACKET = 390;
  public const int OPEN_PARENS = 391;
  public const int CLOSE_PARENS = 392;
  public const int DOT = 393;
  public const int DOT_AT = 394;
  public const int DOT_STAR = 395;
  public const int DOTDOT = 396;
  public const int DOTDOT_AT = 397;
  public const int DOTDOT_STAR = 398;
  public const int DOTDOTDOT = 399;
  public const int DOT_OPEN_PARENS = 400;
  public const int CLOSE_PARENS_DOT = 401;
  public const int COMMA = 402;
  public const int COLON = 403;
  public const int SEMICOLON = 404;
  public const int TILDE = 405;
  public const int PLUS = 406;
  public const int MINUS = 407;
  public const int BANG = 408;
  public const int ASSIGN = 409;
  public const int OP_LT = 410;
  public const int OP_GT = 411;
  public const int BITWISE_AND = 412;
  public const int BITWISE_OR = 413;
  public const int LOGICAL_AND_ASSIGN = 414;
  public const int LOGICAL_OR_ASSIGN = 415;
  public const int STAR = 416;
  public const int PERCENT = 417;
  public const int DIV = 418;
  public const int CARRET = 419;
  public const int INTERR = 420;
  public const int DOUBLE_COLON = 421;
  public const int OP_INC = 422;
  public const int OP_DEC = 423;
  public const int OP_SHIFT_LEFT = 424;
  public const int OP_SHIFT_RIGHT = 425;
  public const int OP_USHIFT_RIGHT = 426;
  public const int OP_LE = 427;
  public const int OP_GE = 428;
  public const int OP_EQ = 429;
  public const int OP_REF_EQ = 430;
  public const int OP_NE = 431;
  public const int OP_REF_NE = 432;
  public const int OP_AND = 433;
  public const int OP_OR = 434;
  public const int OP_MULT_ASSIGN = 435;
  public const int OP_DIV_ASSIGN = 436;
  public const int OP_MOD_ASSIGN = 437;
  public const int OP_ADD_ASSIGN = 438;
  public const int OP_SUB_ASSIGN = 439;
  public const int OP_SHIFT_LEFT_ASSIGN = 440;
  public const int OP_SHIFT_RIGHT_ASSIGN = 441;
  public const int OP_USHIFT_RIGHT_ASSIGN = 442;
  public const int OP_AND_ASSIGN = 443;
  public const int OP_XOR_ASSIGN = 444;
  public const int OP_OR_ASSIGN = 445;
  public const int OP_PTR = 446;
  public const int OP_COALESCING = 447;
  public const int OP_IN = 448;
  public const int OP_AT = 449;
  public const int OP_GENERICS_LT = 450;
  public const int OP_GENERICS_LT_DECL = 451;
  public const int OP_GENERICS_GT = 452;
  public const int LITERAL = 453;
  public const int IDENTIFIER = 454;
  public const int IDENTIFIER_MODIFIER = 455;
  public const int IDENTIFIER_CONFIG = 456;
  public const int OPEN_PARENS_LAMBDA = 457;
  public const int OPEN_PARENS_CAST = 458;
  public const int GENERIC_DIMENSION = 459;
  public const int DEFAULT_COLON = 460;
  public const int OPEN_BRACKET_EXPR = 461;
  public const int OPEN_BRACE_INIT = 462;
  public const int EVAL_STATEMENT_PARSER = 463;
  public const int EVAL_COMPILATION_UNIT_PARSER = 464;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 465;
  public const int DOC_SEE = 466;
  public const int GENERATE_COMPLETION = 467;
  public const int COMPLETE_COMPLETION = 468;
  public const int UMINUS = 469;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
