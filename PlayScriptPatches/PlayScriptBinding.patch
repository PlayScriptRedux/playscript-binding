diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/CSharpBinding.addin.xml ./main/src/addins/PlayScriptBinding/CSharpBinding.addin.xml
--- ./main/src/addins/CSharpBinding/CSharpBinding.addin.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/CSharpBinding.addin.xml	2013-05-20 13:08:33.000000000 -0700
@@ -1,10 +1,10 @@
-<Addin id          = "CSharpBinding"
+<Addin id          = "PlayScriptBinding"
        namespace   = "MonoDevelop"
-       name        = "CSharp Language Binding"
-       author      = "Todd Berman"
+       name        = "PlayScript Language Binding"
+       author      = "Ben Cooley"
        copyright   = "MIT X11"
        url         = "http://www.monodevelop.com/"
-       description = "CSharp Language Binding"
+       description = "PlayScript Language Binding"
        category    = "Language bindings"
        version     = "4.0.5">
 	
@@ -25,75 +25,89 @@
 
 	<Extension path = "/MonoDevelop/ProjectModel/MSBuildItemTypes">
 		<DotNetProject
-			language="C#"
-			extension="csproj"
-			guid="{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"
+			language="PlayScript"
+			extension="psproj"
+			guid="{2065160B-5C1B-4AFD-AAB6-1CF1AC3AC086}"
 			import="$(MSBuildBinPath)\Microsoft.CSharp.targets"
-			resourceHandler="MonoDevelop.CSharp.Project.CSharpResourceIdBuilder"
+			resourceHandler="MonoDevelop.PlayScript.Project.CSharpResourceIdBuilder"
 			/>
-		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
-			<DotNetProjectSubtype
-				guid="{786C830F-07A1-408B-BD7F-6EE04809D6DB}"
-				type="MonoDevelop.Projects.PortableDotNetProject"
-				useXBuild="true">
-				<AddImport language="C#" projects="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
-				<RemoveImport language="C#" projects="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
-			</DotNetProjectSubtype>
-		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/FileTemplates">
-		<FileTemplate id = "CSharpEmptyFile" resource = "EmptyCSharpFile.xft.xml"/>
 		<FileTemplate id = "CSharpAssemblyInfo" resource = "AssemblyInfo.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyFile" resource = "AsEmptyFile.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyClass" resource = "AsEmptyClass.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyInterface" resource = "AsEmptyInterface.xft.xml"/>		
+		<FileTemplate id = "PlayScriptEmptyFile" resource = "PsEmptyFile.xft.xml"/>
+		<FileTemplate id = "PlayScriptEmptyClass" resource = "PsEmptyClass.xft.xml"/>
+		<FileTemplate id = "PlayScriptEmptyInterface" resource = "PsEmptyInterface.xft.xml"/>
+	</Extension>
+
+	<Extension path="/MonoDevelop/Core/SupportPackages">
+		<Condition id="PackageNotInstalled" name="playscript" version="1.2.0">
+			<Package name="playscript" version="1.2.0" clrVersion="Default">
+				<Assembly file="pscorlib.dll" />
+	  			<Assembly file="PlayScript.Dynamic.dll" />
+	  			<Assembly file="Mono.PlayScript.dll" />
+				<Assembly file="pscorlib_aot.dll" />
+				<Assembly file="PlayScript.Dynamic_aot.dll" />
+			</Package>
+		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/ProjectTemplates">
-		<ProjectTemplate id = "CSharpConsoleProject" resource = "ConsoleProject.xpt.xml"/>
-		<ProjectTemplate id = "CSharpEmptyProject" resource = "EmptyProject.xpt.xml"/>
-		<ProjectTemplate id = "CSharpGtkSharp2Project" resource = "GtkSharp2Project.xpt.xml"/>
-		<ProjectTemplate id = "CSharpLibrary" resource = "Library.xpt.xml"/>
-		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
-			<ProjectTemplate id = "CSharpPortableLibrary" resource = "PortableLibrary.xpt.xml" />
-		</Condition>
+		<ProjectTemplate id = "PlayScriptEmptyProject" resource = "PsEmptyProject.xpt.xml"/>
+		<ProjectTemplate id = "PlayScriptLibrary" resource = "PsLibrary.xpt.xml"/>
+		<ProjectTemplate id = "PlayScriptConsoleProject" resource = "PsConsoleProject.xpt.xml"/>
+		<ProjectTemplate id = "ActionScriptEmptyProject" resource = "AsEmptyProject.xpt.xml"/>
+		<ProjectTemplate id = "ActionScriptLibrary" resource = "AsLibrary.xpt.xml"/>
+		<ProjectTemplate id = "ActionScriptConsoleProject" resource = "AsConsoleProject.xpt.xml"/>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/FileFilters">
-		<FileFilter id = "CSharp"
+		<FileFilter id = "ActionScript"
 		            insertbefore = "Assemblies"
-		            _label = "C# Files"
-		            extensions = "*.cs"/>
+		            _label = "ActionScript Files"
+		            extensions = "*.as"/>
+		<FileFilter id = "PlayScript"
+		            insertbefore = "Assemblies"
+		            _label = "PlayScript Files"
+		            extensions = "*.play"/>			            	            
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/General">
-		<Condition id="ActiveLanguage" value="C#">
+		<Condition id="ActiveLanguage" value="PlayScript">
 			<Panel id = "CSharpCompilerOptionsPanel"
-			             _label = "C#"
-			             class = "MonoDevelop.CSharp.Project.CompilerOptionsPanel"/>
+			             _label = "PlayScript"
+			             class = "MonoDevelop.PlayScript.Project.CompilerOptionsPanel"/>
 		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/Compiler">
-		<Condition id="ActiveLanguage" value="C#">
+		<Condition id="ActiveLanguage" value="PlayScript">
 			<Panel id = "CSharpCodeGenerationPanel"
 			             _label = "Compiler"
-			             class = "MonoDevelop.CSharp.Project.CodeGenerationPanel"/>
+			             class = "MonoDevelop.PlayScript.Project.CodeGenerationPanel"/>
 		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/LanguageBindings">
-		<LanguageBinding id    = "CSharp"
-		                 supportedextensions = ".cs"
-		                 class = "MonoDevelop.CSharp.CSharpLanguageBinding" />
+		<LanguageBinding id    = "ActionScript"
+		                 supportedextensions = ".as"
+		                 class = "MonoDevelop.PlayScript.ActionScriptLanguageBinding" />
+		<LanguageBinding id    = "PlayScript"
+		                 supportedextensions = ".play"
+		                 class = "MonoDevelop.PlayScript.PlayScriptLanguageBinding" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/ReferenceFinder">
-		<ReferenceFinder supportedmimetypes = "text/x-csharp"
-		                 class = "MonoDevelop.CSharp.Refactoring.CSharpReferenceFinder" />
+		<ReferenceFinder supportedmimetypes = "text/x-csharp,text/x-actionscript,text/x-playscript"
+		                 class = "MonoDevelop.PlayScript.Refactoring.CSharpReferenceFinder" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/SerializableClasses">
-		<DataType class = "MonoDevelop.CSharp.Project.CSharpCompilerParameters" />
-		<DataType class = "MonoDevelop.CSharp.Project.CSharpProjectParameters" />
+		<DataType class = "MonoDevelop.PlayScript.Project.PlayScriptCompilerParameters" />
+		<DataType class = "MonoDevelop.PlayScript.Project.PlayScriptProjectParameters" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/TextEditorExtensions">
@@ -110,10 +124,10 @@
 		         privaet;
 
 		-->
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Formatting.CSharpTextEditorIndentation" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Completion.CSharpCompletionTextEditorExtension" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Highlighting.HighlightUsagesExtension" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.PathedDocumentTextEditorExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Formatting.CSharpTextEditorIndentation" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Completion.CSharpCompletionTextEditorExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Highlighting.HighlightUsagesExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.PathedDocumentTextEditorExtension" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/MD1SerializationMaps">
@@ -121,108 +135,123 @@
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Core/StockIcons">
-		<StockIcon stockid = "md-csharp-file" resource = "C#.FileIcon" size="Menu" />
-		<StockIcon stockid = "md-csharp-project" resource = "csharp-project-16.png" size="Menu"/>
+		<StockIcon stockid = "md-actionscript-file" resource = "ActionScript.FileIcon" size="Menu" />
+		<StockIcon stockid = "md-playscript-file" resource = "PlayScript.FileIcon" size="Menu" />
+		<StockIcon stockid = "md-playscript-project" resource = "playscript-project-16.png" size="Menu"/>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Core/MimeTypes">
-		<MimeType id="text/x-csharp" _description="C# source code" icon="md-csharp-file" isText="true">
-			<File pattern="*.cs" />
-		</MimeType>
+		<MimeType id="text/x-actionscript" _description="ActionScript source code" icon="md-actionscript-file" isText="true">
+			<File pattern="*.as" />
+		</MimeType>		
+		<MimeType id="text/x-playscript" _description="PlayScript source code" icon="md-playscript-file" isText="true">
+			<File pattern="*.play" />
+		</MimeType>		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/CodeFormatters">
-		<Formatter mimeType="text/x-csharp" class="MonoDevelop.CSharp.Formatting.CSharpFormatter" />
+		<Formatter mimeType="text/x-actionscript" class="MonoDevelop.PlayScript.Formatting.CSharpFormatter" />
+		<Formatter mimeType="text/x-playscript" class="MonoDevelop.PlayScript.Formatting.CSharpFormatter" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/Ambiences">
-		<Ambience mimeType="text/x-csharp" class = "MonoDevelop.CSharp.CSharpAmbience" />
+		<Ambience mimeType="text/x-actionscript" class = "MonoDevelop.PlayScript.CSharpAmbience" />
+		<Ambience mimeType="text/x-playscript" class = "MonoDevelop.PlayScript.CSharpAmbience" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/Parser">
-		<Parser class="MonoDevelop.CSharp.Parser.TypeSystemParser" mimeType = "text/x-csharp" />
+		<Parser class="MonoDevelop.PlayScript.Parser.TypeSystemParser" mimeType = "text/x-actionscript" />
+		<Parser class="MonoDevelop.PlayScript.Parser.TypeSystemParser" mimeType = "text/x-playscript" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/FoldingParser">
-		<Parser class = "MonoDevelop.CSharp.Parser.CSharpFoldingParser" mimeType="text/x-csharp" />
+		<Parser class = "MonoDevelop.PlayScript.Parser.CSharpFoldingParser" mimeType="text/x-actionscript" />
+		<Parser class = "MonoDevelop.PlayScript.Parser.CSharpFoldingParser" mimeType="text/x-playscript" />		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/CodeGenerators">
-		<Generator class="MonoDevelop.CSharp.Refactoring.CSharpCodeGenerator" mimeType = "text/x-csharp" />
+		<Generator class="MonoDevelop.PlayScript.Refactoring.CSharpCodeGenerator" mimeType = "text/x-actionscript" />
+		<Generator class="MonoDevelop.PlayScript.Refactoring.CSharpCodeGenerator" mimeType = "text/x-playscript" />		
 	</Extension>
-	
+
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/Mono" >
-		<Policies resource="MonoCSharpPolicy.xml" />
-		<Policies resource="MonoNameConventionPolicy.xml" />
+		<Policies resource="PsMonoNameConventionPolicy.xml" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
 		<PolicySet id="KR" _name="K&amp;R style" allowDiffSerialize="false">
-			<Policies resource="KRCSharpPolicy.xml" />
-			<Policies resource="InvariantTextStylePolicy.xml" />
+			<Policies resource="PsKRCSharpPolicy.xml" />
+			<Policies resource="PsInvariantTextStylePolicy.xml" />
 		</PolicySet>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
 		<PolicySet id="1TBS" _name="SharpDevelop style (1TBS)" allowDiffSerialize="false">
-			<Policies resource="SharpDevelopCSharpPolicy.xml" />
-			<Policies resource="InvariantTextStylePolicy.xml" />
+			<Policies resource="PsSharpDevelopCSharpPolicy.xml" />
+			<Policies resource="PsInvariantTextStylePolicy.xml" />
 		</PolicySet>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/VisualStudio" >
-		<Policies resource="AllmanCSharpPolicy.xml" />
+		<Policies resource="PsAllmanCSharpPolicy.xml" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
 		<PolicySet id="Whitesmiths" _name="Whitesmiths style" allowDiffSerialize="false">
-			<Policies resource="WhitesmithsCSharpPolicy.xml" />
-			<Policies resource="InvariantTextStylePolicy.xml" />
+			<Policies resource="PsWhitesmithsCSharpPolicy.xml" />
+			<Policies resource="PsInvariantTextStylePolicy.xml" />
 		</PolicySet>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
 		<PolicySet id="GNU" _name="GNU style" allowDiffSerialize="false">
-			<Policies resource="GNUCSharpPolicy.xml" />
-			<Policies resource="GNUTextStylePolicy.xml" />
+			<Policies resource="PsGNUCSharpPolicy.xml" />
+			<Policies resource="PsGNUTextStylePolicy.xml" />
 		</PolicySet>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels">
-		<Panel id = "CSharpFormatting" _label = "C# Format" mimeType="text/x-csharp" class = "MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanel" />
+		<Panel id = "ActionScriptFormatting" _label = "ActionScript Format" mimeType="text/x-actionscript" class = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanel" />
+		<Panel id = "PlayScriptFormatting" _label = "PlayScript Format" mimeType="text/x-playscript" class = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanel" />		
 	</Extension>
 
-	<Extension path = "/MonoDevelop/Refactoring/CodeActions">
+	<!-- Extension path = "/MonoDevelop/Refactoring/CodeActions">
 		<Action mimeType="text/x-csharp"
 			_title = "Move type to another file"
 			_description = "Moves current type to another file that matches the name of the type."
-			class = "MonoDevelop.CSharp.Refactoring.CodeActions.MoveTypeToFile" />
-	</Extension>
+			class = "MonoDevelop.PlayScript.Refactoring.CodeActions.MoveTypeToFile" />
+	</Extension -->
 
 	<Extension path = "/MonoDevelop/Ide/TextEditorResolver">
-		<Resolver class = "MonoDevelop.CSharp.Resolver.TextEditorResolverProvider" mimeType="text/x-csharp" />
+		<Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-actionscript" />
+		<Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-playscript" />
+	</Extension>
+
+	<Extension path = "/MonoDevelop/SourceEditor2/SyntaxModes">
+		<Templates resource="ActionScriptSyntaxMode.xml" />
+		<Templates resource="PlayScriptSyntaxMode.xml" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/Commands/TextEditor">
-		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.PrevUsage"
-		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToPrevUsageHandler"
+		<Command id = "MonoDevelop.PlayScript.Highlighting.MoveToUsagesCommand.PrevUsage"
+		         defaultHandler = "MonoDevelop.PlayScript.Highlighting.MoveToPrevUsageHandler"
 		         shortcut = "Ctrl|Shift|Up"
 		         macShortcut = "Meta|Shift|Up"
 		         _label = "_Move to prev usage"/>
-		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.NextUsage"
-		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToNextUsageHandler"
+		<Command id = "MonoDevelop.PlayScript.Highlighting.MoveToUsagesCommand.NextUsage"
+		         defaultHandler = "MonoDevelop.PlayScript.Highlighting.MoveToNextUsageHandler"
 		         shortcut = "Ctrl|Shift|Down"
 		         macShortcut = "Meta|Shift|Down"
 		         _label = "_Move to next usage"/>
 
-		<Command id = "MonoDevelop.CSharp.ExpandCommands.ExpandSelection"
-		         defaultHandler = "MonoDevelop.CSharp.ExpandSelectionHandler"
+		<Command id = "MonoDevelop.PlayScript.ExpandCommands.ExpandSelection"
+		         defaultHandler = "MonoDevelop.PlayScript.ExpandSelectionHandler"
 		         shortcut = "Alt|Shift|Up"
 		         macShortcut = "Alt|Shift|Up"
 		         _label = "_Expand selection"/>
 
-		<Command id = "MonoDevelop.CSharp.ExpandCommands.ShrinkSelection"
-		         defaultHandler = "MonoDevelop.CSharp.ShrinkSelectionHandler"
+		<Command id = "MonoDevelop.PlayScript.ExpandCommands.ShrinkSelection"
+		         defaultHandler = "MonoDevelop.PlayScript.ShrinkSelectionHandler"
 		         shortcut = "Alt|Shift|Down"
 		         macShortcut = "Alt|Shift|Down"
 		         _label = "_Shrink selection"/>
@@ -241,30 +270,30 @@
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Refactoring/CodeActionSource">
-		<Source class ="MonoDevelop.CSharp.Refactoring.CodeActions.NRefactoryCodeActionSource"/>
+		<Source class ="MonoDevelop.PlayScript.Refactoring.CodeActions.NRefactoryCodeActionSource"/>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Refactoring/CodeIssueSource">
-		<Source class ="MonoDevelop.CSharp.Refactoring.CodeIssues.NRefactoryCodeIssueSource"/>
+		<Source class ="MonoDevelop.PlayScript.Refactoring.CodeIssues.NRefactoryCodeIssueSource"/>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/DefaultPolicyPanels/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
+		<Section id="PlayScriptNameConventions" _label="PlayScript Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
 	</Extension>
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
+		<Section id="PlayScriptNameConventions" _label="PlayScript Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
 	</Extension>
 	<Extension path = "/MonoDevelop/Ide/GlobalOptionsDialog/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
+		<Section id="PlayScriptNameConventions" _label="PlayScript Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/SourceEditor2/TooltipProviders">
 		<Class id="LanguageItem" class="MonoDevelop.SourceEditor.LanguageItemTooltipProvider" />
 	</Extension>
 
-	<Module>
+	<!-- Module>
 	    <Runtime>
-	        <Import assembly="MonoDevelop.CSharpBinding.Autotools.dll"/>
+	        <Import assembly="MonoDevelop.PlayScriptBinding.Autotools.dll"/>
 	    </Runtime>
 		<Dependencies>
 			<Addin id="Autotools" version="4.0.5"/>
@@ -272,9 +301,9 @@
 		<Extension path = "/MonoDevelop/Autotools/SimpleSetups">
 			<Class class="CSharpBinding.Autotools.CSharpAutotoolsSetup" />
 		</Extension>
-	</Module>
+	</Module -->
 
-	<Module>
+	<!-- Module>
 		<Runtime>
 			<Import assembly="MonoDevelop.CSharpBinding.AspNet.dll"/>
 		</Runtime>
@@ -288,5 +317,6 @@
 			<ReferenceFinder supportedmimetypes = "application/x-aspx,application/x-ascx,application/x-asax,application/x-ashx,application/x-asmx,application/x-asix"
 			                 class = "MonoDevelop.CSharp.Refactoring.ASPNetReferenceFinder" />
 		</Extension>
-	</Module>
+	</Module -->
+
 </Addin>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/CSharpBinding.csproj ./main/src/addins/PlayScriptBinding/CSharpBinding.csproj
--- ./main/src/addins/CSharpBinding/CSharpBinding.csproj	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/CSharpBinding.csproj	2013-05-20 13:08:33.000000000 -0700
@@ -5,10 +5,10 @@
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
     <ProductVersion>9.0.21022</ProductVersion>
     <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{07CC7654-27D6-421D-A64C-0FFA40456FA2}</ProjectGuid>
+    <ProjectGuid>{6D8647C9-D479-46CD-A872-6999A8BF156C}</ProjectGuid>
     <OutputType>Library</OutputType>
-    <AssemblyName>MonoDevelop.CSharpBinding</AssemblyName>
-    <RootNamespace>CSharpBinding</RootNamespace>
+    <AssemblyName>MonoDevelop.PlayScriptBinding</AssemblyName>
+    <RootNamespace>PlayScriptBinding</RootNamespace>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>True</DebugSymbols>
@@ -96,6 +96,10 @@
       <Name>Mono.Addins</Name>
       <Private>False</Private>
     </ProjectReference>
+    <ProjectReference Include="..\ICSharpCode.NRefactory.PlayScript\ICSharpCode.NRefactory.PlayScript.csproj">
+      <Project>{53DCA265-3C3C-42F9-B647-F72BA678122B}</Project>
+      <Name>ICSharpCode.NRefactory.PlayScript</Name>
+    </ProjectReference>
     <ProjectReference Include="..\..\..\external\nrefactory\ICSharpCode.NRefactory.CSharp\ICSharpCode.NRefactory.CSharp.csproj">
       <Project>{53DCA265-3C3C-42F9-B647-F72BA678122B}</Project>
       <Name>ICSharpCode.NRefactory.CSharp</Name>
@@ -130,32 +134,32 @@
     <Reference Include="Mono.Cairo" />
   </ItemGroup>
   <ItemGroup>
-    <EmbeddedResource Include="templates\ConsoleProject.xpt.xml">
-      <LogicalName>ConsoleProject.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsConsoleProject.xpt.xml">
+      <LogicalName>PsConsoleProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\EmptyCSharpFile.xft.xml">
-      <LogicalName>EmptyCSharpFile.xft.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyFile.xft.xml">
+      <LogicalName>PsEmptyFile.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\EmptyProject.xpt.xml">
-      <LogicalName>EmptyProject.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyProject.xpt.xml">
+      <LogicalName>PsEmptyProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\GtkSharp2Project.xpt.xml">
-      <LogicalName>GtkSharp2Project.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsLibrary.xpt.xml">
+      <LogicalName>PsLibrary.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\Library.xpt.xml">
-      <LogicalName>Library.xpt.xml</LogicalName>
+    <EmbeddedResource Include="icons\PlayScript.FileIcon">
+      <LogicalName>PlayScript.FileIcon</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\C#.FileIcon">
-      <LogicalName>C#.FileIcon</LogicalName>
+    <EmbeddedResource Include="icons\ActionScript.FileIcon">
+      <LogicalName>ActionScript.FileIcon</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="CSharpBinding.addin.xml">
-      <LogicalName>CSharpBinding.addin.xml</LogicalName>
+    <EmbeddedResource Include="PlayScriptBinding.addin.xml">
+      <LogicalName>PlayScriptBinding.addin.xml</LogicalName>
     </EmbeddedResource>
     <EmbeddedResource Include="gtk-gui\gui.stetic">
       <LogicalName>gui.stetic</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\csharp-icon-32.png">
-      <LogicalName>csharp-icon-32.png</LogicalName>
+    <EmbeddedResource Include="icons\playscript-icon-32.png">
+      <LogicalName>playscript-icon-32.png</LogicalName>
     </EmbeddedResource>
     <EmbeddedResource Include="templates\AssemblyInfo.xft.xml">
       <LogicalName>AssemblyInfo.xft.xml</LogicalName>
@@ -163,38 +167,65 @@
     <EmbeddedResource Include="md1format.xml">
       <LogicalName>md1format.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\csharp-project-16.png">
-      <LogicalName>csharp-project-16.png</LogicalName>
+    <EmbeddedResource Include="icons\playscript-project-16.png">
+      <LogicalName>playscript-project-16.png</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsAllmanCSharpPolicy.xml">
+      <LogicalName>PsAllmanCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsInvariantTextStylePolicy.xml">
+      <LogicalName>PsInvariantTextStylePolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsKRCSharpPolicy.xml">
+      <LogicalName>PsKRCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsMonoCSharpPolicy.xml">
+      <LogicalName>PsMonoCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsSharpDevelopCSharpPolicy.xml">
+      <LogicalName>PsSharpDevelopCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsWhitesmithsCSharpPolicy.xml">
+      <LogicalName>PsWhitesmithsCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsGNUCSharpPolicy.xml">
+      <LogicalName>PsGNUCSharpPolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\PsGNUTextStylePolicy.xml">
+      <LogicalName>PsGNUTextStylePolicy.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\PsMonoNameConventionPolicy.xml">
+      <LogicalName>PsMonoNameConventionPolicy.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\AllmanCSharpPolicy.xml">
-      <LogicalName>AllmanCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsConsoleProject.xpt.xml">
+      <LogicalName>AsConsoleProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\InvariantTextStylePolicy.xml">
-      <LogicalName>InvariantTextStylePolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsEmptyFile.xft.xml">
+      <LogicalName>AsEmptyFile.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\KRCSharpPolicy.xml">
-      <LogicalName>KRCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyClass.xft.xml">
+      <LogicalName>PsEmptyClass.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\MonoCSharpPolicy.xml">
-      <LogicalName>MonoCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyInterface.xft.xml">
+      <LogicalName>PsEmptyInterface.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\SharpDevelopCSharpPolicy.xml">
-      <LogicalName>SharpDevelopCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsEmptyClass.xft.xml">
+      <LogicalName>AsEmptyClass.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\WhitesmithsCSharpPolicy.xml">
-      <LogicalName>WhitesmithsCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsEmptyInterface.xft.xml">
+      <LogicalName>AsEmptyInterface.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\GNUCSharpPolicy.xml">
-      <LogicalName>GNUCSharpPolicy.xml</LogicalName>
+    <EmbeddedResource Include="SyntaxMode\ActionScriptSyntaxMode.xml">
+      <LogicalName>ActionScriptSyntaxMode.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\policies\GNUTextStylePolicy.xml">
-      <LogicalName>GNUTextStylePolicy.xml</LogicalName>
+    <EmbeddedResource Include="SyntaxMode\PlayScriptSyntaxMode.xml">
+      <LogicalName>PlayScriptSyntaxMode.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\MonoNameConventionPolicy.xml">
-      <LogicalName>MonoNameConventionPolicy.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsEmptyProject.xpt.xml">
+      <LogicalName>AsEmptyProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\PortableLibrary.xpt.xml">
-      <LogicalName>PortableLibrary.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsLibrary.xpt.xml">
+      <LogicalName>AsLibrary.xpt.xml</LogicalName>
     </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
@@ -213,22 +244,16 @@
     <Compile Include="MonoDevelop.CSharp.Project\CSharpResourceIdBuilder.cs" />
     <Compile Include="MonoDevelop.CSharp.Project\CodeGenerationPanel.cs" />
     <Compile Include="MonoDevelop.CSharp.Project\CompilerOptionsPanelWidget.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs" />
     <Compile Include="MonoDevelop.CSharp\CSharpBindingCompilerManager.cs" />
     <Compile Include="MonoDevelop.CSharp\CSharpEnhancedCodeProvider.cs" />
-    <Compile Include="MonoDevelop.CSharp\CSharpLanguageBinding.cs" />
     <Compile Include="MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\Indent.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs" />
     <Compile Include="MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs" />
     <Compile Include="MonoDevelop.CSharp.Highlighting\MoveToUsagesHandler.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\CSharpFormattingPolicyPanelWidget.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\NewFormattingProfileDialog.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs" />
     <Compile Include="MonoDevelop.CSharp.Resolver\HelperMethods.cs" />
     <Compile Include="MonoDevelop.CSharp\ExpandSelectionHandler.cs" />
     <Compile Include="MonoDevelop.CSharp.Parser\TypeSystemProvider.cs" />
@@ -260,7 +285,6 @@
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\PropertyGenerator.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\ToStringGenerator.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\WriteLineGenerator.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CodeGeneration.GenerateCodeWindow.cs" />
     <Compile Include="MonoDevelop.CSharp.Formatting\CSharpIndentVirtualSpaceManager.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\ReadonlyPropertyGenerator.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\RaiseEventMethodGenerator.cs" />
@@ -274,8 +298,6 @@
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs" />
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionPanel.cs" />
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionPanelWidget.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs" />
-    <Compile Include="gtk-gui\MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs" />
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionPolicy.cs" />
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeActions\NRefactoryCodeActionProvider.cs" />
     <Compile Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs" />
@@ -289,6 +311,17 @@
     <Compile Include="MonoDevelop.CSharp.Completion\ArrayTypeParameterDataProvider.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\ImplementInterfaceMembersGenerator.cs" />
     <Compile Include="MonoDevelop.CSharp.Completion\TypeParameterDataProvider.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs" />
+    <Compile Include="MonoDevelop.CSharp.Refactoring\ExtensionMethods.cs" />
+    <Compile Include="MonoDevelop.CSharp\ActionScriptLanguageBinding.cs" />
+    <Compile Include="MonoDevelop.CSharp\PlayScriptLanguageBinding.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="Makefile.am" />
@@ -310,5 +343,6 @@
     <Folder Include="MonoDevelop.CSharp.Refactoring.CodeIssues\" />
     <Folder Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\" />
     <Folder Include="MonoDevelop.CSharp.Tooltips\" />
+    <Folder Include="SyntaxMode\" />
   </ItemGroup>
 </Project>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/Makefile.am ./main/src/addins/PlayScriptBinding/Makefile.am
--- ./main/src/addins/CSharpBinding/Makefile.am	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/Makefile.am	2013-05-20 13:08:33.000000000 -0700
@@ -36,7 +36,7 @@ TESTFILES =  \
 	Parser/SharpDevelopTree/Method.cs \
 	Parser/SharpDevelopTree/ReturnType.cs \
 	Parser/TypeVisitor.cs \
-	Project/CSharpCompilerParameters.cs \
+	Project/PlayScriptCompilerParameters.cs \
 	MonoDevelop.CSharp.Inspection/Inspectors/RedundantThisInspector.cs
 
 TESTDLLS = \
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs	2013-05-20 13:08:33.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs	2013-05-20 13:08:33.000000000 -0700
@@ -40,46 +40,46 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
-	public class CSharpLanguageBinding : IDotNetLanguageBinding
+	public class ActionScriptLanguageBinding : IDotNetLanguageBinding
 	{
 		CSharpCodeProvider provider;
-		
+
 		// Keep the platforms combo of CodeGenerationPanelWidget in sync with this list
 		public static IList<string> SupportedPlatforms = new string[] { "anycpu", "x86", "x64", "itanium" };
-	
+
 		public string Language {
 			get {
-				return "C#";
+				return "ActionScript";
 			}
 		}
-		
+
 		public string ProjectStockIcon {
 			get { 
-				return "md-csharp-project";
+				return "md-playscript-project";
 			}
 		}
-		
-		
+
+
 		public bool IsSourceCodeFile (FilePath fileName)
 		{
-			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".cs");
+			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".as");
 		}
-		
+
 		public BuildResult Compile (ProjectItemCollection projectItems, DotNetProjectConfiguration configuration, ConfigurationSelector configSelector, IProgressMonitor monitor)
 		{
 			return CSharpBindingCompilerManager.Compile (projectItems, configuration, configSelector, monitor);
 		}
-		
+
 		public ConfigurationParameters CreateCompilationParameters (XmlElement projectOptions)
 		{
-			CSharpCompilerParameters pars = new CSharpCompilerParameters ();
+			PlayScriptCompilerParameters pars = new PlayScriptCompilerParameters ();
 			if (projectOptions != null) {
 				string platform = projectOptions.GetAttribute ("Platform");
 				if (SupportedPlatforms.Contains (platform))
@@ -93,41 +93,41 @@ namespace MonoDevelop.CSharp
 			}
 			return pars;
 		}
-	
+
 		public ProjectParameters CreateProjectParameters (XmlElement projectOptions)
 		{
-			return new CSharpProjectParameters ();
+			return new PlayScriptProjectParameters ();
 		}
-		
+
 		public string SingleLineCommentTag { get { return "//"; } }
 		public string BlockCommentStartTag { get { return "/*"; } }
 		public string BlockCommentEndTag { get { return "*/"; } }
-		
+
 		public CodeDomProvider GetCodeDomProvider ()
 		{
 			if (provider == null)
 				provider = new CSharpEnhancedCodeProvider ();
 			return provider;
 		}
-		
+
 		public FilePath GetFileName (FilePath baseName)
 		{
-			return baseName + ".cs";
+			return baseName + ".as";
 		}
-		
-//		public IParser Parser {
-//			get { 
-//				return null; 
-//			}
-//		}
-//		
-//		CSharpRefactorer refactorer = new CSharpRefactorer ();
-//		public IRefactorer Refactorer {
-//			get { 
-//				return refactorer; 
-//			}
-//		}
-		
+
+		//		public IParser Parser {
+		//			get { 
+		//				return null; 
+		//			}
+		//		}
+		//		
+		//		CSharpRefactorer refactorer = new CSharpRefactorer ();
+		//		public IRefactorer Refactorer {
+		//			get { 
+		//				return refactorer; 
+		//			}
+		//		}
+
 		public ClrVersion[] GetSupportedClrVersions ()
 		{
 			return new ClrVersion[] { 
@@ -139,9 +139,5 @@ namespace MonoDevelop.CSharp
 			};
 		}
 	}
-	
-	internal static class Counters
-	{
-		public static Counter ResolveTime = InstrumentationService.CreateCounter ("Resolve Time", "Timing");
-	}
+
 }
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/AstAmbience.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/AstAmbience.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/AstAmbience.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/AstAmbience.cs	2013-05-20 13:08:33.000000000 -0700
@@ -24,19 +24,19 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using System.Collections.Generic;
 using System.Linq;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class AstAmbience
 	{
 		CSharpFormattingOptions options;
 		
-		public AstAmbience (ICSharpCode.NRefactory.CSharp.CSharpFormattingOptions options)
+		public AstAmbience (ICSharpCode.NRefactory.PlayScript.CSharpFormattingOptions options)
 		{
 			this.options = options;
 		}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/AstStockIcons.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/AstStockIcons.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/AstStockIcons.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/AstStockIcons.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,9 +28,9 @@ using System;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	// Copied from StockIcons.cs and extended for the c# ast (c# AST shouldn't be in Ide)
 	public static class AstStockIcons
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpAmbience.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpAmbience.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpAmbience.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpAmbience.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,18 +28,18 @@ using System.Linq;
 using System.Collections.Generic;
 using System.Text;
 using System.CodeDom;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide;
 using System.Collections.ObjectModel;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.IO;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class CSharpAmbience : Ambience
 	{
@@ -73,11 +73,13 @@ namespace MonoDevelop.CSharp
 			"fixed",
 			"float",
 			"for",
-			"foreach",
+			"function",
 			"goto",
 			"if",
 			"implicit",
+			"import",
 			"in",
+			"indexer",
 			"int",
 			"interface",
 			"internal",
@@ -93,6 +95,7 @@ namespace MonoDevelop.CSharp
 			"override",
 			"params",
 			"private",
+			"property",
 			"protected",
 			"public",
 			"readonly",
@@ -185,7 +188,7 @@ namespace MonoDevelop.CSharp
 			netToCSharpTypes ["System.Double"] = "double";
 			netToCSharpTypes ["System.Decimal"] = "decimal";
 			netToCSharpTypes ["System.String"] = "string";
-			
+
 			classTypes [TypeKind.Class] = "class";
 			classTypes [TypeKind.Enum] = "enum";
 			classTypes [TypeKind.Interface] = "interface";
@@ -193,7 +196,7 @@ namespace MonoDevelop.CSharp
 			classTypes [TypeKind.Delegate] = "delegate";
 		}
 		
-		public CSharpAmbience () : base ("C#")
+		public CSharpAmbience () : base ("PlayScript")
 		{
 		}
 		
@@ -203,11 +206,11 @@ namespace MonoDevelop.CSharp
 		{
 			if (entity == null)
 				throw new ArgumentNullException ("entity");
-			return MonoDevelop.CSharp.Completion.MemberCompletionData.CreateTooltipInformation (
+			return MonoDevelop.PlayScript.Completion.MemberCompletionData.CreateTooltipInformation (
 				entity.Compilation,
 				null,
 				null,
-				new CSharpFormattingPolicy (),
+				new PlayScriptFormattingPolicy (),
 				entity,
 				false,
 				true);
@@ -663,7 +666,7 @@ namespace MonoDevelop.CSharp
 			}
 			
 			if (settings.IncludeParameters) {
-//			CSharpFormattingPolicy policy = GetPolicy (settings);
+//			PlayScriptFormattingPolicy policy = GetPolicy (settings);
 //			if (policy.BeforeMethodCallParentheses)
 //				result.Append (settings.Markup (" "));
 				result.Append (settings.Markup ("("));
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs	2013-05-20 13:08:33.000000000 -0700
@@ -35,13 +35,13 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Execution;
 using MonoDevelop.Core.Assemblies;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Threading;
 using MonoDevelop.Ide;
 using MonoDevelop.Core.ProgressMonitoring;
 
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	static class CSharpBindingCompilerManager
 	{	
@@ -56,8 +56,8 @@ namespace MonoDevelop.CSharp
 
 		public static BuildResult Compile (ProjectItemCollection projectItems, DotNetProjectConfiguration configuration, ConfigurationSelector configSelector, IProgressMonitor monitor)
 		{
-			var compilerParameters = (CSharpCompilerParameters)configuration.CompilationParameters ?? new CSharpCompilerParameters ();
-			var projectParameters = (CSharpProjectParameters)configuration.ProjectParameters ?? new CSharpProjectParameters ();
+			var compilerParameters = (PlayScriptCompilerParameters)configuration.CompilationParameters ?? new PlayScriptCompilerParameters ();
+			var projectParameters = (PlayScriptProjectParameters)configuration.ProjectParameters ?? new PlayScriptProjectParameters ();
 			
 			FilePath outputName = configuration.CompiledOutputName;
 			string responseFileName = Path.GetTempFileName ();
@@ -93,7 +93,7 @@ namespace MonoDevelop.CSharp
 			try {
 				compilerName = GetCompilerName (runtime, configuration.TargetFramework);
 			} catch (Exception e) {
-				string message = "Could not obtain a C# compiler";
+				string message = "Could not obtain a PlayScript compiler";
 				monitor.ReportError (message, e);
 				return null;
 			}
@@ -191,7 +191,7 @@ namespace MonoDevelop.CSharp
 			}
 
 			if (compilerParameters.LangVersion != LangVersion.Default) {
-				var langVersionString = CSharpCompilerParameters.TryLangVersionToString (compilerParameters.LangVersion);
+				var langVersionString = PlayScriptCompilerParameters.TryLangVersionToString (compilerParameters.LangVersion);
 				if (langVersionString == null) {
 					string message = "Invalid LangVersion enum value '" + compilerParameters.LangVersion.ToString () + "'";
 					monitor.ReportError (message, null);
@@ -233,7 +233,7 @@ namespace MonoDevelop.CSharp
 				//HACK: to ignore the platform flag for Mono <= 2.4, because gmcs didn't support it
 				if (runtime.RuntimeId == "Mono" && runtime.AssemblyContext.GetAssemblyLocation ("Mono.Debugger.Soft", null) == null) {
 					LoggingService.LogWarning ("Mono runtime '" + runtime.DisplayName + 
-					                           "' appears to be too old to support the 'platform' C# compiler flag.");
+					                           "' appears to be too old to support the 'platform' PlayScript compiler flag.");
 				} else {
 					sb.AppendLine ("/platform:" + compilerParameters.PlatformTarget);
 				}
@@ -348,7 +348,7 @@ namespace MonoDevelop.CSharp
 				} catch (IOException) {
 				}
 				result.AddError ("The compiler appears to have crashed. Check the build output pad for details.");
-				LoggingService.LogError ("C# compiler crashed. Response file '{0}', stdout file '{1}', stderr file '{2}'",
+				LoggingService.LogError ("PlayScript compiler crashed. Response file '{0}', stdout file '{1}', stderr file '{2}'",
 				                         responseFileName, output, error);
 			} else {
 				FileService.DeleteFile (responseFileName);
@@ -357,14 +357,97 @@ namespace MonoDevelop.CSharp
 			}
 			return result;
 		}
-		
+
+		static string GetExternalCompilerPath()
+		{
+			string compPath;
+			string asmPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
+
+			if (System.Environment.OSVersion.Platform == PlatformID.Unix || 
+				System.Environment.OSVersion.Platform == PlatformID.MacOSX) {
+
+				string playscriptHome = System.Environment.GetEnvironmentVariable("PLAYSCRIPT_HOME");
+				if (!String.IsNullOrEmpty(playscriptHome)) {
+					compPath = System.IO.Path.Combine(playscriptHome, "bin/playc");
+					if (File.Exists (compPath)) {
+						return compPath;
+					}
+				}
+
+				// Installed as a framework, etc.
+				compPath = "/usr/bin/playc";
+				if (File.Exists (compPath)) {
+					return compPath;
+				}
+
+				// Installed in the user's home folder
+//				compPath = System.Environment.GetEnvironmentVariable ("HOME") + "/PlayScript/bin/playc";
+//				if (File.Exists (compPath)) {
+//					return compPath;
+//				}
+
+				// The compiler bundled with the plugin
+				compPath = System.IO.Path.Combine (asmPath + "/playc");
+				if (File.Exists (compPath)) {
+					Mono.Unix.Native.Syscall.chmod (compPath, Mono.Unix.Native.FilePermissions.S_IXOTH | 
+					                                Mono.Unix.Native.FilePermissions.S_IROTH | 
+					                                Mono.Unix.Native.FilePermissions.S_IRWXU | 
+					                                Mono.Unix.Native.FilePermissions.S_IRWXG);
+				}
+
+				return compPath;
+
+			} else if (System.Environment.OSVersion.Platform == PlatformID.Win32NT ||
+			           System.Environment.OSVersion.Platform == PlatformID.Win32Windows) {
+
+				string progFilePath;
+
+				string playscriptHome = System.Environment.GetEnvironmentVariable("PLAYSCRIPT_HOME");
+				if (!String.IsNullOrEmpty(playscriptHome)) {
+					compPath = System.IO.Path.Combine(playscriptHome, "bin\\playc.bat");
+					if (File.Exists (compPath)) {
+						return compPath;
+					}
+				}
+
+				if (8 == IntPtr.Size 
+					|| (!String.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PROCESSOR_ARCHITEW6432")))) {
+					progFilePath = System.Environment.GetEnvironmentVariable ("ProgramFiles(x86)");
+				} else {
+					progFilePath = System.Environment.GetEnvironmentVariable("ProgramFiles");
+				}
+
+				// Installed in Program Files (x86)
+				compPath = progFilePath + "\\PlayScript\\bin\\playc.bat";
+				if (File.Exists (compPath)) {
+					return compPath;
+				}
+
+				// The compiler bundled with the plugin
+				compPath = System.IO.Path.Combine (asmPath + "\\playc.bat");
+				if (File.Exists (compPath)) {
+					// Do nothing..
+				}
+
+				return compPath;
+			}
+
+			return null;
+		}
+
 		static string GetCompilerName (TargetRuntime runtime, TargetFramework fx)
 		{
-			string csc = runtime.GetToolPath (fx, "csc");
-			if (csc != null)
-				return csc;
-			else {
-				string message = GettextCatalog.GetString ("C# compiler not found for {0}.", fx.Name);
+			string playc = runtime.GetToolPath (fx, "playc");
+			if (playc == null) {
+				playc = GetExternalCompilerPath ();
+			}
+			if (playc == null) {
+				playc = runtime.GetToolPath (fx, "csc");
+			}
+			if (playc != null) {
+				return playc;
+			} else {
+				string message = GettextCatalog.GetString ("PlayScript compiler not found for {0}.", fx.Name);
 				LoggingService.LogError (message);
 				throw new Exception (message);
 			}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -34,12 +34,12 @@ using System.IO;
 using System.CodeDom;
 using System.CodeDom.Compiler;
 using Microsoft.CSharp;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.Cecil;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	[System.ComponentModel.DesignerCategory ("Code")]
 	public class CSharpEnhancedCodeProvider : CSharpCodeProvider
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs	2013-05-20 13:08:33.000000000 -0700
@@ -40,12 +40,12 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class CSharpLanguageBinding : IDotNetLanguageBinding
 	{
@@ -79,7 +79,7 @@ namespace MonoDevelop.CSharp
 		
 		public ConfigurationParameters CreateCompilationParameters (XmlElement projectOptions)
 		{
-			CSharpCompilerParameters pars = new CSharpCompilerParameters ();
+			PlayScriptCompilerParameters pars = new PlayScriptCompilerParameters ();
 			if (projectOptions != null) {
 				string platform = projectOptions.GetAttribute ("Platform");
 				if (SupportedPlatforms.Contains (platform))
@@ -96,7 +96,7 @@ namespace MonoDevelop.CSharp
 	
 		public ProjectParameters CreateProjectParameters (XmlElement projectOptions)
 		{
-			return new CSharpProjectParameters ();
+			return new PlayScriptProjectParameters ();
 		}
 		
 		public string SingleLineCommentTag { get { return "//"; } }
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs	2013-05-20 13:08:33.000000000 -0700
@@ -24,12 +24,12 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Components.Commands;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public enum ExpandCommands
 	{
@@ -42,7 +42,7 @@ namespace MonoDevelop.CSharp
 		protected override void Run ()
 		{
 			MonoDevelop.Ide.Gui.Document doc = IdeApp.Workbench.ActiveDocument;
-			CSharpParser parser = new CSharpParser ();
+			PlayScriptParser parser = new PlayScriptParser ();
 			var unit = parser.Parse (doc.Editor);
 			if (unit == null)
 				return;
@@ -67,7 +67,7 @@ namespace MonoDevelop.CSharp
 		protected override void Run ()
 		{
 			MonoDevelop.Ide.Gui.Document doc = IdeApp.Workbench.ActiveDocument;
-			CSharpParser parser = new CSharpParser ();
+			PlayScriptParser parser = new PlayScriptParser ();
 			var unit = parser.Parse (doc.Editor);
 			if (unit == null)
 				return;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,13 +31,13 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Core;
-using MonoDevelop.CSharp.Completion;
+using MonoDevelop.PlayScript.Completion;
 using System.Linq;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class PathedDocumentTextEditorExtension : TextEditorExtension, IPathedDocument
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs	2013-05-20 13:08:33.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs	2013-05-20 13:08:33.000000000 -0700
@@ -40,46 +40,46 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
-	public class CSharpLanguageBinding : IDotNetLanguageBinding
+	public class PlayScriptLanguageBinding : IDotNetLanguageBinding
 	{
 		CSharpCodeProvider provider;
-		
+
 		// Keep the platforms combo of CodeGenerationPanelWidget in sync with this list
 		public static IList<string> SupportedPlatforms = new string[] { "anycpu", "x86", "x64", "itanium" };
-	
+
 		public string Language {
 			get {
-				return "C#";
+				return "PlayScript";
 			}
 		}
-		
+
 		public string ProjectStockIcon {
 			get { 
-				return "md-csharp-project";
+				return "md-playscript-project";
 			}
 		}
-		
-		
+
+
 		public bool IsSourceCodeFile (FilePath fileName)
 		{
-			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".cs");
+			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".play");
 		}
-		
+
 		public BuildResult Compile (ProjectItemCollection projectItems, DotNetProjectConfiguration configuration, ConfigurationSelector configSelector, IProgressMonitor monitor)
 		{
 			return CSharpBindingCompilerManager.Compile (projectItems, configuration, configSelector, monitor);
 		}
-		
+
 		public ConfigurationParameters CreateCompilationParameters (XmlElement projectOptions)
 		{
-			CSharpCompilerParameters pars = new CSharpCompilerParameters ();
+			PlayScriptCompilerParameters pars = new PlayScriptCompilerParameters ();
 			if (projectOptions != null) {
 				string platform = projectOptions.GetAttribute ("Platform");
 				if (SupportedPlatforms.Contains (platform))
@@ -93,41 +93,41 @@ namespace MonoDevelop.CSharp
 			}
 			return pars;
 		}
-	
+
 		public ProjectParameters CreateProjectParameters (XmlElement projectOptions)
 		{
-			return new CSharpProjectParameters ();
+			return new PlayScriptProjectParameters ();
 		}
-		
+
 		public string SingleLineCommentTag { get { return "//"; } }
 		public string BlockCommentStartTag { get { return "/*"; } }
 		public string BlockCommentEndTag { get { return "*/"; } }
-		
+
 		public CodeDomProvider GetCodeDomProvider ()
 		{
 			if (provider == null)
 				provider = new CSharpEnhancedCodeProvider ();
 			return provider;
 		}
-		
+
 		public FilePath GetFileName (FilePath baseName)
 		{
-			return baseName + ".cs";
+			return baseName + ".play";
 		}
-		
-//		public IParser Parser {
-//			get { 
-//				return null; 
-//			}
-//		}
-//		
-//		CSharpRefactorer refactorer = new CSharpRefactorer ();
-//		public IRefactorer Refactorer {
-//			get { 
-//				return refactorer; 
-//			}
-//		}
-		
+
+		//		public IParser Parser {
+		//			get { 
+		//				return null; 
+		//			}
+		//		}
+		//		
+		//		CSharpRefactorer refactorer = new CSharpRefactorer ();
+		//		public IRefactorer Refactorer {
+		//			get { 
+		//				return refactorer; 
+		//			}
+		//		}
+
 		public ClrVersion[] GetSupportedClrVersions ()
 		{
 			return new ClrVersion[] { 
@@ -139,9 +139,4 @@ namespace MonoDevelop.CSharp
 			};
 		}
 	}
-	
-	internal static class Counters
-	{
-		public static Counter ResolveTime = InstrumentationService.CreateCounter ("Resolve Time", "Timing");
-	}
 }
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,10 +27,10 @@ using System;
 using MonoDevelop.Ide.TypeSystem;
 using System.Text;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.IO;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 using System.Collections.Generic;
 using Mono.TextEditor.Highlighting;
@@ -41,7 +41,7 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Projects;
 using ICSharpCode.NRefactory.Semantics;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class SignatureMarkupCreator
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,7 +29,7 @@ using System.Linq;
 using System.Text;
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,11 +28,11 @@ using MonoDevelop.Ide.Gui;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System;
 using ICSharpCode.NRefactory;
 using System.Threading;
@@ -72,7 +72,7 @@ namespace MonoDevelop.CodeGeneration
 				var doc = Document;
 				var policyParent = doc.Project != null ? doc.Project.Policies : null;
 				var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (doc.Editor.MimeType);
-				var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+				var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 				return codePolicy.CreateOptions ();
 			}
 		}
@@ -139,7 +139,7 @@ namespace MonoDevelop.CodeGeneration
 			
 			var csResolver = parsedFile.GetResolver (Document.Compilation, Document.Editor.Caret.Location);
 			
-			var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+			var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 			return builder.ConvertType (fullType);
 		}
 		
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@
 
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
 using ICSharpCode.NRefactory.TypeSystem;
@@ -102,7 +102,7 @@ namespace MonoDevelop.CodeGeneration
 			{
 				var constructorDeclaration = new ConstructorDeclaration () {
 					Name = Options.EnclosingType.Name,
-					Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public,
+					Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public,
 					Body = new BlockStatement ()
 				};
 				
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@
 
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
 using ICSharpCode.NRefactory.TypeSystem;
@@ -96,7 +96,7 @@ namespace MonoDevelop.CodeGeneration
 				methodDeclaration.Name = "Equals";
 
 				methodDeclaration.ReturnType = new PrimitiveType ("bool");
-				methodDeclaration.Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public | ICSharpCode.NRefactory.CSharp.Modifiers.Override;
+				methodDeclaration.Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public | ICSharpCode.NRefactory.PlayScript.Modifiers.Override;
 				methodDeclaration.Body = new BlockStatement ();
 				methodDeclaration.Parameters.Add (new ParameterDeclaration (new PrimitiveType ("object"), "obj"));
 				var paramId = new IdentifierExpression ("obj");
@@ -140,7 +140,7 @@ namespace MonoDevelop.CodeGeneration
 				methodDeclaration.Name = "GetHashCode";
 
 				methodDeclaration.ReturnType = new PrimitiveType ("int");
-				methodDeclaration.Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public | ICSharpCode.NRefactory.CSharp.Modifiers.Override;
+				methodDeclaration.Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public | ICSharpCode.NRefactory.PlayScript.Modifiers.Override;
 				methodDeclaration.Body = new BlockStatement ();
 
 				binOp = null;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/GenerateCodeWindow.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/GenerateCodeWindow.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/GenerateCodeWindow.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/GenerateCodeWindow.cs	2013-05-20 13:08:33.000000000 -0700
@@ -32,8 +32,9 @@ using MonoDevelop.Refactoring;
 using System.Collections.Generic;
 using MonoDevelop.Ide;
 using Mono.TextEditor.PopupWindow;
+using MonoDevelop.CodeGeneration;
 
-namespace MonoDevelop.CodeGeneration
+namespace MonoDevelop.PlayScript.CodeGeneration
 {
 	public partial class GenerateCodeWindow : Gtk.Window
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,7 +27,7 @@ using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System;
@@ -81,7 +81,7 @@ namespace MonoDevelop.CodeGeneration
 				foreach (var baseType in Options.EnclosingType.DirectBaseTypes) {
 					if (baseType.Kind != TypeKind.Interface)
 						continue;
-					foreach (var t in ICSharpCode.NRefactory.CSharp.Refactoring.ImplementInterfaceAction.CollectMembersToImplement (type, baseType, false)) {
+					foreach (var t in ICSharpCode.NRefactory.PlayScript.Refactoring.ImplementInterfaceAction.CollectMembersToImplement (type, baseType, false)) {
 						yield return t;
 					}
 				}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,7 +28,7 @@ using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@
 
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,7 +29,7 @@ using MonoDevelop.Components;
 using Gtk;
 using MonoDevelop.Ide.Gui;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,7 +29,7 @@ using MonoDevelop.Components;
 using Gtk;
 using MonoDevelop.Ide.Gui;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -33,12 +33,12 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.CodeCompletion;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	abstract class AbstractParameterDataProvider : ParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,29 +25,29 @@
 // THE SOFTWARE.
 using System;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.CodeCompletion;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Linq;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Text;
 using MonoDevelop.Ide.CodeTemplates;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp.Completion;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class ArrayTypeParameterDataProvider : AbstractParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,31 +26,32 @@
 
 using System;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.CodeCompletion;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Linq;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Text;
 using MonoDevelop.Ide.CodeTemplates;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp.Completion;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using Mono.TextEditor;
 using MonoDevelop.Components.Commands;
 using MonoDevelop.CodeGeneration;
+using MonoDevelop.PlayScript.CodeGeneration;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	
 	public class CSharpCompletionTextEditorExtension : CompletionTextEditorExtension, IParameterCompletionDataFactory, ITextEditorMemberPositionProvider
@@ -109,15 +110,15 @@ namespace MonoDevelop.CSharp.Completion
 			}
 		}
 		
-		CSharpFormattingPolicy policy;
-		public CSharpFormattingPolicy FormattingPolicy {
+		PlayScriptFormattingPolicy policy;
+		public PlayScriptFormattingPolicy FormattingPolicy {
 			get {
 				if (policy == null) {
-					IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
+					IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
 					if (Document.Project != null && Document.Project.Policies != null) {
-						policy = base.Document.Project.Policies.Get<CSharpFormattingPolicy> (types);
+						policy = base.Document.Project.Policies.Get<PlayScriptFormattingPolicy> (types);
 					} else {
-						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 					}
 				}
 				return policy;
@@ -278,9 +279,9 @@ namespace MonoDevelop.CSharp.Completion
 
 			if (Document.HasProject) {
 				var configuration = Document.Project.GetConfiguration (MonoDevelop.Ide.IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration;
-				var par = configuration != null ? configuration.CompilationParameters as CSharpCompilerParameters : null;
+				var par = configuration != null ? configuration.CompilationParameters as PlayScriptCompilerParameters : null;
 				if (par != null)
-					engine.LanguageVersion = MonoDevelop.CSharp.Parser.TypeSystemParser.ConvertLanguageVersion (par.LangVersion);
+					engine.LanguageVersion = MonoDevelop.PlayScript.Parser.TypeSystemParser.ConvertLanguageVersion (par.LangVersion);
 			}
 
 			engine.FormattingPolicy = FormattingPolicy.CreateOptions ();
@@ -468,7 +469,7 @@ namespace MonoDevelop.CSharp.Completion
 //			var symbols = new Dictionary<string, string> ();
 //			var cp = new ProjectDomCompletionDataList ();
 //			foreach (DotNetProjectConfiguration conf in Document.Project.Configurations) {
-//				var cparams = conf.CompilationParameters as CSharpCompilerParameters;
+//				var cparams = conf.CompilationParameters as PlayScriptCompilerParameters;
 //				if (cparams != null) {
 //					string[] syms = cparams.DefineSymbols.Split (';');
 //					foreach (string s in syms) {
@@ -563,7 +564,7 @@ namespace MonoDevelop.CSharp.Completion
 			if (i == cursor) 
 				return 1; // parameters are 1 based
 			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
-			var engine = new CSharpIndentEngine (MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types));
+			var engine = new CSharpIndentEngine (MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types));
 			int index = memberStart + 1;
 			int parentheses = 0;
 			int bracket = 0;
@@ -867,7 +868,7 @@ namespace MonoDevelop.CSharp.Completion
 			IEnumerable<ICompletionData> ICompletionDataFactory.CreateCodeTemplateCompletionData ()
 			{
 				var result = new CompletionDataList ();
-				CodeTemplateService.AddCompletionDataForMime ("text/x-csharp", result);
+				CodeTemplateService.AddCompletionDataForMime ("text/x-playscript", result);
 				return result;
 			}
 			
@@ -877,7 +878,7 @@ namespace MonoDevelop.CSharp.Completion
 				if (project == null)
 					yield break;
 				var configuration = project.GetConfiguration (MonoDevelop.Ide.IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration;
-				var par = configuration != null ? configuration.CompilationParameters as CSharpCompilerParameters : null;
+				var par = configuration != null ? configuration.CompilationParameters as PlayScriptCompilerParameters : null;
 				if (par == null)
 					yield break;
 				foreach (var define in par.DefineSymbols.Split (';', ',', ' ', '\t').Where (s => !string.IsNullOrWhiteSpace (s)))
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,13 +26,13 @@
 using System;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class ConstructorParameterDataProvider : MethodParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,20 +31,20 @@ using System.Xml;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class DelegateDataProvider : AbstractParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs	2013-05-20 13:08:33.000000000 -0700
@@ -30,13 +30,13 @@ using System.Linq;
 using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class EventCreationCompletionData : CompletionData
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -32,18 +32,18 @@ using System.Xml;
 
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class IndexerParameterDataProvider : AbstractParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs	2013-05-20 13:08:33.000000000 -0700
@@ -34,20 +34,20 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Projects;
 using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.Documentation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.IO;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class MemberCompletionData : CompletionData, IEntityCompletionData
 	{
@@ -67,7 +67,7 @@ namespace MonoDevelop.CSharp.Completion
 			}
 		}
 		
-		MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy Policy {
+		MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy Policy {
 			get {
 				return editorCompletion.FormattingPolicy;
 			}
@@ -540,12 +540,12 @@ namespace MonoDevelop.CSharp.Completion
 			return CreateTooltipInformation (editorCompletion.UnresolvedFileCompilation, editorCompletion.CSharpUnresolvedFile, resolver, editorCompletion.TextEditorData, editorCompletion.FormattingPolicy, entity, smartWrap);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
 		{
 			return CreateTooltipInformation (compilation, file, null, textEditorData, formattingPolicy, entity, smartWrap, createFooter);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, CSharpResolver resolver, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, CSharpResolver resolver, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			if (resolver == null)
@@ -601,7 +601,7 @@ namespace MonoDevelop.CSharp.Completion
 			return tooltipInfo;
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IType type, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IType type, bool smartWrap, bool createFooter = false)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			var resolver = file != null ? file.GetResolver (compilation, textEditorData.Caret.Location) : new CSharpResolver (compilation);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -34,14 +34,14 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using MonoDevelop.Ide.CodeCompletion;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class MethodParameterDataProvider : AbstractParameterDataProvider
 	{
@@ -121,7 +121,7 @@ namespace MonoDevelop.CSharp.Completion
 			return CreateTooltipInformation (compilation, file, ext.TextEditorData, ext.FormattingPolicy, entity, currentParameter, smartWrap);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IParameterizedMember entity, int currentParameter, bool smartWrap)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IParameterizedMember entity, int currentParameter, bool smartWrap)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			var resolver = file.GetResolver (compilation, textEditorData.Caret.Location);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,12 +31,12 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class NewOverrideCompletionData : CompletionData
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/TypeParameterDataProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/TypeParameterDataProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/TypeParameterDataProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/TypeParameterDataProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,18 +31,18 @@ using System.Xml;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class TypeParameterDataProvider: IParameterDataProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,7 +29,7 @@ using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class VariableCompletionData : CompletionData, IVariableCompletionData
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,20 +28,20 @@ using System.Collections.Generic;
 
 
 using Mono.TextEditor;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects.Policies;
 using System.Linq;
 using MonoDevelop.Ide.CodeFormatting;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
-using MonoDevelop.CSharp.Refactoring;
+using MonoDevelop.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class CSharpFormatter : AbstractAdvancedFormatter
 	{
-		static internal readonly string MimeType = "text/x-csharp";
+		static internal readonly string MimeType = "text/x-playscript";
 
 		public override bool SupportsOnTheFlyFormatting { get { return true; } }
 
@@ -54,7 +54,7 @@ namespace MonoDevelop.CSharp.Formatting
 			if (lineSegment == null)
 				return;
 
-			var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+			var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 			var textPolicy = policyParent.Get<TextStylePolicy> (mimeTypeChain);
 			var tracker = new DocumentStateTracker<CSharpIndentEngine> (new CSharpIndentEngine (policy, textPolicy), data);
 			tracker.UpdateEngine (lineSegment.Offset);
@@ -80,7 +80,7 @@ namespace MonoDevelop.CSharp.Formatting
 		}
 
 
-		public string FormatText (CSharpFormattingPolicy policy, TextStylePolicy textPolicy, string mimeType, string input, int startOffset, int endOffset)
+		public string FormatText (PlayScriptFormattingPolicy policy, TextStylePolicy textPolicy, string mimeType, string input, int startOffset, int endOffset)
 		{
 			var data = new TextEditorData ();
 			data.Document.SuppressHighlightUpdate = true;
@@ -98,7 +98,7 @@ namespace MonoDevelop.CSharp.Formatting
 			// System.Console.WriteLine (data.Text.Replace (" ", ".").Replace ("\t", "->"));
 			// System.Console.WriteLine ("-----");
 
-			var parser = new CSharpParser ();
+			var parser = new PlayScriptParser ();
 			var compilationUnit = parser.Parse (data);
 			bool hadErrors = parser.HasErrors;
 			
@@ -111,7 +111,7 @@ namespace MonoDevelop.CSharp.Formatting
 			var originalVersion = data.Document.Version;
 
 			var textEditorOptions = data.CreateNRefactoryTextEditorOptions ();
-			var formattingVisitor = new ICSharpCode.NRefactory.CSharp.CSharpFormatter (
+			var formattingVisitor = new ICSharpCode.NRefactory.PlayScript.CSharpFormatter (
 				policy.CreateOptions (),
 				textEditorOptions
 			) {
@@ -127,7 +127,7 @@ namespace MonoDevelop.CSharp.Formatting
 			}
 
 			// check if the formatter has produced errors
-			parser = new CSharpParser ();
+			parser = new PlayScriptParser ();
 			parser.Parse (data);
 			if (parser.HasErrors) {
 				LoggingService.LogError ("C# formatter produced source code errors. See console for output.");
@@ -143,7 +143,7 @@ namespace MonoDevelop.CSharp.Formatting
 
 		public override string FormatText (PolicyContainer policyParent, IEnumerable<string> mimeTypeChain, string input, int startOffset, int endOffset)
 		{
-			var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+			var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 			var textPolicy = policyParent.Get<TextStylePolicy> (mimeTypeChain);
 
 			return FormatText (policy, textPolicy, mimeTypeChain.First (), input, startOffset, endOffset);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs	2013-05-20 13:08:33.000000000 -0700
@@ -1,5 +1,5 @@
 // 
-// CSharpFormattingPolicy.cs
+// PlayScriptFormattingPolicy.cs
 //  
 // Author:
 //       Mike Krüger <mkrueger@novell.com>
@@ -32,12 +32,12 @@ using System.Xml;
 using System.Text;
 using System.Linq;
 using MonoDevelop.Projects.Policies;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
-	[PolicyType ("C# formatting")]
-	public class CSharpFormattingPolicy : IEquatable<CSharpFormattingPolicy>
+	[PolicyType ("PlayScript formatting")]
+	public class PlayScriptFormattingPolicy : IEquatable<PlayScriptFormattingPolicy>
 	{
 		CSharpFormattingOptions options = FormattingOptionsFactory.CreateMono ();
 		
@@ -51,9 +51,9 @@ namespace MonoDevelop.CSharp.Formatting
 			set;
 		}
 		
-		public CSharpFormattingPolicy Clone ()
+		public PlayScriptFormattingPolicy Clone ()
 		{
-			return new CSharpFormattingPolicy (options.Clone ());
+			return new PlayScriptFormattingPolicy (options.Clone ());
 		}
 
 		public CSharpFormattingOptions CreateOptions ()
@@ -61,13 +61,13 @@ namespace MonoDevelop.CSharp.Formatting
 			return options;
 		}
 		
-		static CSharpFormattingPolicy ()
+		static PlayScriptFormattingPolicy ()
 		{
 			if (!PolicyService.InvariantPolicies.ReadOnly)
-				 PolicyService.InvariantPolicies.Set<CSharpFormattingPolicy> (new CSharpFormattingPolicy (), "text/x-csharp");
+				 PolicyService.InvariantPolicies.Set<PlayScriptFormattingPolicy> (new PlayScriptFormattingPolicy (), "text/x-playscript");
 		}
 		
-		protected CSharpFormattingPolicy (CSharpFormattingOptions options)
+		protected PlayScriptFormattingPolicy (CSharpFormattingOptions options)
 		{
 			this.options = options;
 		}
@@ -1541,27 +1541,27 @@ namespace MonoDevelop.CSharp.Formatting
 
 		#endregion
 
-		public CSharpFormattingPolicy ()
+		public PlayScriptFormattingPolicy ()
 		{
 			this.options = FormattingOptionsFactory.CreateMono ();
 		}
 		
-		public static CSharpFormattingPolicy Load (FilePath selectedFile)
+		public static PlayScriptFormattingPolicy Load (FilePath selectedFile)
 		{
 			using (var stream = System.IO.File.OpenRead (selectedFile)) {
 				return Load (stream);
 			}
 		}
 		
-		public static CSharpFormattingPolicy Load (System.IO.Stream input)
+		public static PlayScriptFormattingPolicy Load (System.IO.Stream input)
 		{
-			CSharpFormattingPolicy result = new CSharpFormattingPolicy ();
+			PlayScriptFormattingPolicy result = new PlayScriptFormattingPolicy ();
 			result.Name = "noname";
 			using (XmlTextReader reader = new XmlTextReader (input)) {
 				while (reader.Read ()) {
 					if (reader.NodeType == XmlNodeType.Element) {
 						if (reader.LocalName == "Property") {
-							var info = typeof (CSharpFormattingPolicy).GetProperty (reader.GetAttribute ("name"));
+							var info = typeof (PlayScriptFormattingPolicy).GetProperty (reader.GetAttribute ("name"));
 							string valString = reader.GetAttribute ("value");
 							object value;
 							if (info.PropertyType == typeof (bool)) {
@@ -1592,7 +1592,7 @@ namespace MonoDevelop.CSharp.Formatting
 				writer.IndentChar = '\t';
 				writer.WriteStartElement ("FormattingProfile");
 				writer.WriteAttributeString ("name", Name);
-				foreach (PropertyInfo info in typeof (CSharpFormattingPolicy).GetProperties ()) {
+				foreach (PropertyInfo info in typeof (PlayScriptFormattingPolicy).GetProperties ()) {
 					if (info.GetCustomAttributes (false).Any (o => o.GetType () == typeof(ItemPropertyAttribute))) {
 						writer.WriteStartElement ("Property");
 						writer.WriteAttributeString ("name", info.Name);
@@ -1604,9 +1604,9 @@ namespace MonoDevelop.CSharp.Formatting
 			}
 		}
 		
-		public bool Equals (CSharpFormattingPolicy other)
+		public bool Equals (PlayScriptFormattingPolicy other)
 		{
-			foreach (PropertyInfo info in typeof (CSharpFormattingPolicy).GetProperties ()) {
+			foreach (PropertyInfo info in typeof (PlayScriptFormattingPolicy).GetProperties ()) {
 				if (info.GetCustomAttributes (false).Any (o => o.GetType () == typeof(ItemPropertyAttribute))) {
 					object val = info.GetValue (this, null);
 					object otherVal = info.GetValue (other, null);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,9 +31,9 @@ using System.Xml;
 using MonoDevelop.Ide.Gui.Dialogs;
 using System;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
-	class CSharpFormattingPolicyPanel : MimeTypePolicyOptionsPanel<CSharpFormattingPolicy>
+	class CSharpFormattingPolicyPanel : MimeTypePolicyOptionsPanel<PlayScriptFormattingPolicy>
 	{
 		CSharpFormattingPolicyPanelWidget panel;
 		
@@ -48,12 +48,12 @@ namespace MonoDevelop.CSharp.Formatting
 			return panel = new CSharpFormattingPolicyPanelWidget ();
 		}
 		
-		protected override void LoadFrom (CSharpFormattingPolicy policy)
+		protected override void LoadFrom (PlayScriptFormattingPolicy policy)
 		{
 			panel.Policy = policy.Clone ();
 		}
 		
-		protected override CSharpFormattingPolicy GetPolicy ()
+		protected override PlayScriptFormattingPolicy GetPolicy ()
 		{
 			// return cloned policy
 			return panel.Policy;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,14 +29,14 @@ using MonoDevelop.Core;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 using MonoDevelop.Ide.CodeFormatting;
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	[System.ComponentModel.ToolboxItem(true)]
 	public partial class CSharpFormattingPolicyPanelWidget : Gtk.Bin
 	{
 		Mono.TextEditor.TextEditor texteditor = new Mono.TextEditor.TextEditor ();
 //		Gtk.ListStore model = new Gtk.ListStore (typeof(string));
-//		List<CSharpFormattingPolicy> policies = new List<CSharpFormattingPolicy> ();
+//		List<PlayScriptFormattingPolicy> policies = new List<PlayScriptFormattingPolicy> ();
 		const string example = @"using System;
 namespace Example { 
 	public class Test
@@ -49,8 +49,8 @@ namespace Example { 
 		}
 	}
 }";
-		CSharpFormattingPolicy policy;
-		public CSharpFormattingPolicy Policy {
+		PlayScriptFormattingPolicy policy;
+		public PlayScriptFormattingPolicy Policy {
 			get {
 				return policy;
 			}
@@ -63,7 +63,7 @@ namespace Example { 
 		public CSharpFormattingPolicyPanelWidget ()
 		{
 			this.Build ();
-			policy = new CSharpFormattingPolicy ();
+			policy = new PlayScriptFormattingPolicy ();
 			buttonEdit.Clicked += HandleButtonEditClicked;
 			
 			var options = MonoDevelop.SourceEditor.DefaultSourceEditorOptions.Instance;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -30,13 +30,13 @@ using MonoDevelop.Ide;
 using System.Reflection;
 using System.Collections.Generic;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp;
-namespace MonoDevelop.CSharp.Formatting
+using ICSharpCode.NRefactory.PlayScript;
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpFormattingProfileDialog : Gtk.Dialog
 	{
 		Mono.TextEditor.TextEditor texteditor = new Mono.TextEditor.TextEditor ();
-		CSharpFormattingPolicy profile;
+		PlayScriptFormattingPolicy profile;
 		Gtk.TreeStore indentOptions, bacePositionOptions, newLineOptions, whiteSpaceOptions, wrappingOptions;
 		
 		static Dictionary<Wrapping, string> arrayInitializerTranslationDictionary = new Dictionary<Wrapping, string> ();
@@ -411,7 +411,7 @@ namespace TestSpace {
 		protected ListStore comboBoxStore = new ListStore (typeof (string), typeof (string));
 		
 		
-		public CSharpFormattingProfileDialog (CSharpFormattingPolicy profile)
+		public CSharpFormattingProfileDialog (PlayScriptFormattingPolicy profile)
 		{
 			this.Build ();
 			this.profile = profile;
@@ -1083,7 +1083,7 @@ delegate void BarFoo ();
 		
 		static PropertyInfo GetPropertyByName (string name)
 		{
-			PropertyInfo info = typeof(CSharpFormattingPolicy).GetProperty (name);
+			PropertyInfo info = typeof(PlayScriptFormattingPolicy).GetProperty (name);
 			if (info == null)
 				throw new Exception (name + " property not found");
 			return info;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,7 +29,7 @@ using System;
 
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public enum GotoLabelIndentStyle {
 		// Place goto labels in the leftmost column
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs	2013-05-20 13:08:33.000000000 -0700
@@ -30,9 +30,9 @@ using System.Linq;
 using System.Text;
 
 using MonoDevelop.Ide.Gui.Content;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpIndentEngine : ICloneable, IDocumentStateEngine {
 		IndentStack stack;
@@ -71,10 +71,10 @@ namespace MonoDevelop.CSharp.Formatting
 		
 		int curLineNr;
 		int cursor;
-		CSharpFormattingPolicy policy;
+		PlayScriptFormattingPolicy policy;
 		TextStylePolicy textPolicy;
 
-		public CSharpIndentEngine (CSharpFormattingPolicy policy, TextStylePolicy textPolicy)
+		public CSharpIndentEngine (PlayScriptFormattingPolicy policy, TextStylePolicy textPolicy)
 		{
 			if (policy == null)
 				throw new ArgumentNullException ("policy");
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,9 +28,9 @@
 using System;
 using System.Text;
 
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpIndentEngine : ICloneable {
 		[Flags]
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs	2013-05-20 13:08:33.000000000 -0700
@@ -35,17 +35,17 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects;
 using MonoDevelop.Ide.CodeCompletion;
 
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
 using MonoDevelop.Ide.CodeTemplates;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	class IndentVirtualSpaceManager : Mono.TextEditor.IIndentationTracker
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs	2013-05-20 13:08:33.000000000 -0700
@@ -33,16 +33,16 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects;
 using MonoDevelop.Ide.CodeCompletion;
 
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using Mono.TextEditor;
 using MonoDevelop.Ide.CodeTemplates;
 using MonoDevelop.SourceEditor;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using ICSharpCode.NRefactory.Editor;
 using System.Linq;
 using System.Text;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class CSharpTextEditorIndentation : TextEditorExtension, ITextPasteHandler
 	{
@@ -56,12 +56,12 @@ namespace MonoDevelop.CSharp.Formatting
 
 		IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
 
-		CSharpFormattingPolicy Policy {
+		PlayScriptFormattingPolicy Policy {
 			get {
 				if (Document != null && Document.Project != null && Document.Project.Policies != null) {
-					return base.Document.Project.Policies.Get<CSharpFormattingPolicy> (types);
+					return base.Document.Project.Policies.Get<PlayScriptFormattingPolicy> (types);
 				}
-				return MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+				return MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 			}
 		}
 
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/Indent.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/Indent.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/Indent.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/Indent.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class Indent
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,7 +27,7 @@ using System;
 using System.Collections.Generic;
 using System.Linq;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class NewFormattingProfileDialog  : Gtk.Dialog
 	{
@@ -37,14 +37,14 @@ namespace MonoDevelop.CSharp.Formatting
 		}
 		
 		
-		public CSharpFormattingPolicy InitializeFrom {
+		public PlayScriptFormattingPolicy InitializeFrom {
 			get {
 				return policies[comboboxInitFrom.Active];
 			}
 		}
 		
-		List<CSharpFormattingPolicy> policies;
-		public NewFormattingProfileDialog (List<CSharpFormattingPolicy> policies)
+		List<PlayScriptFormattingPolicy> policies;
+		public NewFormattingProfileDialog (List<PlayScriptFormattingPolicy> policies)
 		{
 			this.Build ();
 			this.policies = policies;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,18 +28,18 @@ using MonoDevelop.Ide;
 using System;
 using System.Collections.Generic;
 using MonoDevelop.Projects.Policies;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using MonoDevelop.CSharp.Completion;
-using MonoDevelop.CSharp.Refactoring;
-using MonoDevelop.CSharp.Parser;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using MonoDevelop.PlayScript.Completion;
+using MonoDevelop.PlayScript.Refactoring;
+using MonoDevelop.PlayScript.Parser;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class OnTheFlyFormatter
 	{
@@ -150,7 +150,7 @@ namespace MonoDevelop.CSharp.Formatting
 		{
 			using (var stubData = TextEditorData.CreateImmutable (input)) {
 				stubData.Document.FileName = document.FileName;
-				var parser = document.HasProject ? new CSharpParser (TypeSystemParser.GetCompilerArguments (document.Project)) : new CSharpParser ();
+				var parser = document.HasProject ? new PlayScriptParser (TypeSystemParser.GetCompilerArguments (document.Project)) : new PlayScriptParser ();
 				var compilationUnit = parser.Parse (stubData);
 				bool hadErrors = parser.HasErrors;
 				if (hadErrors) {
@@ -164,9 +164,9 @@ namespace MonoDevelop.CSharp.Formatting
 					return null;
 				}
 				
-				var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+				var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 				
-				var formattingVisitor = new ICSharpCode.NRefactory.CSharp.CSharpFormatter (policy.CreateOptions (), document.Editor.CreateNRefactoryTextEditorOptions ());
+				var formattingVisitor = new ICSharpCode.NRefactory.PlayScript.CSharpFormatter (policy.CreateOptions (), document.Editor.CreateNRefactoryTextEditorOptions ());
 				formattingVisitor.FormattingMode = FormattingMode.Intrusive;
 				formattingVisitor.AddFormattingRegion (formattingRegion);
 
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -155,4 +155,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -27,7 +27,7 @@ THE SOFTWARE.
 -->
 
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -156,4 +156,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -155,4 +155,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="True">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="True">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -155,4 +155,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -155,4 +155,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -155,4 +155,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,7 +26,7 @@
 using System;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public class CSharpSelectionSurroundingProvider : DefaultSelectionSurroundingProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs	2013-05-20 13:08:33.000000000 -0700
@@ -33,26 +33,26 @@ using Mono.TextEditor.Highlighting;
 using Mono.TextEditor;
 using System.Xml;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide;
 using MonoDevelop.Ide.Tasks;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.SourceEditor.QuickTasks;
 using System.Threading;
 using System.Diagnostics;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Analysis;
+using ICSharpCode.NRefactory.PlayScript.Analysis;
 using ICSharpCode.NRefactory;
 using MonoDevelop.Refactoring;
 
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	static class StringHelper
 	{
@@ -142,7 +142,7 @@ namespace MonoDevelop.CSharp.Highlightin
 					parsedFile = parsedDocument.ParsedFile as CSharpUnresolvedFile;
 					if (guiDocument.Project != null && guiDocument.IsCompileableInProject) {
 						src = new CancellationTokenSource ();
-						var newResolverTask = guiDocument.GetSharedResolver ();
+						var newResolverTask = guiDocument.GetPlayScriptSharedResolver ();
 						var cancellationToken = src.Token;
 						System.Threading.Tasks.Task.Factory.StartNew (delegate {
 							var newResolver = newResolverTask.Result;
@@ -291,7 +291,7 @@ namespace MonoDevelop.CSharp.Highlightin
 				base.VisitIdentifierExpression (identifierExpression);
 				var result = resolver.Resolve (identifierExpression, cancellationToken);
 				if (result.IsError) {
-					QuickTasks.Add (new QuickTask (string.Format ("error CS0103: The name `{0}' does not exist in the current context", identifierExpression.Identifier), identifierExpression.StartLocation, Severity.Error));
+					QuickTasks.Add (new QuickTask (string.Format ("error CS0103: The name `{0}' does not exist in the current context", identifierExpression.Identifier), identifierExpression.StartLocation, ICSharpCode.NRefactory.CSharp.Severity.Error));
 				}
 			}
 
@@ -300,11 +300,11 @@ namespace MonoDevelop.CSharp.Highlightin
 				base.VisitMemberReferenceExpression (memberReferenceExpression);
 				var result = resolver.Resolve (memberReferenceExpression, cancellationToken) as UnknownMemberResolveResult;
 				if (result != null && result.TargetType.Kind != TypeKind.Unknown) {
-					QuickTasks.Add (new QuickTask (string.Format ("error CS0117: `{0}' does not contain a definition for `{1}'", result.TargetType.FullName, memberReferenceExpression.MemberName), memberReferenceExpression.MemberNameToken.StartLocation, Severity.Error));
+					QuickTasks.Add (new QuickTask (string.Format ("error CS0117: `{0}' does not contain a definition for `{1}'", result.TargetType.FullName, memberReferenceExpression.MemberName), memberReferenceExpression.MemberNameToken.StartLocation, ICSharpCode.NRefactory.CSharp.Severity.Error));
 				}
 			}
 
-			public override void VisitComment (ICSharpCode.NRefactory.CSharp.Comment comment)
+			public override void VisitComment (ICSharpCode.NRefactory.PlayScript.Comment comment)
 			{
 			}
 		}
@@ -406,7 +406,9 @@ namespace MonoDevelop.CSharp.Highlightin
 			bool loadRules = _rules == null;
 
 			if (loadRules) {
-				var provider = new ResourceStreamProvider (typeof(ResourceStreamProvider).Assembly, typeof(ResourceStreamProvider).Assembly.GetManifestResourceNames ().First (s => s.Contains ("CSharpSyntaxMode")));
+				var thisAssembly = System.Reflection.Assembly.GetCallingAssembly ();
+				var resourceName = thisAssembly.GetManifestResourceNames ().First (s => s.Contains ("PlayScriptSyntaxMode"));
+				var provider = new ResourceStreamProvider (thisAssembly, resourceName);
 				using (var reader = provider.Open ()) {
 					SyntaxMode baseMode = SyntaxMode.Read (reader);
 					_rules = new List<Rule> (baseMode.Rules.Where (r => r.Name != "Comment"));
@@ -724,7 +726,7 @@ namespace MonoDevelop.CSharp.Highlightin
 					if (project != null) {
 						var configuration = project.GetConfiguration (IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration;
 						if (configuration != null) {
-							var cparams = configuration.CompilationParameters as CSharpCompilerParameters;
+							var cparams = configuration.CompilationParameters as PlayScriptCompilerParameters;
 							if (cparams != null) {
 								string[] syms = cparams.DefineSymbols.Split (';', ',', ' ', '\t');
 								foreach (string s in syms) {
@@ -861,7 +863,7 @@ namespace MonoDevelop.CSharp.Highlightin
 
 				int length = end - textOffset;
 				string parameter = CurText.Substring (textOffset + 3, length - 3);
-				AstNode expr = new CSharpParser ().ParseExpression (parameter);
+				AstNode expr = new PlayScriptParser ().ParseExpression (parameter);
 				bool result = false;
 				if (expr != null && !expr.IsNull) {
 					object o = expr.AcceptVisitor (new ConditinalExpressionEvaluator (doc, Defines), null);
@@ -903,7 +905,7 @@ namespace MonoDevelop.CSharp.Highlightin
 				DocumentLine line = doc.GetLineByOffset (i);
 				int length = line.Offset + line.Length - i;
 				string parameter = doc.GetTextAt (i + 5, length - 5);
-				AstNode expr= new CSharpParser ().ParseExpression (parameter);
+				AstNode expr= new PlayScriptParser ().ParseExpression (parameter);
 				bool result;
 				if (expr != null && !expr.IsNull) {
 					var visitResult = expr.AcceptVisitor (new ConditinalExpressionEvaluator (doc, Defines), null);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,20 +28,20 @@ using MonoDevelop.Ide.Gui.Content;
 using Mono.TextEditor;
 using System.Collections.Generic;
 using Gdk;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Projects.Text;
 using System.Linq;
 using MonoDevelop.Core;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.FindInFiles;
 using MonoDevelop.SourceEditor;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.SourceEditor.QuickTasks;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public class HighlightUsagesExtension : TextEditorExtension, IUsageProvider
 	{
@@ -194,7 +194,7 @@ namespace MonoDevelop.CSharp.Highlightin
 		static readonly List<MemberReference> emptyList = new List<MemberReference> ();
 		IEnumerable<MemberReference> GetReferences (ResolveResult resolveResult)
 		{
-			var finder = new MonoDevelop.CSharp.Refactoring.CSharpReferenceFinder ();
+			var finder = new MonoDevelop.PlayScript.Refactoring.CSharpReferenceFinder ();
 			if (resolveResult is MemberResolveResult) {
 				finder.SetSearchedMembers (new [] { ((MemberResolveResult)resolveResult).Member });
 			} else if (resolveResult is TypeResolveResult) {
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs	2013-05-20 13:08:33.000000000 -0700
@@ -30,7 +30,7 @@ using MonoDevelop.Ide;
 using MonoDevelop.Ide.Gui.Content;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public enum MoveToUsagesCommand {
 		PrevUsage,
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,9 +28,9 @@ using System.Collections.Generic;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Parser
+namespace MonoDevelop.PlayScript.Parser
 {
 	public unsafe class CSharpFoldingParser : IFoldingParser
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,26 +25,26 @@
 // THE SOFTWARE.
 using System;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using MonoDevelop.Ide.Tasks;
-using Mono.CSharp;
+using Mono.CSharpPs;
 using System.Linq;
 using ICSharpCode.NRefactory;
-using MonoDevelop.CSharp.Refactoring.CodeActions;
+using MonoDevelop.PlayScript.Refactoring.CodeActions;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 
-namespace MonoDevelop.CSharp.Parser
+namespace MonoDevelop.PlayScript.Parser
 {
 	public class TypeSystemParser : MonoDevelop.Ide.TypeSystem.TypeSystemParser
 	{
 		public override ParsedDocument Parse (bool storeAst, string fileName, System.IO.TextReader content, MonoDevelop.Projects.Project project = null)
 		{
-			var parser = new ICSharpCode.NRefactory.CSharp.CSharpParser (GetCompilerArguments (project));
+			var parser = new ICSharpCode.NRefactory.PlayScript.PlayScriptParser (GetCompilerArguments (project));
 			parser.GenerateTypeSystemMode = !storeAst;
 			var result = new ParsedDocumentDecorator ();
 
@@ -141,7 +141,7 @@ namespace MonoDevelop.CSharp.Parser
 
 			static bool LastToken(AstNode arg)
 			{
-				return !(arg is NewLineNode || arg is WhitespaceNode || arg is ICSharpCode.NRefactory.CSharp.Comment);
+				return !(arg is NewLineNode || arg is WhitespaceNode || arg is ICSharpCode.NRefactory.PlayScript.Comment);
 			}
 		
 			public override object VisitNamespaceDeclaration (NamespaceDeclaration namespaceDeclaration, object data)
@@ -374,9 +374,9 @@ namespace MonoDevelop.CSharp.Parser
 			}
 		}
 
-		public static ICSharpCode.NRefactory.CSharp.CompilerSettings GetCompilerArguments (MonoDevelop.Projects.Project project)
+		public static ICSharpCode.NRefactory.PlayScript.CompilerSettings GetCompilerArguments (MonoDevelop.Projects.Project project)
 		{
-			var compilerArguments = new ICSharpCode.NRefactory.CSharp.CompilerSettings ();
+			var compilerArguments = new ICSharpCode.NRefactory.PlayScript.CompilerSettings ();
 	///		compilerArguments.TabSize = 1;
 
 			if (project == null || MonoDevelop.Ide.IdeApp.Workspace == null) {
@@ -385,7 +385,7 @@ namespace MonoDevelop.CSharp.Parser
 			}
 
 			var configuration = project.GetConfiguration (MonoDevelop.Ide.IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration;
-			var par = configuration != null ? configuration.CompilationParameters as CSharpCompilerParameters : null;
+			var par = configuration != null ? configuration.CompilationParameters as PlayScriptCompilerParameters : null;
 			
 			if (par == null)
 				return compilerArguments;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,7 +31,7 @@ using System.Collections.Generic;
 using MonoDevelop.Projects;
 using MonoDevelop.Core.Serialization;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	public enum LangVersion {
 		Default = 0,
@@ -45,7 +45,7 @@ namespace MonoDevelop.CSharp.Project
 	/// <summary>
 	/// This class handles project specific compiler parameters
 	/// </summary>
-	public class CSharpCompilerParameters: ConfigurationParameters
+	public class PlayScriptCompilerParameters: ConfigurationParameters
 	{
 		// Configuration parameters
 		
@@ -114,7 +114,7 @@ namespace MonoDevelop.CSharp.Project
 			
 			// Backwards compatibility. Move parameters to the project parameters object
 			if (ParentConfiguration != null && ParentConfiguration.ProjectParameters != null) {
-				CSharpProjectParameters cparams = (CSharpProjectParameters) ParentConfiguration.ProjectParameters;
+				PlayScriptProjectParameters cparams = (PlayScriptProjectParameters) ParentConfiguration.ProjectParameters;
 				if (win32Icon != null) {
 					cparams.Win32Icon = win32Icon;
 					win32Icon = null;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,9 +28,9 @@ using System;
 using MonoDevelop.Core.Serialization;
 using MonoDevelop.Projects;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
-	public class CSharpProjectParameters: ProjectParameters
+	public class PlayScriptProjectParameters: ProjectParameters
 	{
 		[ItemProperty ("StartupObject", DefaultValue = "")]
 		string mainclass = string.Empty;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs	2013-05-20 13:08:33.000000000 -0700
@@ -36,7 +36,7 @@ using System.Text;
 using MonoDevelop.Projects.Extensions;
 using MonoDevelop.Projects.Formats.MSBuild;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	class CSharpResourceIdBuilder : MSBuildResourceHandler
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs	2013-05-20 13:08:33.000000000 -0700
@@ -31,7 +31,7 @@ using MonoDevelop.Projects;
 using Gtk;
 using MonoDevelop.Ide.Gui.Dialogs;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	partial class CodeGenerationPanelWidget : Gtk.Bin 
 	{
@@ -40,7 +40,7 @@ namespace MonoDevelop.CSharp.Project
 		const int DEBUG_NONE = 2;
 
 		DotNetProjectConfiguration configuration;
-		CSharpCompilerParameters compilerParameters = null;
+		PlayScriptCompilerParameters compilerParameters = null;
 		
 		public CodeGenerationPanelWidget ()
 		{
@@ -50,7 +50,7 @@ namespace MonoDevelop.CSharp.Project
 		public void Load (DotNetProjectConfiguration configuration)
 		{
 			this.configuration = configuration;
-			compilerParameters = (CSharpCompilerParameters) configuration.CompilationParameters;
+			compilerParameters = (PlayScriptCompilerParameters) configuration.CompilationParameters;
 			
 			symbolsEntry.Text                          = compilerParameters.DefineSymbols;
 			generateXmlOutputCheckButton.Active        = compilerParameters.GenerateXmlDocumentation;
@@ -61,7 +61,7 @@ namespace MonoDevelop.CSharp.Project
 			additionalArgsEntry.Text                   = compilerParameters.AdditionalArguments;
 			ignoreWarningsEntry.Text                   = compilerParameters.NoWarnings;
 			
-			int i = CSharpLanguageBinding.SupportedPlatforms.IndexOf (compilerParameters.PlatformTarget);
+			int i = PlayScriptLanguageBinding.SupportedPlatforms.IndexOf (compilerParameters.PlatformTarget);
 			comboPlatforms.Active = i != -1 ? i : 0;
 
 			if (!configuration.DebugMode || string.Equals ("none", compilerParameters.DebugType, StringComparison.OrdinalIgnoreCase)) {
@@ -86,7 +86,7 @@ namespace MonoDevelop.CSharp.Project
 			compilerParameters.WarningLevel             = warningLevelSpinButton.ValueAsInt;
 			compilerParameters.AdditionalArguments      = additionalArgsEntry.Text;
 			compilerParameters.NoWarnings               = ignoreWarningsEntry.Text;
-			compilerParameters.PlatformTarget           = CSharpLanguageBinding.SupportedPlatforms [comboPlatforms.Active];
+			compilerParameters.PlatformTarget           = PlayScriptLanguageBinding.SupportedPlatforms [comboPlatforms.Active];
 
 			switch (comboDebug.Active) {
 			case DEBUG_FULL:
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -32,19 +32,19 @@ using Gtk;
 
 using MonoDevelop.Core;
 using MonoDevelop.Projects;
-using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Text;
 using MonoDevelop.Ide.Gui.Dialogs;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	
 	public partial class CompilerOptionsPanelWidget : Gtk.Bin
 	{
 		DotNetProject project;
-		ListStore classListStore;
+		ListStore classListStore;
 		bool classListFilled;
 		
 		public CompilerOptionsPanelWidget (DotNetProject project)
@@ -52,19 +52,19 @@ namespace MonoDevelop.CSharp.Project
 			this.Build();
 			this.project = project;
 			DotNetProjectConfiguration configuration = (DotNetProjectConfiguration) project.GetConfiguration (IdeApp.Workspace.ActiveConfiguration);
-			CSharpCompilerParameters compilerParameters = (CSharpCompilerParameters) configuration.CompilationParameters;
-			CSharpProjectParameters projectParameters = (CSharpProjectParameters) configuration.ProjectParameters;
+			PlayScriptCompilerParameters compilerParameters = (PlayScriptCompilerParameters) configuration.CompilationParameters;
+			PlayScriptProjectParameters projectParameters = (PlayScriptProjectParameters) configuration.ProjectParameters;
 			
-			ListStore store = new ListStore (typeof (string));
-			store.AppendValues (GettextCatalog.GetString ("Executable"));
+			ListStore store = new ListStore (typeof (string));
+			store.AppendValues (GettextCatalog.GetString ("Executable"));
 			store.AppendValues (GettextCatalog.GetString ("Library"));
-			store.AppendValues (GettextCatalog.GetString ("Executable with GUI"));
-			store.AppendValues (GettextCatalog.GetString ("Module"));
-			compileTargetCombo.Model = store;
-			CellRendererText cr = new CellRendererText ();
-			compileTargetCombo.PackStart (cr, true);
-			compileTargetCombo.AddAttribute (cr, "text", 0);
-			compileTargetCombo.Active = (int) configuration.CompileTarget;
+			store.AppendValues (GettextCatalog.GetString ("Executable with GUI"));
+			store.AppendValues (GettextCatalog.GetString ("Module"));
+			compileTargetCombo.Model = store;
+			CellRendererText cr = new CellRendererText ();
+			compileTargetCombo.PackStart (cr, true);
+			compileTargetCombo.AddAttribute (cr, "text", 0);
+			compileTargetCombo.Active = (int) configuration.CompileTarget;
 			compileTargetCombo.Changed += new EventHandler (OnTargetChanged);
 			
 			if (project.IsLibraryBasedProjectType) {
@@ -72,9 +72,9 @@ namespace MonoDevelop.CSharp.Project
 				compileTargetCombo.Sensitive = false;
 				mainClassEntry.Sensitive = false;
 			} else {
-				classListStore = new ListStore (typeof(string));
-				mainClassEntry.Model = classListStore;
-				mainClassEntry.TextColumn = 0;
+				classListStore = new ListStore (typeof(string));
+				mainClassEntry.Model = classListStore;
+				mainClassEntry.TextColumn = 0;
 				((Entry)mainClassEntry.Child).Text = projectParameters.MainClass ?? string.Empty;
 			
 				UpdateTarget ();
@@ -171,7 +171,7 @@ namespace MonoDevelop.CSharp.Project
 			
 			project.CompileTarget = compileTarget;
 			
-			CSharpProjectParameters projectParameters = (CSharpProjectParameters) project.LanguageParameters; 
+			PlayScriptProjectParameters projectParameters = (PlayScriptProjectParameters) project.LanguageParameters; 
 			
 			projectParameters.CodePage = codePage;
 
@@ -182,45 +182,45 @@ namespace MonoDevelop.CSharp.Project
 				projectParameters.MainClass = mainClassEntry.Entry.Text;
 			
 			foreach (DotNetProjectConfiguration configuration in configs) {
-				CSharpCompilerParameters compilerParameters = (CSharpCompilerParameters) configuration.CompilationParameters; 
+				PlayScriptCompilerParameters compilerParameters = (PlayScriptCompilerParameters) configuration.CompilationParameters; 
 				compilerParameters.UnsafeCode = allowUnsafeCodeCheckButton.Active;
 				compilerParameters.NoStdLib = noStdLibCheckButton.Active;
 				compilerParameters.LangVersion = langVersion;
 			}
 		}
 		
-		void OnTargetChanged (object s, EventArgs a)
-		{
-			UpdateTarget ();
+		void OnTargetChanged (object s, EventArgs a)
+		{
+			UpdateTarget ();
 		}
 		
-		void UpdateTarget ()
-		{
-			if ((CompileTarget) compileTargetCombo.Active == CompileTarget.Library) {
-				iconEntry.Sensitive = false;
-			} else {
-				iconEntry.Sensitive = true;
+		void UpdateTarget ()
+		{
+			if ((CompileTarget) compileTargetCombo.Active == CompileTarget.Library) {
+				iconEntry.Sensitive = false;
+			} else {
+				iconEntry.Sensitive = true;
 				if (!classListFilled)
-					FillClasses ();
-			}
+					FillClasses ();
+			}
 		}
 		
-		void FillClasses ()
-		{
+		void FillClasses ()
+		{
 			try {
 				var ctx = TypeSystemService.GetCompilation (project);
 				if (ctx == null)
 					// Project not found in parser database
 					return;
-				foreach (var c in ctx.GetAllTypeDefinitions ()) {
-					if (c.Methods != null) {
-						foreach (var m in c.Methods) {
-							if (m.IsStatic && m.Name == "Main")
-								classListStore.AppendValues (c.FullName);
-						}
-					}
-				}
-				classListFilled = true;
+				foreach (var c in ctx.GetAllTypeDefinitions ()) {
+					if (c.Methods != null) {
+						foreach (var m in c.Methods) {
+							if (m.IsStatic && m.Name == "Main")
+								classListStore.AppendValues (c.FullName);
+						}
+					}
+				}
+				classListFilled = true;
 			} catch (InvalidOperationException) {
 				// Project not found in parser database
 			}
@@ -229,19 +229,19 @@ namespace MonoDevelop.CSharp.Project
 	
 	public class CompilerOptionsPanel : ItemOptionsPanel
 	{
-		CompilerOptionsPanelWidget widget;
-		
-		public override Widget CreatePanelWidget ()
-		{
-			return (widget = new CompilerOptionsPanelWidget ((DotNetProject) ConfiguredProject));
-		}
-		
+		CompilerOptionsPanelWidget widget;
+		
+		public override Widget CreatePanelWidget ()
+		{
+			return (widget = new CompilerOptionsPanelWidget ((DotNetProject) ConfiguredProject));
+		}
+		
 		public override bool ValidateChanges ()
 		{
 			return widget.ValidateChanges ();
 		}
 		
-		public override void ApplyChanges ()
+		public override void ApplyChanges ()
 		{
 			MultiConfigItemOptionsDialog dlg = (MultiConfigItemOptionsDialog) ParentDialog;
 			widget.Store (dlg.Configurations);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs	2013-05-20 13:08:33.000000000 -0700
@@ -24,18 +24,18 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using System.Collections.Generic;
 using System.Linq;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.Projects.Policies;
 using Mono.Cecil;
 using Mono.Cecil.Cil;
@@ -45,23 +45,23 @@ using ICSharpCode.NRefactory.PatternMatc
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	public class CSharpCodeGenerator : CodeGenerator
 	{
 		static CSharpAmbience ambience = new CSharpAmbience ();
 		
-		CSharpFormattingPolicy policy;
+		PlayScriptFormattingPolicy policy;
 		
-		public MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy Policy {
+		public MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy Policy {
 			get {
 				if (policy == null) {
-					var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
+					var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
 					if (PolicyParent != null)
-						policy = PolicyParent.Get<CSharpFormattingPolicy> (types);
+						policy = PolicyParent.Get<PlayScriptFormattingPolicy> (types);
 					if (policy == null) {
 						
-						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 					}
 				}
 				return this.policy;
@@ -74,8 +74,8 @@ namespace MonoDevelop.CSharp.Refactoring
 			}
 			set {
 				base.PolicyParent = value;
-				var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
-				policy = value.Get<CSharpFormattingPolicy> (types);
+				var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
+				policy = value.Get<PlayScriptFormattingPolicy> (types);
 			}
 		}
 		
@@ -97,7 +97,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					return ns + "." + name;
 				var file = Document.ParsedDocument.ParsedFile as CSharpUnresolvedFile;
 				var csResolver = file.GetResolver (Document.Compilation, Document.Editor.Caret.Location);
-				var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+				var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 				return OutputNode (Document, builder.ConvertType (typeDef));
 			}
 		}
@@ -294,7 +294,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					result.Append (typeString);
 				}
 			} else {
-				result.Append (new ICSharpCode.NRefactory.CSharp.CSharpAmbience ().ConvertType (type));
+				result.Append (new ICSharpCode.NRefactory.PlayScript.CSharpAmbience ().ConvertType (type));
 			}
 		}
 		
@@ -527,6 +527,8 @@ namespace MonoDevelop.CSharp.Refactoring
 					// See: Bug 1373 - overriding [Model] class methods shouldn't insert base.Methods
 					// TODO: Extend this to user defined code.
 					try {
+#if NOT_PLAYSCRIPT
+						// TODO: This doesn't work in PLAYSCRIPT!
 						if (method.Region.FileName == null) {
 							var asm = AssemblyDefinition.ReadAssembly (method.ParentAssembly.UnresolvedAssembly.Location);
 							foreach (var type in asm.MainModule.Types) {
@@ -535,7 +537,7 @@ namespace MonoDevelop.CSharp.Refactoring
 								foreach (var m  in type.Resolve ().Methods) {
 									if (m.HasBody && m.Name == method.Name) {
 										var context = new DecompilerContext (asm.MainModule);
-										
+
 										context.CurrentType = type;
 				
 										context.Settings = new DecompilerSettings () {
@@ -548,9 +550,9 @@ namespace MonoDevelop.CSharp.Refactoring
 				
 										var astBuilder = new AstBuilder (context);
 										astBuilder.AddMethod (m);
-										
+
 										astBuilder.RunTransformations (o => false);
-										
+
 										var visitor = new ThrowsExceptionVisitor ();
 										astBuilder.CompilationUnit.AcceptVisitor (visitor);
 										skipBody = visitor.Throws;
@@ -562,6 +564,7 @@ namespace MonoDevelop.CSharp.Refactoring
 									break;
 							}
 						}
+#endif
 					} catch (Exception) {
 					}
 					AppendIndent (result);
@@ -851,7 +854,7 @@ namespace MonoDevelop.CSharp.Refactoring
 
 		static bool IsCommentOrUsing (AstNode node)
 		{
-			return node is ICSharpCode.NRefactory.CSharp.Comment ||
+			return node is ICSharpCode.NRefactory.PlayScript.Comment ||
 				node is UsingDeclaration ||
 				node is UsingAliasDeclaration;
 		}
@@ -875,7 +878,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			if (unit == null)
 				return;
 			
-			var policy = doc.Project != null ? doc.Project.Policies.Get <CSharpFormattingPolicy> () : null;
+			var policy = doc.Project != null ? doc.Project.Policies.Get <PlayScriptFormattingPolicy> () : null;
 			if (policy == null)
 				policy = Policy;
 			
@@ -925,7 +928,7 @@ namespace MonoDevelop.CSharp.Refactoring
 				return;
 			}
 			
-			var policy = doc.Project != null ? doc.Project.Policies.Get <CSharpFormattingPolicy> () : null;
+			var policy = doc.Project != null ? doc.Project.Policies.Get <PlayScriptFormattingPolicy> () : null;
 			if (policy == null)
 				policy = Policy;
 			
@@ -991,7 +994,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		public AstType CreateShortType (ICompilation compilation, CSharpUnresolvedFile parsedFile, TextLocation loc, IType fullType)
 		{
 			var csResolver = parsedFile.GetResolver (compilation, loc);
-			var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+			var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 			return builder.ConvertType (fullType);			
 		}
 		
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,25 +29,25 @@ using System.Collections.Generic;
 
 using MonoDevelop.Core;
 using MonoDevelop.Ide;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Ide.FindInFiles;
 using System.Linq;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System.IO;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Semantics;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	using MonoDevelop.Projects;
 	public class CSharpReferenceFinder : ReferenceFinder
 	{
-		ICSharpCode.NRefactory.CSharp.Resolver.FindReferences refFinder = new ICSharpCode.NRefactory.CSharp.Resolver.FindReferences ();
+		ICSharpCode.NRefactory.PlayScript.Resolver.FindReferences refFinder = new ICSharpCode.NRefactory.PlayScript.Resolver.FindReferences ();
 		List<object> searchedMembers;
 		List<FilePath> files = new List<FilePath> ();
 		List<Tuple<FilePath, MonoDevelop.Ide.Gui.Document>> openDocuments = new List<Tuple<FilePath, MonoDevelop.Ide.Gui.Document>> ();
@@ -283,7 +283,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					continue;
 				using (var editor = TextEditorData.CreateImmutable (text)) {
 					editor.Document.FileName = file;
-					var unit = new CSharpParser ().Parse (editor);
+					var unit = new PlayScriptParser ().Parse (editor);
 					if (unit == null)
 						continue;
 					
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/ExtensionMethods.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/ExtensionMethods.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/ExtensionMethods.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/ExtensionMethods.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,112 @@
+//
+// ExtensionMethods.cs
+//
+// Author:
+//       Mike Krüger <mkrueger@xamarin.com>
+//
+// Copyright (c) 2013 Xamarin Inc. (http://xamarin.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+using System;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using MonoDevelop.Ide.Gui;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.TypeSystem;
+using ICSharpCode.NRefactory.Semantics;
+using System.Threading.Tasks;
+
+namespace MonoDevelop.Refactoring
+{
+	public static class ExtensionMethods
+	{
+		class ResolverAnnotation
+		{
+			public Task<CSharpAstResolver> Task;
+			public CSharpUnresolvedFile ParsedFile;
+		}
+
+		/// <summary>
+		/// Returns a full C# syntax tree resolver which is shared between semantic highlighting, source analysis and refactoring.
+		/// For code analysis tasks this should be used instead of generating an own resolver. Only exception is if a local resolving is done using a 
+		/// resolve navigator.
+		/// Note: The shared resolver is fully resolved.
+		/// </summary>
+		public static Task<CSharpAstResolver> GetPlayScriptSharedResolver (this Document document)
+		{
+			var parsedDocument = document.ParsedDocument;
+			if (parsedDocument == null)
+				return null;
+
+			var unit       = parsedDocument.GetAst<SyntaxTree> ();
+			var parsedFile = parsedDocument.ParsedFile as CSharpUnresolvedFile;
+			if (unit == null || parsedFile == null)
+				return null;
+
+			var resolverAnnotation = document.Annotation<ResolverAnnotation> ();
+
+			if (resolverAnnotation != null) {
+				if (resolverAnnotation.ParsedFile == parsedFile)
+					return resolverAnnotation.Task;
+				document.RemoveAnnotations<ResolverAnnotation> ();
+			}
+
+			var resolveTask = Task.Factory.StartNew (delegate {
+				var result = new CSharpAstResolver (document.Compilation, unit, parsedFile);
+				result.ApplyNavigator (new ConstantModeResolveVisitorNavigator (ResolveVisitorNavigationMode.Resolve, null));
+				return result;
+			});
+			document.AddAnnotation (new ResolverAnnotation {
+				Task = resolveTask,
+				ParsedFile = parsedFile
+			});
+			return resolveTask;
+		}
+
+		sealed class ConstantModeResolveVisitorNavigator : IResolveVisitorNavigator
+		{
+			readonly ResolveVisitorNavigationMode mode;
+			readonly IResolveVisitorNavigator targetForResolveCalls;
+
+			public ConstantModeResolveVisitorNavigator(ResolveVisitorNavigationMode mode, IResolveVisitorNavigator targetForResolveCalls)
+			{
+				this.mode = mode;
+				this.targetForResolveCalls = targetForResolveCalls;
+			}
+
+			ResolveVisitorNavigationMode IResolveVisitorNavigator.Scan(AstNode node)
+			{
+				return mode;
+			}
+
+			void IResolveVisitorNavigator.Resolved(AstNode node, ResolveResult result)
+			{
+				if (targetForResolveCalls != null)
+					targetForResolveCalls.Resolved(node, result);
+			}
+
+			void IResolveVisitorNavigator.ProcessConversion(Expression expression, ResolveResult result, Conversion conversion, IType targetType)
+			{
+				if (targetForResolveCalls != null)
+					targetForResolveCalls.ProcessConversion(expression, result, conversion, targetType);
+			}
+		}
+
+	}
+}
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,11 +25,11 @@
 // THE SOFTWARE.
 using System;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	public static class HelperMethods
 	{
@@ -47,9 +47,9 @@ namespace MonoDevelop.CSharp.Refactoring
 			return change;
 		}
 
-		public static ICSharpCode.NRefactory.CSharp.TextEditorOptions CreateNRefactoryTextEditorOptions (this TextEditorData doc)
+		public static ICSharpCode.NRefactory.PlayScript.TextEditorOptions CreateNRefactoryTextEditorOptions (this TextEditorData doc)
 		{
-			return new ICSharpCode.NRefactory.CSharp.TextEditorOptions () {
+			return new ICSharpCode.NRefactory.PlayScript.TextEditorOptions () {
 				TabsToSpaces = doc.TabsToSpaces,
 				TabSize = doc.Options.TabSize,
 				IndentSize = doc.Options.IndentationSize,
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs	2013-05-20 13:08:33.000000000 -0700
@@ -24,7 +24,7 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.PatternMatching;
 using MonoDevelop.Core;
 using System.Collections.Generic;
@@ -38,7 +38,7 @@ using MonoDevelop.Core.ProgressMonitorin
 using ICSharpCode.NRefactory;
 using System.Threading;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MoveTypeToFile : MonoDevelop.CodeActions.CodeActionProvider
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,11 +25,11 @@
 // THE SOFTWARE.
 using System;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public static class ContextActionExtensions
 	{
@@ -62,7 +62,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		public static void FormatText (this AstNode node, MonoDevelop.Ide.Gui.Document doc)
 		{
 			doc.UpdateParseDocument ();
-			MonoDevelop.CSharp.Formatting.OnTheFlyFormatter.Format (doc, node.StartLocation);
+			MonoDevelop.PlayScript.Formatting.OnTheFlyFormatter.Format (doc, node.StartLocation);
 		}
 	}
 }
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,22 +25,22 @@
 // THE SOFTWARE.
 
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 using System.Threading;
 using MonoDevelop.Ide.Gui;
 using System.Diagnostics;
-using MonoDevelop.CSharp.Refactoring.CodeIssues;
+using MonoDevelop.PlayScript.Refactoring.CodeIssues;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using MonoDevelop.CSharp.Formatting;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using MonoDevelop.PlayScript.Formatting;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MDRefactoringContext : RefactoringContext
 	{
@@ -91,7 +91,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			}
 		}
 
-		public override ICSharpCode.NRefactory.CSharp.TextEditorOptions TextEditorOptions {
+		public override ICSharpCode.NRefactory.PlayScript.TextEditorOptions TextEditorOptions {
 			get {
 				return TextEditor.CreateNRefactoryTextEditorOptions ();
 			}
@@ -160,7 +160,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			return new MDRefactoringScript (this, formattingOptions);
 		}
 
-		public MDRefactoringContext (Document document, TextLocation loc, CancellationToken cancellationToken = default (CancellationToken)) : base (document.GetSharedResolver ().Result, cancellationToken)
+		public MDRefactoringContext (Document document, TextLocation loc, CancellationToken cancellationToken = default (CancellationToken)) : base (document.GetPlayScriptSharedResolver ().Result, cancellationToken)
 		{
 			if (document == null)
 				throw new ArgumentNullException ("document");
@@ -169,7 +169,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			this.Project = document.Project as DotNetProject;
 			this.formattingOptions = document.GetFormattingOptions ();
 			this.location = RefactoringService.GetCorrectResolveLocation (document, loc);
-			var policy = document.HasProject ? Project.Policies.Get<NameConventionPolicy> () : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<NameConventionPolicy> ();
+			var policy = document.HasProject ? Project.Policies.Get<PlayScriptNameConventionPolicy> () : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptNameConventionPolicy> ();
 			Services.AddService (typeof(NamingConventionService), policy.CreateNRefactoryService ());
 		}
 
@@ -178,10 +178,10 @@ namespace MonoDevelop.CSharp.Refactoring
 			this.TextEditor = data;
 			this.ParsedDocument = parsedDocument;
 			this.Project = project;
-			var policy = Project.Policies.Get<CSharpFormattingPolicy> ();
+			var policy = Project.Policies.Get<PlayScriptFormattingPolicy> ();
 			this.formattingOptions = policy.CreateOptions ();
 			this.location = loc;
-			var namingPolicy = Project.Policies.Get<NameConventionPolicy> ();
+			var namingPolicy = Project.Policies.Get<PlayScriptNameConventionPolicy> ();
 			Services.AddService (typeof(NamingConventionService), namingPolicy.CreateNRefactoryService ());
 		}
 	}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,27 +25,27 @@
 // THE SOFTWARE.
 using System;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Refactoring.Rename;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System.IO;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide;
 using System.Threading.Tasks;
 using MonoDevelop.Core.ProgressMonitoring;
 using MonoDevelop.Ide.FindInFiles;
 using MonoDevelop.Projects;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.Ide.Gui.Content;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MDRefactoringScript : DocumentScript
 	{
@@ -306,7 +306,7 @@ namespace MonoDevelop.CSharp.Refactoring
 
 						ParsedDocument parsedDocument;
 						using (var reader = new StreamReader (data.OpenStream ()))
-							parsedDocument = new MonoDevelop.CSharp.Parser.TypeSystemParser ().Parse (true, memberRef.FileName, reader, project);
+							parsedDocument = new MonoDevelop.PlayScript.Parser.TypeSystemParser ().Parse (true, memberRef.FileName, reader, project);
 						var resolver = new CSharpAstResolver (TypeSystemService.GetCompilation (project), memberRef.SyntaxTree, parsedDocument.ParsedFile as CSharpUnresolvedFile);
 
 						ctx = new MDRefactoringContext (project as DotNetProject, data, parsedDocument, resolver, memberRef.AstNode.StartLocation, this.context.CancellationToken);
@@ -346,11 +346,11 @@ namespace MonoDevelop.CSharp.Refactoring
 				insertLocation = content.Length;
 			content = content.Substring (0, insertLocation) + newType.ToString (FormattingOptions) + content.Substring (insertLocation);
 
-			var formatter = new MonoDevelop.CSharp.Formatting.CSharpFormatter ();
-			var policy = context.Project.Policies.Get<CSharpFormattingPolicy> ();
+			var formatter = new MonoDevelop.PlayScript.Formatting.CSharpFormatter ();
+			var policy = context.Project.Policies.Get<PlayScriptFormattingPolicy> ();
 			var textPolicy = context.Project.Policies.Get<TextStylePolicy> ();
 
-			content = formatter.FormatText (policy, textPolicy, MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType, content, 0, content.Length);
+			content = formatter.FormatText (policy, textPolicy, MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType, content, 0, content.Length);
 
 			File.WriteAllText (correctFileName, content);
 			context.Project.AddFile (correctFileName);
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,20 +26,20 @@
 
 using System;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
 using ICSharpCode.NRefactory;
 using System.Threading;
 using MonoDevelop.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class NRefactoryCodeAction : MonoDevelop.CodeActions.CodeAction
 	{
-		readonly ICSharpCode.NRefactory.CSharp.Refactoring.CodeAction act;
+		readonly ICSharpCode.NRefactory.PlayScript.Refactoring.CodeAction act;
 		
-		public NRefactoryCodeAction (string id, string title, ICSharpCode.NRefactory.CSharp.Refactoring.CodeAction act)
+		public NRefactoryCodeAction (string id, string title, ICSharpCode.NRefactory.PlayScript.Refactoring.CodeAction act)
 		{
 			this.IdString = id;
 			this.Title = title;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -26,15 +26,15 @@
 
 using System;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
 using ICSharpCode.NRefactory;
 using System.Threading;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	class NRefactoryCodeActionProvider : MonoDevelop.CodeActions.CodeActionProvider
 	{
@@ -51,7 +51,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			Title = GettextCatalog.GetString (attr.Title ?? "");
 			Description = GettextCatalog.GetString (attr.Description ?? "");
 			Category = GettextCatalog.GetString (attr.Category ?? "");
-			MimeType = "text/x-csharp";
+			MimeType = "text/x-playscript";
 			BoundToIssue = attr.BoundToIssue;
 		}
 
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,20 +27,20 @@ using System;
 using MonoDevelop.CodeActions;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class NRefactoryCodeActionSource : ICodeActionProviderSource
 	{
 		#region ICodeActionProviderSource implementation
 		public IEnumerable<CodeActionProvider> GetProviders ()
 		{
-			foreach (var t in typeof (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeActionProvider).Assembly.GetTypes ()) {
-				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.CSharp.ContextActionAttribute), false);
+			foreach (var t in typeof (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeActionProvider).Assembly.GetTypes ()) {
+				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.PlayScript.ContextActionAttribute), false);
 				if (attr == null || attr.Length != 1)
 					continue;
 				yield return new NRefactoryCodeActionProvider (
-					(ICSharpCode.NRefactory.CSharp.Refactoring.ICodeActionProvider)Activator.CreateInstance (t),
-					(ICSharpCode.NRefactory.CSharp.ContextActionAttribute)attr [0]);
+					(ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeActionProvider)Activator.CreateInstance (t),
+					(ICSharpCode.NRefactory.PlayScript.ContextActionAttribute)attr [0]);
 			}
 		}
 		#endregion
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,20 +27,20 @@ using System;
 using MonoDevelop.CodeIssues;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public class NRefactoryCodeIssueSource : ICodeIssueProviderSource
 	{
 		#region ICodeIssueProviderSource implementation
 		public IEnumerable<CodeIssueProvider> GetProviders ()
 		{
-			foreach (var t in typeof (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider).Assembly.GetTypes ()) {
-				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.CSharp.IssueDescriptionAttribute), false);
+			foreach (var t in typeof (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider).Assembly.GetTypes ()) {
+				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.PlayScript.IssueDescriptionAttribute), false);
 				if (attr == null || attr.Length != 1)
 					continue;
 				yield return new NRefactoryIssueProvider (
-					(ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider)Activator.CreateInstance (t),
-					(ICSharpCode.NRefactory.CSharp.IssueDescriptionAttribute)attr [0]);
+					(ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider)Activator.CreateInstance (t),
+					(ICSharpCode.NRefactory.PlayScript.IssueDescriptionAttribute)attr [0]);
 			}
 		}
 		#endregion
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -27,18 +27,18 @@
 using System;
 using System.Linq;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.Gui;
 using System.Threading;
 using MonoDevelop.CodeIssues;
-using MonoDevelop.CSharp.Refactoring.CodeActions;
+using MonoDevelop.PlayScript.Refactoring.CodeActions;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	class NRefactoryIssueProvider : CodeIssueProvider
 	{
-		ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider issueProvider;
+		ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider issueProvider;
 		readonly string providerIdString;
 
 		public override string IdString {
@@ -47,16 +47,16 @@ namespace MonoDevelop.CSharp.Refactoring
 			}
 		}
 
-		public NRefactoryIssueProvider (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider issue, IssueDescriptionAttribute attr)
+		public NRefactoryIssueProvider (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider issue, IssueDescriptionAttribute attr)
 		{
 			issueProvider = issue;
 			providerIdString = issueProvider.GetType ().FullName;
 			Category = GettextCatalog.GetString (attr.Category ?? "");
 			Title = GettextCatalog.GetString (attr.Title ?? "");
 			Description = GettextCatalog.GetString (attr.Description ?? "");
-			DefaultSeverity = attr.Severity;
-			IssueMarker = attr.IssueMarker;
-			MimeType = "text/x-csharp";
+			DefaultSeverity = (ICSharpCode.NRefactory.CSharp.Severity)attr.Severity;
+			IssueMarker = (ICSharpCode.NRefactory.CSharp.IssueMarker)attr.IssueMarker;
+			MimeType = "text/x-playscript";
 		}
 
 		public override IEnumerable<CodeIssue> GetIssues (object ctx, CancellationToken cancellationToken)
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/MonoNameConventionPolicy.xml ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/MonoNameConventionPolicy.xml
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/MonoNameConventionPolicy.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/MonoNameConventionPolicy.xml	2013-05-20 13:08:33.000000000 -0700
@@ -1,4 +1,4 @@
-<NameConventionPolicy>
+<PlayScriptNameConventionPolicy>
 	<Rules>
 		<NamingRule>
 			<Name>Namespaces</Name>
@@ -176,4 +176,4 @@
 			<IncludeStaticEntities>True</IncludeStaticEntities>
 		</NamingRule>
 	</Rules>
-</NameConventionPolicy>
\ No newline at end of file
+</PlayScriptNameConventionPolicy>
\ No newline at end of file
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -24,14 +24,14 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Linq;
 using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public partial class NameConventionEditRuleDialog : Gtk.Dialog
 	{
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,9 +28,9 @@ using MonoDevelop.Ide.Gui.Dialogs;
 using Gtk;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
-	class NameConventionPanel : PolicyOptionsPanel<NameConventionPolicy>
+	class NameConventionPanel : PolicyOptionsPanel<PlayScriptNameConventionPolicy>
 	{
 		NameConventionPanelWidget panel;
 		
@@ -55,12 +55,12 @@ namespace MonoDevelop.CSharp.Refactoring
 			return panel;
 		}
 		
-		protected override void LoadFrom (NameConventionPolicy policy)
+		protected override void LoadFrom (PlayScriptNameConventionPolicy policy)
 		{
 			panel.Policy = policy.Clone ();
 		}
 		
-		protected override NameConventionPolicy GetPolicy ()
+		protected override PlayScriptNameConventionPolicy GetPolicy ()
 		{
 			// return cloned policy
 			panel.ApplyChanges ();
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -25,20 +25,20 @@
 // THE SOFTWARE.
 using System;
 using Gtk;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Core;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	[System.ComponentModel.ToolboxItem(true)]
 	partial class NameConventionPanelWidget : Gtk.Bin
 	{
 		TreeStore treeStore = new TreeStore (typeof(NameConventionRule));
-		NameConventionPolicy policy;
+		PlayScriptNameConventionPolicy policy;
 
-		public NameConventionPolicy Policy {
+		public PlayScriptNameConventionPolicy Policy {
 			get {
 				return policy;
 			}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,13 +28,13 @@ using System.Linq;
 using System.Collections.Generic;
 using MonoDevelop.Projects.Policies;
 using MonoDevelop.Core.Serialization;
-using ICS = ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICS = ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
-	[PolicyType ("Naming Conventions Policy")]
-	public class NameConventionPolicy : IEquatable<NameConventionPolicy>
+	[PolicyType ("PlayScript naming Conventions Policy")]
+	public class PlayScriptNameConventionPolicy : IEquatable<PlayScriptNameConventionPolicy>
 	{
 		NameConventionRule[] rules = new NameConventionRule[0];
 
@@ -44,23 +44,23 @@ namespace MonoDevelop.CSharp.Refactoring
 			set { rules = value; }
 		}
 
-		public NameConventionPolicy Clone ()
+		public PlayScriptNameConventionPolicy Clone ()
 		{
-			var result = new NameConventionPolicy ();
+			var result = new PlayScriptNameConventionPolicy ();
 			result.rules = new List<NameConventionRule> (rules.Select (r => r.Clone ())).ToArray ();
 			return result;
 		}
 
-		public NameConventionPolicy ()
+		public PlayScriptNameConventionPolicy ()
 		{
 			rules = new List<NameConventionRule> (DefaultRules.GetFdgRules ().Select (r => new NameConventionRule (r))).ToArray ();
 		}
 
-		class NamingConventionService : ICSharpCode.NRefactory.CSharp.Refactoring.NamingConventionService
+		class NamingConventionService : ICSharpCode.NRefactory.PlayScript.Refactoring.NamingConventionService
 		{
-			NameConventionPolicy policy;
-			ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule[] rules = null;
-			public override IEnumerable<ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule> Rules {
+			PlayScriptNameConventionPolicy policy;
+			ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule[] rules = null;
+			public override IEnumerable<ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule> Rules {
 				get {
 					if (rules == null) {
 						this.rules = policy.Rules.Select (r => r.GetNRefactoryRule ()).ToArray ();
@@ -69,20 +69,20 @@ namespace MonoDevelop.CSharp.Refactoring
 				}
 			}
 
-			public NamingConventionService (MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPolicy policy)
+			public NamingConventionService (MonoDevelop.PlayScript.Refactoring.CodeIssues.PlayScriptNameConventionPolicy policy)
 			{
 				this.policy = policy;
 			}
 			
 		}
 
-		public ICSharpCode.NRefactory.CSharp.Refactoring.NamingConventionService CreateNRefactoryService ()
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.NamingConventionService CreateNRefactoryService ()
 		{
 			return new NamingConventionService (this);
 		}
 
 		#region IEquatable implementation
-		public bool Equals (NameConventionPolicy other)
+		public bool Equals (PlayScriptNameConventionPolicy other)
 		{
 			if (Rules.Length != other.Rules.Length) 
 				return false;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs	2013-05-20 13:08:33.000000000 -0700
@@ -28,12 +28,12 @@ using System.Text;
 using MonoDevelop.Projects.Policies;
 using MonoDevelop.Core.Serialization;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	[DataItem ("NamingRule")]
 	public class NameConventionRule
 	{
-		ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule wrappedRule = new ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule (ICSharpCode.NRefactory.CSharp.Refactoring.AffectedEntity.None);
+		ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule wrappedRule = new ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule (ICSharpCode.NRefactory.PlayScript.Refactoring.AffectedEntity.None);
 
 		[ItemProperty]
 		public string Name {
@@ -72,19 +72,19 @@ namespace MonoDevelop.CSharp.Refactoring
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Refactoring.AffectedEntity AffectedEntity {
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.AffectedEntity AffectedEntity {
 			get { return wrappedRule.AffectedEntity; } 
 			set { wrappedRule.AffectedEntity = value;} 
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Modifiers VisibilityMask {
+		public ICSharpCode.NRefactory.PlayScript.Modifiers VisibilityMask {
 			get { return wrappedRule.VisibilityMask; } 
 			set { wrappedRule.VisibilityMask = value;} 
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle NamingStyle {
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle NamingStyle {
 			get { return wrappedRule.NamingStyle; } 
 			set { wrappedRule.NamingStyle = value;} 
 		}
@@ -102,7 +102,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		}
 
 		
-		internal NameConventionRule (ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule wrappedRule)
+		internal NameConventionRule (ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule wrappedRule)
 		{
 			this.wrappedRule = wrappedRule;
 		}
@@ -124,19 +124,19 @@ namespace MonoDevelop.CSharp.Refactoring
 			if (RequiredPrefixes != null && RequiredPrefixes.Length > 0)
 				result.Append (RequiredPrefixes [0]);
 			switch (NamingStyle) {
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.PascalCase:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.PascalCase:
 				result.Append ("PascalCase");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.CamelCase:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.CamelCase:
 				result.Append ("camelCase");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllUpper:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.AllUpper:
 				result.Append ("ALL_UPPER");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllLower:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.AllLower:
 				result.Append ("all_lower");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.FirstUpper:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.FirstUpper:
 				result.Append ("First_upper");
 				break;
 			}
@@ -152,7 +152,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			return result.ToString ();
 		}
 
-		internal ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule GetNRefactoryRule ()
+		internal ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule GetNRefactoryRule ()
 		{
 			return wrappedRule;
 		}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs	2013-05-20 13:08:33.000000000 -0700
@@ -40,16 +40,16 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Ide.CodeTemplates;
 using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Refactoring;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public static class HelperMethods
 	{
@@ -64,14 +64,14 @@ namespace MonoDevelop.CSharp
 			}
 		}
 		
-		public static ICSharpCode.NRefactory.CSharp.SyntaxTree Parse (this ICSharpCode.NRefactory.CSharp.CSharpParser parser, TextEditorData data)
+		public static ICSharpCode.NRefactory.PlayScript.SyntaxTree Parse (this ICSharpCode.NRefactory.PlayScript.PlayScriptParser parser, TextEditorData data)
 		{
 			using (var stream = data.OpenStream ()) {
 				return parser.Parse (stream, data.Document.FileName);
 			}
 		}
 		
-//		public static AstNode ParseSnippet (this ICSharpCode.NRefactory.CSharp.CSharpParser parser, TextEditorData data)
+//		public static AstNode ParseSnippet (this ICSharpCode.NRefactory.PlayScript.CSharpParser parser, TextEditorData data)
 //		{
 //			using (var stream = new  StreamReader (data.OpenStream ())) {
 //				var result = parser.ParseExpression (stream);
@@ -90,11 +90,11 @@ namespace MonoDevelop.CSharp
 //			}
 //		}
 		
-		public static MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy GetFormattingPolicy (this MonoDevelop.Ide.Gui.Document doc)
+		public static MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy GetFormattingPolicy (this MonoDevelop.Ide.Gui.Document doc)
 		{
 			var policyParent = doc.Project != null ? doc.Project.Policies : null;
-			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
-			var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
+			var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 			return codePolicy;
 		}
 
@@ -105,9 +105,9 @@ namespace MonoDevelop.CSharp
 		
 		public static CSharpFormattingOptions GetFormattingOptions (this MonoDevelop.Projects.Project project)
 		{
-			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
-			var codePolicy = project != null ? project.Policies.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) :
-				MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
+			var codePolicy = project != null ? project.Policies.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) :
+				MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 			return codePolicy.CreateOptions ();
 		}
 		
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -30,20 +30,20 @@ using Mono.TextEditor;
 using System.Text;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Linq;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Resolver
+namespace MonoDevelop.PlayScript.Resolver
 {
 	public class TextEditorResolverProvider : ITextEditorResolverProvider
 	{
@@ -197,9 +197,9 @@ namespace MonoDevelop.CSharp.Resolver
 			return builder;
 		}
 
-		internal static MonoDevelop.CSharp.Completion.MemberCompletionData.MyAmbience CreateAmbience (Document doc, int offset, ICompilation compilation)
+		internal static MonoDevelop.PlayScript.Completion.MemberCompletionData.MyAmbience CreateAmbience (Document doc, int offset, ICompilation compilation)
 		{
-			return new MonoDevelop.CSharp.Completion.MemberCompletionData.MyAmbience (CreateBuilder (doc, offset, compilation));
+			return new MonoDevelop.PlayScript.Completion.MemberCompletionData.MyAmbience (CreateBuilder (doc, offset, compilation));
 		}
 
 		public string CreateTooltip (MonoDevelop.Ide.Gui.Document doc, int offset, ResolveResult result, string errorInformations, Gdk.ModifierType modifierState)
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs
--- ./main/src/addins/CSharpBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs	2013-05-20 13:08:33.000000000 -0700
@@ -29,20 +29,20 @@ using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Semantics;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using Gtk;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 using System.Text;
 using MonoDevelop.Core;
 using System.Collections.Generic;
 using System.Linq;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Completion;
+using MonoDevelop.PlayScript.Completion;
 using MonoDevelop.Components;
 using MonoDevelop.Projects;
 
@@ -61,7 +61,7 @@ namespace MonoDevelop.SourceEditor
 			public AstNode Node;
 			public CSharpAstResolver Resolver;
 
-			public ToolTipData (ICSharpCode.NRefactory.CSharp.SyntaxTree unit, ICSharpCode.NRefactory.Semantics.ResolveResult result, ICSharpCode.NRefactory.CSharp.AstNode node, CSharpAstResolver file)
+			public ToolTipData (ICSharpCode.NRefactory.PlayScript.SyntaxTree unit, ICSharpCode.NRefactory.Semantics.ResolveResult result, ICSharpCode.NRefactory.PlayScript.AstNode node, CSharpAstResolver file)
 			{
 				this.Unit = unit;
 				this.Result = result;
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/SyntaxMode/ActionScriptSyntaxMode.xml ./main/src/addins/PlayScriptBinding/SyntaxMode/ActionScriptSyntaxMode.xml
--- ./main/src/addins/CSharpBinding/SyntaxMode/ActionScriptSyntaxMode.xml	2013-05-20 13:08:33.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/SyntaxMode/ActionScriptSyntaxMode.xml	2013-05-20 13:08:33.000000000 -0700
@@ -1,9 +1,9 @@
-<!-- CSharpSyntaxMode.xml
+<!-- ActionScriptSyntaxMode.xml
 
  Author:
-   Mike Krüger <mkrueger@novell.com>
+   Federico Di Gregorio <fog@initd.org>
 
- Copyright (c) 2007 Novell, Inc (http://www.novell.com)
+ Copyright (c) 2009 Federico Di Gregorio <fog@initd.org>
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
@@ -23,148 +23,56 @@
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE. -->
  
-<SyntaxMode name = "C#" mimeTypes="text/x-csharp">
-	<Property name="LineComment">//</Property>
-	<Property name="BlockCommentStart">/*</Property>
-	<Property name="BlockCommentEnd">*/</Property>
-	<Property name="StringQuote">"</Property>
-	<Property name="StringQuote">'</Property>
-	
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor">#if</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#else</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor">#elif</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#endif</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#define</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#undef</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#warning</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#error</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.line">#line</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#region</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#endregion</EolSpan>
-	<EolSpan tagColor = "Preprocessor" rule="text.preprocessor.empty">#pragma</EolSpan>
-	
-	
-	
-	<EolSpan color = "Comment(Doc)" rule="XmlDocumentation" tagColor="Comment(DocTag)">///</EolSpan>
-	<EolSpan color = "Comment(Line)" rule="Comment" tagColor="Comment(Line)">//</EolSpan>
-	
-	<Span color = "Comment(Block)" rule="Comment" tagColor="Comment(Line)">
-		<Begin>/*</Begin>
-		<End>*/</End>
+<SyntaxMode name = "ActionScript" mimeTypes="text/x-actionscript">
+	<EolSpan color = "Comment(Line)" rule="Comment">//</EolSpan>
+	<Span color = "Comment(Line)" rule="Comment">
+		<Begin>/*</Begin>
+		<End>*/</End>
 	</Span>
 	
-	<Span color = "String(C# @ Verbatim)" rule="VerbatimString" stopateol = "false" escape='""'>
-		<Begin>@"</Begin>
-		<End>"</End>
-	</Span>
-
-	<Span color = "String" rule="String" stopateol = "true">
+	<Span color = "String" stopateol = "true" escape='\"'>
 		<Begin>"</Begin>
 		<End>"</End>
 	</Span>
 
-	<Span color = "String" rule="String" stopateol = "true">
+	<Span color = "String" stopateol = "true" escape='\"'>
 		<Begin>&apos;</Begin>
 		<End>&apos;</End>
 	</Span>
 	
-	<Match color = "Number">CSharpNumber</Match>
-	
-	<Keywords color = "Punctuation">
-		<Word>+</Word>
-		<Word>-</Word>
-		<Word>*</Word>
-		<Word>/</Word>
-		<Word>%</Word>
-		<Word>^</Word>
-		
-		<Word>?</Word>
-		<Word>:</Word>
-		
-		<Word>&amp;</Word>
-		
-		<Word>=</Word>
-		<Word>;</Word>
-		<Word>,</Word>
-		<Word>.</Word>
-	</Keywords>
-	
-	<Keywords color = "Punctuation(Brackets)">
-		<Word>(</Word>
-		<Word>)</Word>
-		<Word>&lt;</Word>
-		<Word>&gt;</Word>
-		<Word>{</Word>
-		<Word>}</Word>
-		<Word>[</Word>
-		<Word>]</Word>
-	</Keywords>
+	<Match color = "String">CSharpNumber</Match>
 	
 	<Keywords color = "Keyword(Access)">
 		<Word>this</Word>
-		<Word>base</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Operator)">
-		<Word>as</Word>
-		<Word>is</Word>
-		<Word>new</Word>
-		<Word>sizeof</Word>
-		<Word>typeof</Word>
-		<Word>stackalloc</Word>
+		<Word>new</Word>
+		<Word>typeof</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Selection)">
-		<Word>else</Word>
-		<Word>if</Word>
-		<Word>switch</Word>
-		<Word>case</Word>
-		<Word>default</Word>
+		<Word>else</Word>
+		<Word>if</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Iteration)">
-		<Word>do</Word>
-		<Word>for</Word>
-		<Word>foreach</Word>
-		<Word>in</Word>
+		<Word>do</Word>
+		<Word>for</Word>
 		<Word>while</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Jump)">
-		<Word>break</Word>
-		<Word>continue</Word>
-		<Word>goto</Word>
-		<Word>return</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Context)">
-		<Word>yield</Word>
-		<Word>partial</Word>
-		<Word>global</Word>
-		<Word>where</Word>
-		<Word>__arglist</Word>
-		<Word>__makeref</Word>
-		<Word>__reftype</Word>
-		<Word>__refvalue</Word>
-		<Word>by</Word>
-		<Word>descending</Word>
-		<Word>from</Word>
-		<Word>group</Word>
-		<Word>into</Word>
-		<Word>orderby</Word>
-		<Word>select</Word>
-		<Word>let</Word>
-		<Word>ascending</Word>
-		<Word>join</Word>
-		<Word>on</Word>
-		<Word>equals</Word>
+		<Word>break</Word>
+		<Word>continue</Word>
+		<Word>return</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Exception)">
-		<Word>try</Word>
-		<Word>throw</Word>
-		<Word>catch</Word>
-		<Word>finally</Word>
+		<Word>try</Word>
+		<Word>throw</Word>
+		<Word>catch</Word>
+		<Word>finally</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Constants)">
@@ -172,173 +80,43 @@
 		<Word>false</Word>
 		<Word>null</Word>
 	</Keywords>
-	
-	<Keywords color = "Keyword(Modifiers)">
-		<Word>abstract</Word>
-		<Word>async</Word>
-		<Word>await</Word>
-		<Word>const</Word>
-		<Word>event</Word>
-		<Word>extern</Word>
-		<Word>override</Word>
-		<Word>readonly</Word>
-		<Word>sealed</Word>
-		<Word>static</Word>
-		<Word>virtual</Word>
-		<Word>volatile</Word>
-		
-		<Word>public</Word>
-		<Word>protected</Word>
-		<Word>private</Word>
-		<Word>internal</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Type)">
-		<Word>bool</Word>
-		<Word>byte</Word>
-		<Word>char</Word>
-		<Word>decimal</Word>
-		<Word>double</Word>
-		<Word>float</Word>
-		<Word>int</Word>
-		<Word>long</Word>
-		<Word>sbyte</Word>
-		<Word>short</Word>
-		<Word>uint</Word>
-		<Word>ushort</Word>
-		<Word>ulong</Word>
-		<Word>object</Word>
-		<Word>string</Word>
-		<Word>var</Word>
-		<Word>dynamic</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Void)">
+
+	<Keywords color = "Keyword(Void)">
 		<Word>void</Word>
 	</Keywords>
-	
-	<Keywords color = "Keyword(Namespace)">
-		<Word>namespace</Word>
-		<Word>using</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Property)">		<Word>get</Word>
-		<Word>set</Word>
-		<Word>add</Word>
-		<Word>remove</Word>
-		<Word>value</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Declaration)">
-		<Word>class</Word>
-		<Word>interface</Word>
-		<Word>delegate</Word>
-		<Word>enum</Word>
-		<Word>struct</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Parameter)">
-		<Word>params</Word>
-		<Word>ref</Word>
-		<Word>out</Word>
-	</Keywords>
-	
-	
-	<Keywords color = "Keyword(Operator Declaration)">
-		<Word>explicit</Word>
-		<Word>implicit</Word>
-		
-		<Word>operator</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Other)">
-		<Word>checked</Word>
-		<Word>unchecked</Word>
-		<Word>fixed</Word>
-		<Word>unsafe</Word>
-		<Word>lock</Word>
-	</Keywords>
-
-	<Rule name = "text.preprocessor" ignorecase="True">
 		
-		<Keywords color = "Keyword(Constants)">
-			<Word>true</Word>
-			<Word>false</Word>
-		</Keywords>
-		
-		<Keywords color = "Punctuation">
-			<Word>==</Word>
-			<Word>!=</Word>
-			<Word>!</Word>
-			<Word>&amp;&amp;</Word>
-			<Word>||</Word>
-		</Keywords>
-	
-		<Keywords color = "Punctuation(Brackets)">
-			<Word>(</Word>
-			<Word>)</Word>
-		</Keywords>
-
-
-		<EolSpan color = "Comment(Doc)" rule="XmlDocumentation" tagColor="Comment(DocTag)">///</EolSpan>
-		<EolSpan color = "Comment(Line)" rule="Comment" tagColor="Comment(Line)">//</EolSpan>
-	</Rule>
-
-	<Rule name = "text.preprocessor.empty" ignorecase="True">
-		<EolSpan color = "Comment(Doc)" rule="XmlDocumentation" tagColor="Comment(DocTag)">///</EolSpan>
-		<EolSpan color = "Comment(Line)" rule="Comment" tagColor="Comment(Line)">//</EolSpan>
-	</Rule>
-
-	<Rule name = "text.preprocessor.line" ignorecase="True">
-		
-		<Keywords color = "Keyword(Context)">
-			<Word>hidden</Word>
-			<Word>default</Word>
-		</Keywords>
-		
-		<Span color = "String" rule="String" stopateol = "true">
-			<Begin>"</Begin>
-			<End>"</End>
-		</Span>
+	<Keywords color = "Keyword(Type)">
+		<Word>var</Word>
+	</Keywords>
 
-		<Match color = "Number">CSharpNumber</Match>
+	<Keywords color = "Keyword(Declaration)">
+		<Word>function</Word>
+		<Word>class</Word>
+	</Keywords>
+
+	<Keywords color = "Keyword(Modifiers)">
+		<Word>public</Word>
+		<Word>protected</Word>
+		<Word>private</Word>
+		<Word>internal</Word>
+		<Word>static</Word>
+		<Word>override</Word>
+		<Word>extends</Word>
+	</Keywords>
+
+	<Keywords color = "Keyword(Namespace)">
+		<Word>package</Word>
+		<Word>import</Word>
+		<Word>use</Word>
+		<Word>namespace</Word>
+	</Keywords>
 	
-		<EolSpan color = "Comment(Doc)" rule="XmlDocumentation" tagColor="Comment(DocTag)">///</EolSpan>
-		<EolSpan color = "Comment(Line)" rule="Comment" tagColor="Comment(Line)">//</EolSpan>
-	</Rule>
-
-		
 	<Rule name = "Comment">
 		<Keywords color="Comment Tag" ignorecase="True">
-			<Word>TODO</Word>
-			<Word>FIXME</Word>
-			<Word>HACK</Word>
-			<Word>UNDONE</Word>
-		</Keywords>	
-	</Rule>
-	
-	<Rule name = "String">
-		<Delimiters></Delimiters>
-		<Match color ="String(Escape)">\\(['"\\abfnrtv]|x[0-9a-fA-F]{2,4}|0\d\d)</Match>
-	</Rule>
-	
-	<Rule name = "VerbatimString">
-		<Delimiters></Delimiters>
-		<Match color ="String(Escape)">""</Match>
-	</Rule>
-	
-	<Rule name = "XmlDocumentation">
-		<Delimiters>&lt;&gt;</Delimiters>
-
-		<Span color = "Comment(DocTag)" rule = "XmlDocumentationTag">
-			<Begin>&lt;</Begin>
-			<End>&gt;</End>
-		</Span>
-	</Rule>
-
-	<Rule name = "XmlDocumentationTag">
-		
-
+			<Word>TODO</Word>
+			<Word>FIXME</Word>
+			<Word>HACK</Word>
+			<Word>UNDONE</Word>
+		</Keywords>
 	</Rule>
-
 </SyntaxMode>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/SyntaxMode/PlayScriptSyntaxMode.xml ./main/src/addins/PlayScriptBinding/SyntaxMode/PlayScriptSyntaxMode.xml
--- ./main/src/addins/CSharpBinding/SyntaxMode/PlayScriptSyntaxMode.xml	2013-05-20 13:08:33.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/SyntaxMode/PlayScriptSyntaxMode.xml	2013-05-20 13:08:33.000000000 -0700
@@ -23,7 +23,7 @@
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE. -->
  
-<SyntaxMode name = "C#" mimeTypes="text/x-csharp">
+<SyntaxMode name = "PlayScript" mimeTypes="text/x-playscript">
 	<Property name="LineComment">//</Property>
 	<Property name="BlockCommentStart">/*</Property>
 	<Property name="BlockCommentEnd">*/</Property>
@@ -49,15 +49,15 @@
 	<EolSpan color = "Comment(Line)" rule="Comment" tagColor="Comment(Line)">//</EolSpan>
 	
 	<Span color = "Comment(Block)" rule="Comment" tagColor="Comment(Line)">
-		<Begin>/*</Begin>
-		<End>*/</End>
+		<Begin>/*</Begin>
+		<End>*/</End>
 	</Span>
 	
-	<Span color = "String(C# @ Verbatim)" rule="VerbatimString" stopateol = "false" escape='""'>
+	<Span color = "String(PlayScript @ Verbatim)" rule="VerbatimString" stopateol = "false" escape='""'>
 		<Begin>@"</Begin>
-		<End>"</End>
+		<End>"</End>
 	</Span>
-
+
 	<Span color = "String" rule="String" stopateol = "true">
 		<Begin>"</Begin>
 		<End>"</End>
@@ -102,50 +102,47 @@
 	
 	<Keywords color = "Keyword(Access)">
 		<Word>this</Word>
-		<Word>base</Word>
+		<Word>super</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Operator)">
-		<Word>as</Word>
-		<Word>is</Word>
-		<Word>new</Word>
-		<Word>sizeof</Word>
-		<Word>typeof</Word>
-		<Word>stackalloc</Word>
+		<Word>as</Word>
+		<Word>is</Word>
+		<Word>new</Word>
+		<Word>sizeof</Word>
+		<Word>typeof</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Selection)">
-		<Word>else</Word>
-		<Word>if</Word>
-		<Word>switch</Word>
-		<Word>case</Word>
-		<Word>default</Word>
+		<Word>else</Word>
+		<Word>if</Word>
+		<Word>switch</Word>
+		<Word>case</Word>
+		<Word>default</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Iteration)">
-		<Word>do</Word>
-		<Word>for</Word>
-		<Word>foreach</Word>
-		<Word>in</Word>
+		<Word>do</Word>
+		<Word>for</Word>
+		<Word>each</Word>
+		<Word>in</Word>
 		<Word>while</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Jump)">
-		<Word>break</Word>
-		<Word>continue</Word>
-		<Word>goto</Word>
-		<Word>return</Word>
+		<Word>break</Word>
+		<Word>continue</Word>
+		<Word>goto</Word>
+		<Word>return</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Context)">
-		<Word>yield</Word>
-		<Word>partial</Word>
-		<Word>global</Word>
+		<Word>extends</Word>
+		<Word>implements</Word>
+		<Word>yield</Word>
+		<Word>partial</Word>
+		<Word>global</Word>
 		<Word>where</Word>
-		<Word>__arglist</Word>
-		<Word>__makeref</Word>
-		<Word>__reftype</Word>
-		<Word>__refvalue</Word>
 		<Word>by</Word>
 		<Word>descending</Word>
 		<Word>from</Word>
@@ -161,103 +158,110 @@
 	</Keywords>
 	
 	<Keywords color = "Keyword(Exception)">
-		<Word>try</Word>
-		<Word>throw</Word>
-		<Word>catch</Word>
-		<Word>finally</Word>
+		<Word>try</Word>
+		<Word>throw</Word>
+		<Word>catch</Word>
+		<Word>finally</Word>
 	</Keywords>
 	
 	<Keywords color = "Keyword(Constants)">
 		<Word>true</Word>
 		<Word>false</Word>
 		<Word>null</Word>
+		<Word>undefined</Word>
+		<Word>Infinitiy</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Modifiers)">
+	<Keywords color = "Keyword(Modifiers)">
 		<Word>abstract</Word>
 		<Word>async</Word>
 		<Word>await</Word>
-		<Word>const</Word>
-		<Word>event</Word>
-		<Word>extern</Word>
-		<Word>override</Word>
-		<Word>readonly</Word>
-		<Word>sealed</Word>
-		<Word>static</Word>
-		<Word>virtual</Word>
+		<Word>const</Word>
+		<Word>event</Word>
+		<Word>extern</Word>
+		<Word>override</Word>
+		<Word>readonly</Word>
+		<Word>final</Word>
+		<Word>static</Word>
+		<Word>virtual</Word>
 		<Word>volatile</Word>
-		
-		<Word>public</Word>
-		<Word>protected</Word>
-		<Word>private</Word>
-		<Word>internal</Word>
-	</Keywords>
-	
-	<Keywords color = "Keyword(Type)">
-		<Word>bool</Word>
-		<Word>byte</Word>
-		<Word>char</Word>
-		<Word>decimal</Word>
-		<Word>double</Word>
-		<Word>float</Word>
-		<Word>int</Word>
-		<Word>long</Word>
-		<Word>sbyte</Word>
-		<Word>short</Word>
-		<Word>uint</Word>
-		<Word>ushort</Word>
-		<Word>ulong</Word>
-		<Word>object</Word>
+		<Word>public</Word>
+		<Word>protected</Word>
+		<Word>private</Word>
+		<Word>internal</Word>
+		<Word>dynamic</Word>
+	</Keywords>
+	
+	<Keywords color = "Keyword(Type)">
+		<Word>bool</Word>
+		<Word>byte</Word>
+		<Word>char</Word>
+		<Word>decimal</Word>
+		<Word>double</Word>
+		<Word>float</Word>
+		<Word>int</Word>
+		<Word>long</Word>
+		<Word>sbyte</Word>
+		<Word>short</Word>
+		<Word>uint</Word>
+		<Word>ushort</Word>
+		<Word>ulong</Word>
+		<Word>object</Word>
 		<Word>string</Word>
 		<Word>var</Word>
-		<Word>dynamic</Word>
+		<Word>String</Word>
+		<Word>Number</Word>
+		<Word>Boolean</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Void)">
+	<Keywords color = "Keyword(Void)">
 		<Word>void</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Namespace)">
-		<Word>namespace</Word>
-		<Word>using</Word>
+	<Keywords color = "Keyword(Namespace)">
+		<Word>package</Word>
+		<Word>import</Word>
+		<Word>use</Word>
+		<Word>namespace</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Property)">		<Word>get</Word>
-		<Word>set</Word>
-		<Word>add</Word>
+	<Keywords color = "Keyword(Property)">
+		<Word>get</Word>
+		<Word>set</Word>
+		<Word>add</Word>
 		<Word>remove</Word>
-		<Word>value</Word>
+		<Word>value</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Declaration)">
-		<Word>class</Word>
-		<Word>interface</Word>
-		<Word>delegate</Word>
+	<Keywords color = "Keyword(Declaration)">
+		<Word>class</Word>
+		<Word>interface</Word>
 		<Word>enum</Word>
 		<Word>struct</Word>
+		<Word>function</Word>
+		<Word>property</Word>
+		<Word>indexer</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Parameter)">
-		<Word>params</Word>
-		<Word>ref</Word>
+	<Keywords color = "Keyword(Parameter)">
+		<Word>params</Word>
+		<Word>ref</Word>
 		<Word>out</Word>
 	</Keywords>
 	
-	
-	<Keywords color = "Keyword(Operator Declaration)">
-		<Word>explicit</Word>
+	<Keywords color = "Keyword(Operator Declaration)">
+		<Word>explicit</Word>
 		<Word>implicit</Word>
-		
 		<Word>operator</Word>
 	</Keywords>
 	
-	<Keywords color = "Keyword(Other)">
-		<Word>checked</Word>
-		<Word>unchecked</Word>
-		<Word>fixed</Word>
-		<Word>unsafe</Word>
-		<Word>lock</Word>
-	</Keywords>
+	<Keywords color = "Keyword(Other)">
+		<Word>checked</Word>
+		<Word>unchecked</Word>
+		<Word>fixed</Word>
+		<Word>unsafe</Word>
+		<Word>lock</Word>
+	</Keywords>
 
 	<Rule name = "text.preprocessor" ignorecase="True">
 		
@@ -310,11 +314,11 @@
 		
 	<Rule name = "Comment">
 		<Keywords color="Comment Tag" ignorecase="True">
-			<Word>TODO</Word>
-			<Word>FIXME</Word>
-			<Word>HACK</Word>
-			<Word>UNDONE</Word>
-		</Keywords>	
+			<Word>TODO</Word>
+			<Word>FIXME</Word>
+			<Word>HACK</Word>
+			<Word>UNDONE</Word>
+		</Keywords>	
 	</Rule>
 	
 	<Rule name = "String">
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/addin.info ./main/src/addins/PlayScriptBinding/addin.info
--- ./main/src/addins/CSharpBinding/addin.info	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/addin.info	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,45 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Addin 
+  id="PlayScriptBinding" 
+  namespace="MonoDevelop" 
+  name="PlayScript support for MonoDevelop" 
+  author="Ben Cooley/Icer Addis" 
+  copyright="Apache" 
+  url="http://playscript.github.io/" 
+  description="PlayScript support for MonoDevelop." 
+  category="Language bindings" 
+  version="4.0.5" 
+  flags="None">
+
+  <Dependencies>
+    <Addin id="Ide" version="4.0.5" />
+    <Addin id="Core" version="4.0.5" />
+    <Addin id="SourceEditor2" version="4.0.5" />
+    <Addin id="DesignerSupport" version="4.0.5" />
+  </Dependencies>
+  
+  <Runtime>
+    <Import assembly="ICSharpCode.NRefactory.PlayScript.dll" />
+    <Import assembly="MonoDevelop.PlayScriptBinding.dll" />
+    <Import assembly="PlayScript.Dynamic.dll" />
+    <Import assembly="PlayScript.Dynamic_aot.dll" />
+    <Import assembly="pscorlib.dll" />
+    <Import assembly="pscorlib_aot.dll" />
+    <Import assembly="Mono.PlayScript.dll" />
+    <Import file="playc.exe" />
+    <Import file="playc" />
+  </Runtime>
+
+  <Extension path="/MonoDevelop/Core/SupportPackages">
+    <Package name="pscorlib" version="1.0" clrVersion="Default">
+      <Assembly file="PlayScript.Dynamic.dll" />
+      <Assembly file="pscorlib.dll" />
+      <Assembly file="Mono.PlayScript.dll" />
+    </Package>
+    <Package name="pscorlib_aot" version="1.0" clrVersion="Default">
+      <Assembly file="PlayScript.Dynamic_aot.dll" />
+      <Assembly file="pscorlib_aot.dll" />
+    </Package>
+  </Extension>
+
+</Addin>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,69 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
-{
-	public partial class CSharpFormattingPolicyPanelWidget
-	{
-		private global::Gtk.VBox vbox1;
-		private global::Gtk.HBox hbox1;
-		private global::Gtk.Button buttonEdit;
-		private global::Gtk.Label label2;
-		private global::Gtk.ScrolledWindow scrolledwindow1;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget
-			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget";
-			// Container child MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.Gtk.Container+ContainerChild
-			this.vbox1 = new global::Gtk.VBox ();
-			this.vbox1.Name = "vbox1";
-			this.vbox1.Spacing = 6;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.hbox1 = new global::Gtk.HBox ();
-			this.hbox1.Name = "hbox1";
-			this.hbox1.Spacing = 6;
-			// Container child hbox1.Gtk.Box+BoxChild
-			this.buttonEdit = new global::Gtk.Button ();
-			this.buttonEdit.CanFocus = true;
-			this.buttonEdit.Name = "buttonEdit";
-			this.buttonEdit.UseStock = true;
-			this.buttonEdit.UseUnderline = true;
-			this.buttonEdit.Label = "gtk-edit";
-			this.hbox1.Add (this.buttonEdit);
-			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.buttonEdit]));
-			w1.Position = 0;
-			w1.Expand = false;
-			w1.Fill = false;
-			this.vbox1.Add (this.hbox1);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox1]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.Xalign = 0F;
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Preview:");
-			this.vbox1.Add (this.label2);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label2]));
-			w3.Position = 1;
-			w3.Expand = false;
-			w3.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.scrolledwindow1 = new global::Gtk.ScrolledWindow ();
-			this.scrolledwindow1.CanFocus = true;
-			this.scrolledwindow1.Name = "scrolledwindow1";
-			this.scrolledwindow1.ShadowType = ((global::Gtk.ShadowType)(1));
-			this.vbox1.Add (this.scrolledwindow1);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow1]));
-			w4.Position = 2;
-			this.Add (this.vbox1);
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.Show ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,494 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
-{
-	public partial class CSharpFormattingProfileDialog
-	{
-		private global::Gtk.VBox vbox5;
-		private global::Gtk.HPaned hpaned1;
-		private global::Gtk.VBox vbox2;
-		private global::Gtk.HBox hbox4;
-		private global::Gtk.Label label12;
-		private global::Gtk.ComboBox comboboxCategories;
-		private global::Gtk.Notebook notebookCategories;
-		private global::Gtk.VBox vbox8;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow;
-		private global::Gtk.TreeView treeviewIndentOptions;
-		private global::Gtk.Label label8;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow1;
-		private global::Gtk.TreeView treeviewBracePositions;
-		private global::Gtk.Label label9;
-		private global::Gtk.Table table4;
-		private global::Gtk.Entry entryAfterUsings;
-		private global::Gtk.Entry entryBeforeFirstDeclaration;
-		private global::Gtk.Entry entryBeforUsings;
-		private global::Gtk.Entry entryBetweenEvents;
-		private global::Gtk.Entry entryBetweenFields;
-		private global::Gtk.Entry entryBetweenMembers;
-		private global::Gtk.Entry entryBetweenTypes;
-		private global::Gtk.Label GtkLabel8;
-		private global::Gtk.Label GtkLabel9;
-		private global::Gtk.Label label1;
-		private global::Gtk.Label label15;
-		private global::Gtk.Label label16;
-		private global::Gtk.Label label19;
-		private global::Gtk.Label label20;
-		private global::Gtk.Label label21;
-		private global::Gtk.Label label22;
-		private global::Gtk.Label label23;
-		private global::Gtk.Label label14;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow3;
-		private global::Gtk.TreeView treeviewWrappingCategory;
-		private global::Gtk.Label label2;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow2;
-		private global::Gtk.TreeView treeviewInsertWhiteSpaceCategory;
-		private global::Gtk.Label label10;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow4;
-		private global::Gtk.TreeView treeviewNewLines;
-		private global::Gtk.Label label11;
-		private global::Gtk.VBox vbox6;
-		private global::Gtk.Label label13;
-		private global::Gtk.ScrolledWindow scrolledwindow;
-		private global::Gtk.Button buttonCancel;
-		private global::Gtk.Button buttonOk;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog
-			this.Name = "MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog";
-			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
-			this.BorderWidth = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.VBox
-			global::Gtk.VBox w1 = this.VBox;
-			w1.Name = "dialog1_VBox";
-			w1.Spacing = 6;
-			w1.BorderWidth = ((uint)(2));
-			// Container child dialog1_VBox.Gtk.Box+BoxChild
-			this.vbox5 = new global::Gtk.VBox ();
-			this.vbox5.Name = "vbox5";
-			this.vbox5.Spacing = 6;
-			// Container child vbox5.Gtk.Box+BoxChild
-			this.hpaned1 = new global::Gtk.HPaned ();
-			this.hpaned1.CanFocus = true;
-			this.hpaned1.Name = "hpaned1";
-			this.hpaned1.Position = 424;
-			// Container child hpaned1.Gtk.Paned+PanedChild
-			this.vbox2 = new global::Gtk.VBox ();
-			this.vbox2.Name = "vbox2";
-			this.vbox2.Spacing = 6;
-			// Container child vbox2.Gtk.Box+BoxChild
-			this.hbox4 = new global::Gtk.HBox ();
-			this.hbox4.Name = "hbox4";
-			this.hbox4.Spacing = 6;
-			// Container child hbox4.Gtk.Box+BoxChild
-			this.label12 = new global::Gtk.Label ();
-			this.label12.Name = "label12";
-			this.label12.LabelProp = global::Mono.Unix.Catalog.GetString ("_Category:");
-			this.label12.UseUnderline = true;
-			this.hbox4.Add (this.label12);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.label12]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child hbox4.Gtk.Box+BoxChild
-			this.comboboxCategories = global::Gtk.ComboBox.NewText ();
-			this.comboboxCategories.Name = "comboboxCategories";
-			this.hbox4.Add (this.comboboxCategories);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.comboboxCategories]));
-			w3.Position = 1;
-			this.vbox2.Add (this.hbox4);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.hbox4]));
-			w4.Position = 0;
-			w4.Expand = false;
-			w4.Fill = false;
-			// Container child vbox2.Gtk.Box+BoxChild
-			this.notebookCategories = new global::Gtk.Notebook ();
-			this.notebookCategories.CanFocus = true;
-			this.notebookCategories.Name = "notebookCategories";
-			this.notebookCategories.CurrentPage = 3;
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.vbox8 = new global::Gtk.VBox ();
-			this.vbox8.Name = "vbox8";
-			this.vbox8.Spacing = 6;
-			// Container child vbox8.Gtk.Box+BoxChild
-			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
-			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
-			this.treeviewIndentOptions = new global::Gtk.TreeView ();
-			this.treeviewIndentOptions.CanFocus = true;
-			this.treeviewIndentOptions.Name = "treeviewIndentOptions";
-			this.GtkScrolledWindow.Add (this.treeviewIndentOptions);
-			this.vbox8.Add (this.GtkScrolledWindow);
-			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.vbox8 [this.GtkScrolledWindow]));
-			w6.Position = 0;
-			this.notebookCategories.Add (this.vbox8);
-			// Notebook tab
-			this.label8 = new global::Gtk.Label ();
-			this.label8.Name = "label8";
-			this.label8.LabelProp = global::Mono.Unix.Catalog.GetString ("page1");
-			this.notebookCategories.SetTabLabel (this.vbox8, this.label8);
-			this.label8.ShowAll ();
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
-			this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
-			this.treeviewBracePositions = new global::Gtk.TreeView ();
-			this.treeviewBracePositions.CanFocus = true;
-			this.treeviewBracePositions.Name = "treeviewBracePositions";
-			this.GtkScrolledWindow1.Add (this.treeviewBracePositions);
-			this.notebookCategories.Add (this.GtkScrolledWindow1);
-			global::Gtk.Notebook.NotebookChild w9 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow1]));
-			w9.Position = 1;
-			// Notebook tab
-			this.label9 = new global::Gtk.Label ();
-			this.label9.Name = "label9";
-			this.label9.LabelProp = global::Mono.Unix.Catalog.GetString ("page2");
-			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow1, this.label9);
-			this.label9.ShowAll ();
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.table4 = new global::Gtk.Table (((uint)(10)), ((uint)(2)), false);
-			this.table4.Name = "table4";
-			this.table4.RowSpacing = ((uint)(6));
-			this.table4.ColumnSpacing = ((uint)(6));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryAfterUsings = new global::Gtk.Entry ();
-			this.entryAfterUsings.CanFocus = true;
-			this.entryAfterUsings.Name = "entryAfterUsings";
-			this.entryAfterUsings.IsEditable = true;
-			this.entryAfterUsings.InvisibleChar = '●';
-			this.table4.Add (this.entryAfterUsings);
-			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryAfterUsings]));
-			w10.TopAttach = ((uint)(2));
-			w10.BottomAttach = ((uint)(3));
-			w10.LeftAttach = ((uint)(1));
-			w10.RightAttach = ((uint)(2));
-			w10.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBeforeFirstDeclaration = new global::Gtk.Entry ();
-			this.entryBeforeFirstDeclaration.CanFocus = true;
-			this.entryBeforeFirstDeclaration.Name = "entryBeforeFirstDeclaration";
-			this.entryBeforeFirstDeclaration.IsEditable = true;
-			this.entryBeforeFirstDeclaration.InvisibleChar = '●';
-			this.table4.Add (this.entryBeforeFirstDeclaration);
-			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBeforeFirstDeclaration]));
-			w11.TopAttach = ((uint)(4));
-			w11.BottomAttach = ((uint)(5));
-			w11.LeftAttach = ((uint)(1));
-			w11.RightAttach = ((uint)(2));
-			w11.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBeforUsings = new global::Gtk.Entry ();
-			this.entryBeforUsings.CanFocus = true;
-			this.entryBeforUsings.Name = "entryBeforUsings";
-			this.entryBeforUsings.IsEditable = true;
-			this.entryBeforUsings.InvisibleChar = '●';
-			this.table4.Add (this.entryBeforUsings);
-			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBeforUsings]));
-			w12.TopAttach = ((uint)(1));
-			w12.BottomAttach = ((uint)(2));
-			w12.LeftAttach = ((uint)(1));
-			w12.RightAttach = ((uint)(2));
-			w12.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBetweenEvents = new global::Gtk.Entry ();
-			this.entryBetweenEvents.CanFocus = true;
-			this.entryBetweenEvents.Name = "entryBetweenEvents";
-			this.entryBetweenEvents.IsEditable = true;
-			this.entryBetweenEvents.InvisibleChar = '●';
-			this.table4.Add (this.entryBetweenEvents);
-			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenEvents]));
-			w13.TopAttach = ((uint)(8));
-			w13.BottomAttach = ((uint)(9));
-			w13.LeftAttach = ((uint)(1));
-			w13.RightAttach = ((uint)(2));
-			w13.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBetweenFields = new global::Gtk.Entry ();
-			this.entryBetweenFields.CanFocus = true;
-			this.entryBetweenFields.Name = "entryBetweenFields";
-			this.entryBetweenFields.IsEditable = true;
-			this.entryBetweenFields.InvisibleChar = '●';
-			this.table4.Add (this.entryBetweenFields);
-			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenFields]));
-			w14.TopAttach = ((uint)(7));
-			w14.BottomAttach = ((uint)(8));
-			w14.LeftAttach = ((uint)(1));
-			w14.RightAttach = ((uint)(2));
-			w14.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBetweenMembers = new global::Gtk.Entry ();
-			this.entryBetweenMembers.CanFocus = true;
-			this.entryBetweenMembers.Name = "entryBetweenMembers";
-			this.entryBetweenMembers.IsEditable = true;
-			this.entryBetweenMembers.InvisibleChar = '●';
-			this.table4.Add (this.entryBetweenMembers);
-			global::Gtk.Table.TableChild w15 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenMembers]));
-			w15.TopAttach = ((uint)(9));
-			w15.BottomAttach = ((uint)(10));
-			w15.LeftAttach = ((uint)(1));
-			w15.RightAttach = ((uint)(2));
-			w15.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.entryBetweenTypes = new global::Gtk.Entry ();
-			this.entryBetweenTypes.CanFocus = true;
-			this.entryBetweenTypes.Name = "entryBetweenTypes";
-			this.entryBetweenTypes.IsEditable = true;
-			this.entryBetweenTypes.InvisibleChar = '●';
-			this.table4.Add (this.entryBetweenTypes);
-			global::Gtk.Table.TableChild w16 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenTypes]));
-			w16.TopAttach = ((uint)(5));
-			w16.BottomAttach = ((uint)(6));
-			w16.LeftAttach = ((uint)(1));
-			w16.RightAttach = ((uint)(2));
-			w16.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.GtkLabel8 = new global::Gtk.Label ();
-			this.GtkLabel8.Name = "GtkLabel8";
-			this.GtkLabel8.Xalign = 0F;
-			this.GtkLabel8.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in namespaces</b>");
-			this.GtkLabel8.UseMarkup = true;
-			this.table4.Add (this.GtkLabel8);
-			global::Gtk.Table.TableChild w17 = ((global::Gtk.Table.TableChild)(this.table4 [this.GtkLabel8]));
-			w17.TopAttach = ((uint)(3));
-			w17.BottomAttach = ((uint)(4));
-			w17.XOptions = ((global::Gtk.AttachOptions)(4));
-			w17.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.GtkLabel9 = new global::Gtk.Label ();
-			this.GtkLabel9.Name = "GtkLabel9";
-			this.GtkLabel9.Xalign = 0F;
-			this.GtkLabel9.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in types</b>");
-			this.GtkLabel9.UseMarkup = true;
-			this.table4.Add (this.GtkLabel9);
-			global::Gtk.Table.TableChild w18 = ((global::Gtk.Table.TableChild)(this.table4 [this.GtkLabel9]));
-			w18.TopAttach = ((uint)(6));
-			w18.BottomAttach = ((uint)(7));
-			w18.XOptions = ((global::Gtk.AttachOptions)(4));
-			w18.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label1 = new global::Gtk.Label ();
-			this.label1.Name = "label1";
-			this.label1.Xalign = 0F;
-			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in compilation unit</b>");
-			this.label1.UseMarkup = true;
-			this.table4.Add (this.label1);
-			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table4 [this.label1]));
-			w19.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label15 = new global::Gtk.Label ();
-			this.label15.Name = "label15";
-			this.label15.Xalign = 1F;
-			this.label15.LabelProp = global::Mono.Unix.Catalog.GetString ("Before using declaration:");
-			this.table4.Add (this.label15);
-			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table4 [this.label15]));
-			w20.TopAttach = ((uint)(1));
-			w20.BottomAttach = ((uint)(2));
-			w20.XOptions = ((global::Gtk.AttachOptions)(4));
-			w20.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label16 = new global::Gtk.Label ();
-			this.label16.Name = "label16";
-			this.label16.Xalign = 1F;
-			this.label16.LabelProp = global::Mono.Unix.Catalog.GetString ("After using declaration:");
-			this.table4.Add (this.label16);
-			global::Gtk.Table.TableChild w21 = ((global::Gtk.Table.TableChild)(this.table4 [this.label16]));
-			w21.TopAttach = ((uint)(2));
-			w21.BottomAttach = ((uint)(3));
-			w21.XOptions = ((global::Gtk.AttachOptions)(4));
-			w21.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label19 = new global::Gtk.Label ();
-			this.label19.Name = "label19";
-			this.label19.Xalign = 1F;
-			this.label19.LabelProp = global::Mono.Unix.Catalog.GetString ("Between type declarations:");
-			this.table4.Add (this.label19);
-			global::Gtk.Table.TableChild w22 = ((global::Gtk.Table.TableChild)(this.table4 [this.label19]));
-			w22.TopAttach = ((uint)(5));
-			w22.BottomAttach = ((uint)(6));
-			w22.XOptions = ((global::Gtk.AttachOptions)(4));
-			w22.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label20 = new global::Gtk.Label ();
-			this.label20.Name = "label20";
-			this.label20.Xalign = 1F;
-			this.label20.LabelProp = global::Mono.Unix.Catalog.GetString ("Before first declaration:");
-			this.table4.Add (this.label20);
-			global::Gtk.Table.TableChild w23 = ((global::Gtk.Table.TableChild)(this.table4 [this.label20]));
-			w23.TopAttach = ((uint)(4));
-			w23.BottomAttach = ((uint)(5));
-			w23.XOptions = ((global::Gtk.AttachOptions)(4));
-			w23.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label21 = new global::Gtk.Label ();
-			this.label21.Name = "label21";
-			this.label21.Xalign = 1F;
-			this.label21.LabelProp = global::Mono.Unix.Catalog.GetString ("Between field declarations:");
-			this.table4.Add (this.label21);
-			global::Gtk.Table.TableChild w24 = ((global::Gtk.Table.TableChild)(this.table4 [this.label21]));
-			w24.TopAttach = ((uint)(7));
-			w24.BottomAttach = ((uint)(8));
-			w24.XOptions = ((global::Gtk.AttachOptions)(4));
-			w24.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label22 = new global::Gtk.Label ();
-			this.label22.Name = "label22";
-			this.label22.Xalign = 1F;
-			this.label22.LabelProp = global::Mono.Unix.Catalog.GetString ("Between other member declarations:");
-			this.table4.Add (this.label22);
-			global::Gtk.Table.TableChild w25 = ((global::Gtk.Table.TableChild)(this.table4 [this.label22]));
-			w25.TopAttach = ((uint)(9));
-			w25.BottomAttach = ((uint)(10));
-			w25.XOptions = ((global::Gtk.AttachOptions)(4));
-			w25.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table4.Gtk.Table+TableChild
-			this.label23 = new global::Gtk.Label ();
-			this.label23.Name = "label23";
-			this.label23.Xalign = 1F;
-			this.label23.LabelProp = global::Mono.Unix.Catalog.GetString ("Between simple event declarations:");
-			this.table4.Add (this.label23);
-			global::Gtk.Table.TableChild w26 = ((global::Gtk.Table.TableChild)(this.table4 [this.label23]));
-			w26.TopAttach = ((uint)(8));
-			w26.BottomAttach = ((uint)(9));
-			w26.XOptions = ((global::Gtk.AttachOptions)(4));
-			w26.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.notebookCategories.Add (this.table4);
-			global::Gtk.Notebook.NotebookChild w27 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.table4]));
-			w27.Position = 2;
-			// Notebook tab
-			this.label14 = new global::Gtk.Label ();
-			this.label14.Name = "label14";
-			this.label14.LabelProp = global::Mono.Unix.Catalog.GetString ("page5");
-			this.notebookCategories.SetTabLabel (this.table4, this.label14);
-			this.label14.ShowAll ();
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.GtkScrolledWindow3 = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow3.Name = "GtkScrolledWindow3";
-			this.GtkScrolledWindow3.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow3.Gtk.Container+ContainerChild
-			this.treeviewWrappingCategory = new global::Gtk.TreeView ();
-			this.treeviewWrappingCategory.CanFocus = true;
-			this.treeviewWrappingCategory.Name = "treeviewWrappingCategory";
-			this.GtkScrolledWindow3.Add (this.treeviewWrappingCategory);
-			this.notebookCategories.Add (this.GtkScrolledWindow3);
-			global::Gtk.Notebook.NotebookChild w29 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow3]));
-			w29.Position = 3;
-			// Notebook tab
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("page6");
-			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow3, this.label2);
-			this.label2.ShowAll ();
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.GtkScrolledWindow2 = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow2.Name = "GtkScrolledWindow2";
-			this.GtkScrolledWindow2.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow2.Gtk.Container+ContainerChild
-			this.treeviewInsertWhiteSpaceCategory = new global::Gtk.TreeView ();
-			this.treeviewInsertWhiteSpaceCategory.CanFocus = true;
-			this.treeviewInsertWhiteSpaceCategory.Name = "treeviewInsertWhiteSpaceCategory";
-			this.GtkScrolledWindow2.Add (this.treeviewInsertWhiteSpaceCategory);
-			this.notebookCategories.Add (this.GtkScrolledWindow2);
-			global::Gtk.Notebook.NotebookChild w31 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow2]));
-			w31.Position = 4;
-			// Notebook tab
-			this.label10 = new global::Gtk.Label ();
-			this.label10.Name = "label10";
-			this.label10.LabelProp = global::Mono.Unix.Catalog.GetString ("page3");
-			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow2, this.label10);
-			this.label10.ShowAll ();
-			// Container child notebookCategories.Gtk.Notebook+NotebookChild
-			this.GtkScrolledWindow4 = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow4.Name = "GtkScrolledWindow4";
-			this.GtkScrolledWindow4.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow4.Gtk.Container+ContainerChild
-			this.treeviewNewLines = new global::Gtk.TreeView ();
-			this.treeviewNewLines.CanFocus = true;
-			this.treeviewNewLines.Name = "treeviewNewLines";
-			this.GtkScrolledWindow4.Add (this.treeviewNewLines);
-			this.notebookCategories.Add (this.GtkScrolledWindow4);
-			global::Gtk.Notebook.NotebookChild w33 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow4]));
-			w33.Position = 5;
-			// Notebook tab
-			this.label11 = new global::Gtk.Label ();
-			this.label11.Name = "label11";
-			this.label11.LabelProp = global::Mono.Unix.Catalog.GetString ("page4");
-			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow4, this.label11);
-			this.label11.ShowAll ();
-			this.vbox2.Add (this.notebookCategories);
-			global::Gtk.Box.BoxChild w34 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.notebookCategories]));
-			w34.Position = 1;
-			this.hpaned1.Add (this.vbox2);
-			global::Gtk.Paned.PanedChild w35 = ((global::Gtk.Paned.PanedChild)(this.hpaned1 [this.vbox2]));
-			w35.Resize = false;
-			// Container child hpaned1.Gtk.Paned+PanedChild
-			this.vbox6 = new global::Gtk.VBox ();
-			this.vbox6.Name = "vbox6";
-			this.vbox6.Spacing = 6;
-			// Container child vbox6.Gtk.Box+BoxChild
-			this.label13 = new global::Gtk.Label ();
-			this.label13.Name = "label13";
-			this.label13.Xalign = 0F;
-			this.label13.LabelProp = global::Mono.Unix.Catalog.GetString ("Preview:");
-			this.vbox6.Add (this.label13);
-			global::Gtk.Box.BoxChild w36 = ((global::Gtk.Box.BoxChild)(this.vbox6 [this.label13]));
-			w36.Position = 0;
-			w36.Expand = false;
-			w36.Fill = false;
-			// Container child vbox6.Gtk.Box+BoxChild
-			this.scrolledwindow = new global::Gtk.ScrolledWindow ();
-			this.scrolledwindow.CanFocus = true;
-			this.scrolledwindow.Name = "scrolledwindow";
-			this.scrolledwindow.ShadowType = ((global::Gtk.ShadowType)(1));
-			this.vbox6.Add (this.scrolledwindow);
-			global::Gtk.Box.BoxChild w37 = ((global::Gtk.Box.BoxChild)(this.vbox6 [this.scrolledwindow]));
-			w37.Position = 1;
-			this.hpaned1.Add (this.vbox6);
-			this.vbox5.Add (this.hpaned1);
-			global::Gtk.Box.BoxChild w39 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hpaned1]));
-			w39.Position = 0;
-			w1.Add (this.vbox5);
-			global::Gtk.Box.BoxChild w40 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox5]));
-			w40.Position = 0;
-			// Internal child MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.ActionArea
-			global::Gtk.HButtonBox w41 = this.ActionArea;
-			w41.Name = "dialog1_ActionArea";
-			w41.Spacing = 10;
-			w41.BorderWidth = ((uint)(5));
-			w41.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonCancel = new global::Gtk.Button ();
-			this.buttonCancel.CanDefault = true;
-			this.buttonCancel.CanFocus = true;
-			this.buttonCancel.Name = "buttonCancel";
-			this.buttonCancel.UseStock = true;
-			this.buttonCancel.UseUnderline = true;
-			this.buttonCancel.Label = "gtk-cancel";
-			this.AddActionWidget (this.buttonCancel, -6);
-			global::Gtk.ButtonBox.ButtonBoxChild w42 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w41 [this.buttonCancel]));
-			w42.Expand = false;
-			w42.Fill = false;
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonOk = new global::Gtk.Button ();
-			this.buttonOk.CanDefault = true;
-			this.buttonOk.CanFocus = true;
-			this.buttonOk.Name = "buttonOk";
-			this.buttonOk.UseStock = true;
-			this.buttonOk.UseUnderline = true;
-			this.buttonOk.Label = "gtk-ok";
-			this.AddActionWidget (this.buttonOk, -5);
-			global::Gtk.ButtonBox.ButtonBoxChild w43 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w41 [this.buttonOk]));
-			w43.Position = 1;
-			w43.Expand = false;
-			w43.Fill = false;
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.DefaultWidth = 880;
-			this.DefaultHeight = 551;
-			this.Hide ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,119 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
-{
-	public partial class NewFormattingProfileDialog
-	{
-		private global::Gtk.VBox vbox4;
-		private global::Gtk.Label label3;
-		private global::Gtk.Entry entryProfileName;
-		private global::Gtk.Label label4;
-		private global::Gtk.ComboBox comboboxInitFrom;
-		private global::Gtk.Button buttonCancel;
-		private global::Gtk.Button buttonOk;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog
-			this.Name = "MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog";
-			this.Title = global::Mono.Unix.Catalog.GetString ("New Profile");
-			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
-			this.BorderWidth = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.VBox
-			global::Gtk.VBox w1 = this.VBox;
-			w1.Name = "dialog1_VBox";
-			w1.Spacing = 6;
-			w1.BorderWidth = ((uint)(2));
-			// Container child dialog1_VBox.Gtk.Box+BoxChild
-			this.vbox4 = new global::Gtk.VBox ();
-			this.vbox4.Name = "vbox4";
-			this.vbox4.Spacing = 6;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.label3 = new global::Gtk.Label ();
-			this.label3.Name = "label3";
-			this.label3.Xalign = 0F;
-			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("_Profile name:");
-			this.label3.UseUnderline = true;
-			this.vbox4.Add (this.label3);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.label3]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.entryProfileName = new global::Gtk.Entry ();
-			this.entryProfileName.CanFocus = true;
-			this.entryProfileName.Name = "entryProfileName";
-			this.entryProfileName.IsEditable = true;
-			this.entryProfileName.InvisibleChar = '●';
-			this.vbox4.Add (this.entryProfileName);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.entryProfileName]));
-			w3.Position = 1;
-			w3.Expand = false;
-			w3.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.label4 = new global::Gtk.Label ();
-			this.label4.Name = "label4";
-			this.label4.Xalign = 0F;
-			this.label4.LabelProp = global::Mono.Unix.Catalog.GetString ("_Initialize from profile:");
-			this.label4.UseUnderline = true;
-			this.vbox4.Add (this.label4);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.label4]));
-			w4.Position = 2;
-			w4.Expand = false;
-			w4.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.comboboxInitFrom = global::Gtk.ComboBox.NewText ();
-			this.comboboxInitFrom.Name = "comboboxInitFrom";
-			this.vbox4.Add (this.comboboxInitFrom);
-			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.comboboxInitFrom]));
-			w5.Position = 3;
-			w5.Expand = false;
-			w5.Fill = false;
-			w1.Add (this.vbox4);
-			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox4]));
-			w6.Position = 0;
-			w6.Expand = false;
-			w6.Fill = false;
-			// Internal child MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.ActionArea
-			global::Gtk.HButtonBox w7 = this.ActionArea;
-			w7.Name = "dialog1_ActionArea";
-			w7.Spacing = 10;
-			w7.BorderWidth = ((uint)(5));
-			w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonCancel = new global::Gtk.Button ();
-			this.buttonCancel.CanDefault = true;
-			this.buttonCancel.CanFocus = true;
-			this.buttonCancel.Name = "buttonCancel";
-			this.buttonCancel.UseStock = true;
-			this.buttonCancel.UseUnderline = true;
-			this.buttonCancel.Label = "gtk-cancel";
-			this.AddActionWidget (this.buttonCancel, -6);
-			global::Gtk.ButtonBox.ButtonBoxChild w8 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w7 [this.buttonCancel]));
-			w8.Expand = false;
-			w8.Fill = false;
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonOk = new global::Gtk.Button ();
-			this.buttonOk.CanDefault = true;
-			this.buttonOk.CanFocus = true;
-			this.buttonOk.Name = "buttonOk";
-			this.buttonOk.UseStock = true;
-			this.buttonOk.UseUnderline = true;
-			this.buttonOk.Label = "gtk-ok";
-			this.AddActionWidget (this.buttonOk, -5);
-			global::Gtk.ButtonBox.ButtonBoxChild w9 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w7 [this.buttonOk]));
-			w9.Position = 1;
-			w9.Expand = false;
-			w9.Fill = false;
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.DefaultWidth = 370;
-			this.DefaultHeight = 179;
-			this.label3.MnemonicWidget = this.entryProfileName;
-			this.label4.MnemonicWidget = this.comboboxInitFrom;
-			this.Hide ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,408 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Project
-{
-	internal partial class CodeGenerationPanelWidget
-	{
-		private global::Gtk.VBox vbox62;
-		private global::Gtk.Label label82;
-		private global::Gtk.HBox hbox56;
-		private global::Gtk.Label label81;
-		private global::Gtk.VBox vbox65;
-		private global::Gtk.Table table1;
-		private global::Gtk.CheckButton enableOptimizationCheckButton;
-		private global::Gtk.CheckButton generateOverflowChecksCheckButton;
-		private global::Gtk.CheckButton generateXmlOutputCheckButton;
-		private global::Gtk.HBox hbox1;
-		private global::Gtk.ComboBox comboPlatforms;
-		private global::Gtk.HBox hbox2;
-		private global::Gtk.ComboBox comboDebug;
-		private global::Gtk.Label label1;
-		private global::Gtk.Label label2;
-		private global::Gtk.Label label87;
-		private global::Gtk.Entry symbolsEntry;
-		private global::Gtk.Label label93;
-		private global::Gtk.HBox hbox48;
-		private global::Gtk.Label label73;
-		private global::Gtk.VBox vbox67;
-		private global::Gtk.HBox hbox60;
-		private global::Gtk.Label label85;
-		private global::Gtk.SpinButton warningLevelSpinButton;
-		private global::Gtk.HBox hbox3;
-		private global::Gtk.Label label86;
-		private global::Gtk.Entry ignoreWarningsEntry;
-		private global::Gtk.CheckButton warningsAsErrorsCheckButton;
-		private global::Gtk.Label label94;
-		private global::Gtk.HBox hbox5;
-		private global::Gtk.Label label74;
-		private global::Gtk.HBox hbox6;
-		private global::Gtk.Label label88;
-		private global::Gtk.Entry additionalArgsEntry;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Project.CodeGenerationPanelWidget
-			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Project.CodeGenerationPanelWidget";
-			// Container child MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.Gtk.Container+ContainerChild
-			this.vbox62 = new global::Gtk.VBox ();
-			this.vbox62.Name = "vbox62";
-			this.vbox62.Spacing = 12;
-			this.vbox62.BorderWidth = ((uint)(6));
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.label82 = new global::Gtk.Label ();
-			this.label82.Name = "label82";
-			this.label82.Xalign = 0F;
-			this.label82.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>General Options</b>");
-			this.label82.UseMarkup = true;
-			this.vbox62.Add (this.label82);
-			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label82]));
-			w1.Position = 0;
-			w1.Expand = false;
-			w1.Fill = false;
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.hbox56 = new global::Gtk.HBox ();
-			this.hbox56.Name = "hbox56";
-			// Container child hbox56.Gtk.Box+BoxChild
-			this.label81 = new global::Gtk.Label ();
-			this.label81.WidthRequest = 18;
-			this.label81.Name = "label81";
-			this.hbox56.Add (this.label81);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox56 [this.label81]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child hbox56.Gtk.Box+BoxChild
-			this.vbox65 = new global::Gtk.VBox ();
-			this.vbox65.Name = "vbox65";
-			this.vbox65.Spacing = 6;
-			// Container child vbox65.Gtk.Box+BoxChild
-			this.table1 = new global::Gtk.Table (((uint)(6)), ((uint)(2)), false);
-			this.table1.Name = "table1";
-			this.table1.RowSpacing = ((uint)(6));
-			this.table1.ColumnSpacing = ((uint)(6));
-			// Container child table1.Gtk.Table+TableChild
-			this.enableOptimizationCheckButton = new global::Gtk.CheckButton ();
-			this.enableOptimizationCheckButton.CanFocus = true;
-			this.enableOptimizationCheckButton.Name = "enableOptimizationCheckButton";
-			this.enableOptimizationCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Enable _optimizations");
-			this.enableOptimizationCheckButton.DrawIndicator = true;
-			this.enableOptimizationCheckButton.UseUnderline = true;
-			this.table1.Add (this.enableOptimizationCheckButton);
-			global::Gtk.Table.TableChild w3 = ((global::Gtk.Table.TableChild)(this.table1 [this.enableOptimizationCheckButton]));
-			w3.TopAttach = ((uint)(1));
-			w3.BottomAttach = ((uint)(2));
-			w3.RightAttach = ((uint)(2));
-			w3.XOptions = ((global::Gtk.AttachOptions)(4));
-			w3.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.generateOverflowChecksCheckButton = new global::Gtk.CheckButton ();
-			this.generateOverflowChecksCheckButton.CanFocus = true;
-			this.generateOverflowChecksCheckButton.Name = "generateOverflowChecksCheckButton";
-			this.generateOverflowChecksCheckButton.Label = global::Mono.Unix.Catalog.GetString ("_Generate overflow checks");
-			this.generateOverflowChecksCheckButton.DrawIndicator = true;
-			this.generateOverflowChecksCheckButton.UseUnderline = true;
-			this.table1.Add (this.generateOverflowChecksCheckButton);
-			global::Gtk.Table.TableChild w4 = ((global::Gtk.Table.TableChild)(this.table1 [this.generateOverflowChecksCheckButton]));
-			w4.RightAttach = ((uint)(2));
-			w4.XOptions = ((global::Gtk.AttachOptions)(4));
-			w4.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.generateXmlOutputCheckButton = new global::Gtk.CheckButton ();
-			this.generateXmlOutputCheckButton.CanFocus = true;
-			this.generateXmlOutputCheckButton.Name = "generateXmlOutputCheckButton";
-			this.generateXmlOutputCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Generate _xml documentation");
-			this.generateXmlOutputCheckButton.Active = true;
-			this.generateXmlOutputCheckButton.DrawIndicator = true;
-			this.generateXmlOutputCheckButton.UseUnderline = true;
-			this.table1.Add (this.generateXmlOutputCheckButton);
-			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table1 [this.generateXmlOutputCheckButton]));
-			w5.TopAttach = ((uint)(2));
-			w5.BottomAttach = ((uint)(3));
-			w5.RightAttach = ((uint)(2));
-			w5.XOptions = ((global::Gtk.AttachOptions)(4));
-			w5.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.hbox1 = new global::Gtk.HBox ();
-			this.hbox1.Name = "hbox1";
-			this.hbox1.Spacing = 6;
-			// Container child hbox1.Gtk.Box+BoxChild
-			this.comboPlatforms = global::Gtk.ComboBox.NewText ();
-			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString ("Any CPU"));
-			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString ("x86"));
-			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString ("x64"));
-			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString ("Itanium"));
-			this.comboPlatforms.Name = "comboPlatforms";
-			this.comboPlatforms.Active = 0;
-			this.hbox1.Add (this.comboPlatforms);
-			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.comboPlatforms]));
-			w6.Position = 0;
-			w6.Expand = false;
-			w6.Fill = false;
-			this.table1.Add (this.hbox1);
-			global::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.table1 [this.hbox1]));
-			w7.TopAttach = ((uint)(5));
-			w7.BottomAttach = ((uint)(6));
-			w7.LeftAttach = ((uint)(1));
-			w7.RightAttach = ((uint)(2));
-			w7.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.hbox2 = new global::Gtk.HBox ();
-			this.hbox2.Name = "hbox2";
-			this.hbox2.Spacing = 6;
-			// Container child hbox2.Gtk.Box+BoxChild
-			this.comboDebug = global::Gtk.ComboBox.NewText ();
-			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString ("Full"));
-			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString ("Symbols only"));
-			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString ("None"));
-			this.comboDebug.Name = "comboDebug";
-			this.comboDebug.Active = 0;
-			this.hbox2.Add (this.comboDebug);
-			global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(this.hbox2 [this.comboDebug]));
-			w8.Position = 0;
-			w8.Expand = false;
-			w8.Fill = false;
-			this.table1.Add (this.hbox2);
-			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table1 [this.hbox2]));
-			w9.TopAttach = ((uint)(3));
-			w9.BottomAttach = ((uint)(4));
-			w9.LeftAttach = ((uint)(1));
-			w9.RightAttach = ((uint)(2));
-			w9.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label1 = new global::Gtk.Label ();
-			this.label1.Name = "label1";
-			this.label1.Xalign = 0F;
-			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Platform target:");
-			this.table1.Add (this.label1);
-			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table1 [this.label1]));
-			w10.TopAttach = ((uint)(5));
-			w10.BottomAttach = ((uint)(6));
-			w10.XOptions = ((global::Gtk.AttachOptions)(4));
-			w10.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.Xalign = 0F;
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Debug information:");
-			this.table1.Add (this.label2);
-			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table1 [this.label2]));
-			w11.TopAttach = ((uint)(3));
-			w11.BottomAttach = ((uint)(4));
-			w11.XOptions = ((global::Gtk.AttachOptions)(4));
-			w11.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label87 = new global::Gtk.Label ();
-			this.label87.Name = "label87";
-			this.label87.Xalign = 0F;
-			this.label87.LabelProp = global::Mono.Unix.Catalog.GetString ("Define S_ymbols:");
-			this.label87.UseUnderline = true;
-			this.table1.Add (this.label87);
-			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.table1 [this.label87]));
-			w12.TopAttach = ((uint)(4));
-			w12.BottomAttach = ((uint)(5));
-			w12.XOptions = ((global::Gtk.AttachOptions)(4));
-			w12.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.symbolsEntry = new global::Gtk.Entry ();
-			this.symbolsEntry.CanFocus = true;
-			this.symbolsEntry.Name = "symbolsEntry";
-			this.symbolsEntry.IsEditable = true;
-			this.symbolsEntry.InvisibleChar = '●';
-			this.table1.Add (this.symbolsEntry);
-			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.table1 [this.symbolsEntry]));
-			w13.TopAttach = ((uint)(4));
-			w13.BottomAttach = ((uint)(5));
-			w13.LeftAttach = ((uint)(1));
-			w13.RightAttach = ((uint)(2));
-			w13.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.vbox65.Add (this.table1);
-			global::Gtk.Box.BoxChild w14 = ((global::Gtk.Box.BoxChild)(this.vbox65 [this.table1]));
-			w14.Position = 0;
-			w14.Expand = false;
-			w14.Fill = false;
-			this.hbox56.Add (this.vbox65);
-			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.hbox56 [this.vbox65]));
-			w15.Position = 1;
-			this.vbox62.Add (this.hbox56);
-			global::Gtk.Box.BoxChild w16 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox56]));
-			w16.Position = 1;
-			w16.Expand = false;
-			w16.Fill = false;
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.label93 = new global::Gtk.Label ();
-			this.label93.Name = "label93";
-			this.label93.Xalign = 0F;
-			this.label93.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Warnings</b>");
-			this.label93.UseMarkup = true;
-			this.label93.UseUnderline = true;
-			this.vbox62.Add (this.label93);
-			global::Gtk.Box.BoxChild w17 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label93]));
-			w17.Position = 2;
-			w17.Expand = false;
-			w17.Fill = false;
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.hbox48 = new global::Gtk.HBox ();
-			this.hbox48.Name = "hbox48";
-			// Container child hbox48.Gtk.Box+BoxChild
-			this.label73 = new global::Gtk.Label ();
-			this.label73.WidthRequest = 18;
-			this.label73.Name = "label73";
-			this.hbox48.Add (this.label73);
-			global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.hbox48 [this.label73]));
-			w18.Position = 0;
-			w18.Expand = false;
-			w18.Fill = false;
-			// Container child hbox48.Gtk.Box+BoxChild
-			this.vbox67 = new global::Gtk.VBox ();
-			this.vbox67.Name = "vbox67";
-			this.vbox67.Spacing = 6;
-			// Container child vbox67.Gtk.Box+BoxChild
-			this.hbox60 = new global::Gtk.HBox ();
-			this.hbox60.Name = "hbox60";
-			this.hbox60.Spacing = 6;
-			// Container child hbox60.Gtk.Box+BoxChild
-			this.label85 = new global::Gtk.Label ();
-			this.label85.Name = "label85";
-			this.label85.LabelProp = global::Mono.Unix.Catalog.GetString ("_Warning Level:");
-			this.label85.UseUnderline = true;
-			this.hbox60.Add (this.label85);
-			global::Gtk.Box.BoxChild w19 = ((global::Gtk.Box.BoxChild)(this.hbox60 [this.label85]));
-			w19.Position = 0;
-			w19.Expand = false;
-			w19.Fill = false;
-			// Container child hbox60.Gtk.Box+BoxChild
-			this.warningLevelSpinButton = new global::Gtk.SpinButton (0, 4, 1);
-			this.warningLevelSpinButton.CanFocus = true;
-			this.warningLevelSpinButton.Name = "warningLevelSpinButton";
-			this.warningLevelSpinButton.Adjustment.PageIncrement = 1;
-			this.warningLevelSpinButton.ClimbRate = 1;
-			this.warningLevelSpinButton.Numeric = true;
-			this.warningLevelSpinButton.Value = 2;
-			this.hbox60.Add (this.warningLevelSpinButton);
-			global::Gtk.Box.BoxChild w20 = ((global::Gtk.Box.BoxChild)(this.hbox60 [this.warningLevelSpinButton]));
-			w20.Position = 1;
-			w20.Expand = false;
-			w20.Fill = false;
-			this.vbox67.Add (this.hbox60);
-			global::Gtk.Box.BoxChild w21 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.hbox60]));
-			w21.Position = 0;
-			w21.Expand = false;
-			w21.Fill = false;
-			// Container child vbox67.Gtk.Box+BoxChild
-			this.hbox3 = new global::Gtk.HBox ();
-			this.hbox3.Name = "hbox3";
-			this.hbox3.Spacing = 6;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.label86 = new global::Gtk.Label ();
-			this.label86.Name = "label86";
-			this.label86.LabelProp = global::Mono.Unix.Catalog.GetString ("_Ignore warnings:");
-			this.label86.UseUnderline = true;
-			this.hbox3.Add (this.label86);
-			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label86]));
-			w22.Position = 0;
-			w22.Expand = false;
-			w22.Fill = false;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.ignoreWarningsEntry = new global::Gtk.Entry ();
-			this.ignoreWarningsEntry.CanFocus = true;
-			this.ignoreWarningsEntry.Name = "ignoreWarningsEntry";
-			this.ignoreWarningsEntry.IsEditable = true;
-			this.ignoreWarningsEntry.InvisibleChar = '●';
-			this.hbox3.Add (this.ignoreWarningsEntry);
-			global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.ignoreWarningsEntry]));
-			w23.Position = 1;
-			this.vbox67.Add (this.hbox3);
-			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.hbox3]));
-			w24.Position = 1;
-			w24.Expand = false;
-			w24.Fill = false;
-			// Container child vbox67.Gtk.Box+BoxChild
-			this.warningsAsErrorsCheckButton = new global::Gtk.CheckButton ();
-			this.warningsAsErrorsCheckButton.CanFocus = true;
-			this.warningsAsErrorsCheckButton.Name = "warningsAsErrorsCheckButton";
-			this.warningsAsErrorsCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Treat warnings as _errors");
-			this.warningsAsErrorsCheckButton.DrawIndicator = true;
-			this.warningsAsErrorsCheckButton.UseUnderline = true;
-			this.vbox67.Add (this.warningsAsErrorsCheckButton);
-			global::Gtk.Box.BoxChild w25 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.warningsAsErrorsCheckButton]));
-			w25.Position = 2;
-			w25.Expand = false;
-			w25.Fill = false;
-			this.hbox48.Add (this.vbox67);
-			global::Gtk.Box.BoxChild w26 = ((global::Gtk.Box.BoxChild)(this.hbox48 [this.vbox67]));
-			w26.Position = 1;
-			this.vbox62.Add (this.hbox48);
-			global::Gtk.Box.BoxChild w27 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox48]));
-			w27.Position = 3;
-			w27.Expand = false;
-			w27.Fill = false;
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.label94 = new global::Gtk.Label ();
-			this.label94.Name = "label94";
-			this.label94.Xalign = 0F;
-			this.label94.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Additional Options</b>");
-			this.label94.UseMarkup = true;
-			this.label94.UseUnderline = true;
-			this.vbox62.Add (this.label94);
-			global::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label94]));
-			w28.Position = 4;
-			w28.Expand = false;
-			w28.Fill = false;
-			// Container child vbox62.Gtk.Box+BoxChild
-			this.hbox5 = new global::Gtk.HBox ();
-			this.hbox5.Name = "hbox5";
-			this.hbox5.Spacing = 6;
-			// Container child hbox5.Gtk.Box+BoxChild
-			this.label74 = new global::Gtk.Label ();
-			this.label74.WidthRequest = 18;
-			this.label74.Name = "label74";
-			this.hbox5.Add (this.label74);
-			global::Gtk.Box.BoxChild w29 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.label74]));
-			w29.Position = 0;
-			w29.Expand = false;
-			w29.Fill = false;
-			// Container child hbox5.Gtk.Box+BoxChild
-			this.hbox6 = new global::Gtk.HBox ();
-			this.hbox6.Name = "hbox6";
-			this.hbox6.Spacing = 6;
-			// Container child hbox6.Gtk.Box+BoxChild
-			this.label88 = new global::Gtk.Label ();
-			this.label88.Name = "label88";
-			this.label88.LabelProp = global::Mono.Unix.Catalog.GetString ("_Additional arguments:");
-			this.label88.UseUnderline = true;
-			this.hbox6.Add (this.label88);
-			global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.hbox6 [this.label88]));
-			w30.Position = 0;
-			w30.Expand = false;
-			w30.Fill = false;
-			// Container child hbox6.Gtk.Box+BoxChild
-			this.additionalArgsEntry = new global::Gtk.Entry ();
-			this.additionalArgsEntry.CanFocus = true;
-			this.additionalArgsEntry.Name = "additionalArgsEntry";
-			this.additionalArgsEntry.IsEditable = true;
-			this.additionalArgsEntry.InvisibleChar = '●';
-			this.hbox6.Add (this.additionalArgsEntry);
-			global::Gtk.Box.BoxChild w31 = ((global::Gtk.Box.BoxChild)(this.hbox6 [this.additionalArgsEntry]));
-			w31.Position = 1;
-			this.hbox5.Add (this.hbox6);
-			global::Gtk.Box.BoxChild w32 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.hbox6]));
-			w32.Position = 1;
-			this.vbox62.Add (this.hbox5);
-			global::Gtk.Box.BoxChild w33 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox5]));
-			w33.Position = 5;
-			w33.Expand = false;
-			w33.Fill = false;
-			this.Add (this.vbox62);
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.label87.MnemonicWidget = this.symbolsEntry;
-			this.label85.MnemonicWidget = this.warningLevelSpinButton;
-			this.label86.MnemonicWidget = this.warningLevelSpinButton;
-			this.label88.MnemonicWidget = this.warningLevelSpinButton;
-			this.Show ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,283 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Project
-{
-	public partial class CompilerOptionsPanelWidget
-	{
-		private global::Gtk.VBox vbox1;
-		private global::Gtk.Label label82;
-		private global::Gtk.HBox hbox5;
-		private global::Gtk.Label label76;
-		private global::Gtk.VBox vbox2;
-		private global::Gtk.Table table7;
-		private global::Gtk.ComboBoxEntry codepageEntry;
-		private global::Gtk.HBox hbox57;
-		private global::Gtk.ComboBox compileTargetCombo;
-		private global::MonoDevelop.Components.FileEntry iconEntry;
-		private global::Gtk.Label label1;
-		private global::Gtk.Label label3;
-		private global::Gtk.Label label86;
-		private global::Gtk.Label label88;
-		private global::Gtk.ComboBoxEntry mainClassEntry;
-		private global::Gtk.CheckButton noStdLibCheckButton;
-		private global::Gtk.Label label83;
-		private global::Gtk.Label label75;
-		private global::Gtk.HBox hbox7;
-		private global::Gtk.Label label74;
-		private global::Gtk.VBox vbox3;
-		private global::Gtk.Table table2;
-		private global::Gtk.Label label2;
-		private global::Gtk.ComboBox langVerCombo;
-		private global::Gtk.CheckButton allowUnsafeCodeCheckButton;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget
-			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget";
-			// Container child MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.Gtk.Container+ContainerChild
-			this.vbox1 = new global::Gtk.VBox ();
-			this.vbox1.Name = "vbox1";
-			this.vbox1.Spacing = 6;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.label82 = new global::Gtk.Label ();
-			this.label82.Name = "label82";
-			this.label82.Xalign = 0F;
-			this.label82.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Code Generation</b>");
-			this.label82.UseMarkup = true;
-			this.vbox1.Add (this.label82);
-			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label82]));
-			w1.Position = 0;
-			w1.Expand = false;
-			w1.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.hbox5 = new global::Gtk.HBox ();
-			this.hbox5.Name = "hbox5";
-			this.hbox5.Spacing = 6;
-			// Container child hbox5.Gtk.Box+BoxChild
-			this.label76 = new global::Gtk.Label ();
-			this.label76.WidthRequest = 18;
-			this.label76.Name = "label76";
-			this.hbox5.Add (this.label76);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.label76]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child hbox5.Gtk.Box+BoxChild
-			this.vbox2 = new global::Gtk.VBox ();
-			this.vbox2.Name = "vbox2";
-			this.vbox2.Spacing = 6;
-			// Container child vbox2.Gtk.Box+BoxChild
-			this.table7 = new global::Gtk.Table (((uint)(5)), ((uint)(2)), false);
-			this.table7.Name = "table7";
-			this.table7.RowSpacing = ((uint)(6));
-			this.table7.ColumnSpacing = ((uint)(6));
-			// Container child table7.Gtk.Table+TableChild
-			this.codepageEntry = global::Gtk.ComboBoxEntry.NewText ();
-			this.codepageEntry.Name = "codepageEntry";
-			this.table7.Add (this.codepageEntry);
-			global::Gtk.Table.TableChild w3 = ((global::Gtk.Table.TableChild)(this.table7 [this.codepageEntry]));
-			w3.TopAttach = ((uint)(3));
-			w3.BottomAttach = ((uint)(4));
-			w3.LeftAttach = ((uint)(1));
-			w3.RightAttach = ((uint)(2));
-			w3.XOptions = ((global::Gtk.AttachOptions)(4));
-			w3.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table7.Gtk.Table+TableChild
-			this.hbox57 = new global::Gtk.HBox ();
-			this.hbox57.Name = "hbox57";
-			// Container child hbox57.Gtk.Box+BoxChild
-			this.compileTargetCombo = new global::Gtk.ComboBox ();
-			this.compileTargetCombo.Name = "compileTargetCombo";
-			this.hbox57.Add (this.compileTargetCombo);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.hbox57 [this.compileTargetCombo]));
-			w4.Position = 0;
-			w4.Expand = false;
-			w4.Fill = false;
-			this.table7.Add (this.hbox57);
-			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table7 [this.hbox57]));
-			w5.LeftAttach = ((uint)(1));
-			w5.RightAttach = ((uint)(2));
-			w5.XOptions = ((global::Gtk.AttachOptions)(4));
-			w5.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table7.Gtk.Table+TableChild
-			this.iconEntry = new global::MonoDevelop.Components.FileEntry ();
-			this.iconEntry.Name = "iconEntry";
-			this.table7.Add (this.iconEntry);
-			global::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.table7 [this.iconEntry]));
-			w6.TopAttach = ((uint)(2));
-			w6.BottomAttach = ((uint)(3));
-			w6.LeftAttach = ((uint)(1));
-			w6.RightAttach = ((uint)(2));
-			w6.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table7.Gtk.Table+TableChild
-			this.label1 = new global::Gtk.Label ();
-			this.label1.Name = "label1";
-			this.label1.Xalign = 0F;
-			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Compiler Code Page:");
-			this.table7.Add (this.label1);
-			global::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.table7 [this.label1]));
-			w7.TopAttach = ((uint)(3));
-			w7.BottomAttach = ((uint)(4));
-			w7.XOptions = ((global::Gtk.AttachOptions)(4));
-			w7.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table7.Gtk.Table+TableChild
-			this.label3 = new global::Gtk.Label ();
-			this.label3.Name = "label3";
-			this.label3.Xalign = 0F;
-			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("Win32 Icon:");
-			this.table7.Add (this.label3);
-			global::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.table7 [this.label3]));
-			w8.TopAttach = ((uint)(2));
-			w8.BottomAttach = ((uint)(3));
-			w8.XOptions = ((global::Gtk.AttachOptions)(4));
-			w8.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table7.Gtk.Table+TableChild
-			this.label86 = new global::Gtk.Label ();
-			this.label86.Name = "label86";
-			this.label86.Xalign = 0F;
-			this.label86.LabelProp = global::Mono.Unix.Catalog.GetString ("Compile _Target:");
-			this.label86.UseUnderline = true;
-			this.table7.Add (this.label86);
-			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table7 [this.label86]));
-			w9.XOptions = ((global::Gtk.AttachOptions)(4));
-			w9.YOptions = ((global::Gtk.AttachOptions)(0));
-			// Container child table7.Gtk.Table+TableChild
-			this.label88 = new global::Gtk.Label ();
-			this.label88.Name = "label88";
-			this.label88.Xalign = 0F;
-			this.label88.LabelProp = global::Mono.Unix.Catalog.GetString ("_Main Class:");
-			this.label88.UseUnderline = true;
-			this.table7.Add (this.label88);
-			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table7 [this.label88]));
-			w10.TopAttach = ((uint)(1));
-			w10.BottomAttach = ((uint)(2));
-			w10.XOptions = ((global::Gtk.AttachOptions)(4));
-			w10.YOptions = ((global::Gtk.AttachOptions)(0));
-			// Container child table7.Gtk.Table+TableChild
-			this.mainClassEntry = new global::Gtk.ComboBoxEntry ();
-			this.mainClassEntry.Name = "mainClassEntry";
-			this.table7.Add (this.mainClassEntry);
-			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table7 [this.mainClassEntry]));
-			w11.TopAttach = ((uint)(1));
-			w11.BottomAttach = ((uint)(2));
-			w11.LeftAttach = ((uint)(1));
-			w11.RightAttach = ((uint)(2));
-			w11.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.vbox2.Add (this.table7);
-			global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.table7]));
-			w12.Position = 0;
-			// Container child vbox2.Gtk.Box+BoxChild
-			this.noStdLibCheckButton = new global::Gtk.CheckButton ();
-			this.noStdLibCheckButton.CanFocus = true;
-			this.noStdLibCheckButton.Name = "noStdLibCheckButton";
-			this.noStdLibCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Do not reference mscorlib.dll");
-			this.noStdLibCheckButton.DrawIndicator = true;
-			this.noStdLibCheckButton.UseUnderline = true;
-			this.vbox2.Add (this.noStdLibCheckButton);
-			global::Gtk.Box.BoxChild w13 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.noStdLibCheckButton]));
-			w13.Position = 1;
-			w13.Expand = false;
-			w13.Fill = false;
-			this.hbox5.Add (this.vbox2);
-			global::Gtk.Box.BoxChild w14 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.vbox2]));
-			w14.Position = 1;
-			this.vbox1.Add (this.hbox5);
-			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox5]));
-			w15.Position = 1;
-			w15.Expand = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.label83 = new global::Gtk.Label ();
-			this.label83.Name = "label83";
-			this.label83.Xalign = 0F;
-			this.label83.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Language Options</b>");
-			this.label83.UseMarkup = true;
-			this.vbox1.Add (this.label83);
-			global::Gtk.Box.BoxChild w16 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label83]));
-			w16.Position = 2;
-			w16.Expand = false;
-			w16.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.label75 = new global::Gtk.Label ();
-			this.label75.WidthRequest = 18;
-			this.label75.Name = "label75";
-			this.vbox1.Add (this.label75);
-			global::Gtk.Box.BoxChild w17 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label75]));
-			w17.PackType = ((global::Gtk.PackType)(1));
-			w17.Position = 3;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.hbox7 = new global::Gtk.HBox ();
-			this.hbox7.Name = "hbox7";
-			this.hbox7.Spacing = 6;
-			// Container child hbox7.Gtk.Box+BoxChild
-			this.label74 = new global::Gtk.Label ();
-			this.label74.WidthRequest = 18;
-			this.label74.Name = "label74";
-			this.hbox7.Add (this.label74);
-			global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.hbox7 [this.label74]));
-			w18.Position = 0;
-			w18.Expand = false;
-			w18.Fill = false;
-			// Container child hbox7.Gtk.Box+BoxChild
-			this.vbox3 = new global::Gtk.VBox ();
-			this.vbox3.Name = "vbox3";
-			this.vbox3.Spacing = 6;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.table2 = new global::Gtk.Table (((uint)(1)), ((uint)(2)), false);
-			this.table2.Name = "table2";
-			this.table2.RowSpacing = ((uint)(6));
-			this.table2.ColumnSpacing = ((uint)(6));
-			// Container child table2.Gtk.Table+TableChild
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.Xalign = 0F;
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("C# Language Version:");
-			this.table2.Add (this.label2);
-			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table2 [this.label2]));
-			w19.XOptions = ((global::Gtk.AttachOptions)(4));
-			w19.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.langVerCombo = global::Gtk.ComboBox.NewText ();
-			this.langVerCombo.Name = "langVerCombo";
-			this.table2.Add (this.langVerCombo);
-			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table2 [this.langVerCombo]));
-			w20.LeftAttach = ((uint)(1));
-			w20.RightAttach = ((uint)(2));
-			w20.XOptions = ((global::Gtk.AttachOptions)(4));
-			w20.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.vbox3.Add (this.table2);
-			global::Gtk.Box.BoxChild w21 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.table2]));
-			w21.Position = 0;
-			w21.Fill = false;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.allowUnsafeCodeCheckButton = new global::Gtk.CheckButton ();
-			this.allowUnsafeCodeCheckButton.CanFocus = true;
-			this.allowUnsafeCodeCheckButton.Name = "allowUnsafeCodeCheckButton";
-			this.allowUnsafeCodeCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Allow '_unsafe' code");
-			this.allowUnsafeCodeCheckButton.Active = true;
-			this.allowUnsafeCodeCheckButton.DrawIndicator = true;
-			this.allowUnsafeCodeCheckButton.UseUnderline = true;
-			this.vbox3.Add (this.allowUnsafeCodeCheckButton);
-			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.allowUnsafeCodeCheckButton]));
-			w22.Position = 1;
-			w22.Expand = false;
-			w22.Fill = false;
-			this.hbox7.Add (this.vbox3);
-			global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.hbox7 [this.vbox3]));
-			w23.Position = 1;
-			this.vbox1.Add (this.hbox7);
-			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox7]));
-			w24.PackType = ((global::Gtk.PackType)(1));
-			w24.Position = 4;
-			w24.Expand = false;
-			w24.Fill = false;
-			this.Add (this.vbox1);
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.label88.MnemonicWidget = this.mainClassEntry;
-			this.Show ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,421 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
-{
-	public partial class NameConventionEditRuleDialog
-	{
-		private global::Gtk.VBox vbox3;
-		private global::Gtk.HBox hbox3;
-		private global::Gtk.Label label4;
-		private global::Gtk.Entry entryRuleName;
-		private global::Gtk.HBox hbox1;
-		private global::Gtk.Table table1;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow;
-		private global::Gtk.TreeView treeviewEntities;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow1;
-		private global::Gtk.TreeView treeviewAccessibility;
-		private global::Gtk.Label label5;
-		private global::Gtk.Label label6;
-		private global::Gtk.Label label7;
-		private global::Gtk.VBox vbox1;
-		private global::Gtk.CheckButton checkbuttonStatic;
-		private global::Gtk.CheckButton checkbuttonInstanceMembers;
-		private global::Gtk.Table table2;
-		private global::Gtk.Entry entryPrefix;
-		private global::Gtk.Entry entryPrefixAllowed;
-		private global::Gtk.Entry entrySuffix;
-		private global::Gtk.Label label1;
-		private global::Gtk.Label label3;
-		private global::Gtk.Label label8;
-		private global::Gtk.VBox vbox2;
-		private global::Gtk.Label label2;
-		private global::Gtk.VBox vbox4;
-		private global::Gtk.RadioButton radiobuttonPascalCase;
-		private global::Gtk.RadioButton radiobuttonCamelCase;
-		private global::Gtk.RadioButton radiobuttonAllUpper;
-		private global::Gtk.RadioButton radiobuttonAllLower;
-		private global::Gtk.RadioButton radiobuttonFirstUpper;
-		private global::Gtk.Button buttonCancel;
-		private global::Gtk.Button buttonOk;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog
-			this.WidthRequest = 640;
-			this.HeightRequest = 480;
-			this.Name = "MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog";
-			this.Title = global::Mono.Unix.Catalog.GetString ("Edit Naming Rule");
-			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
-			this.Modal = true;
-			this.Resizable = false;
-			this.DestroyWithParent = true;
-			this.SkipPagerHint = true;
-			this.SkipTaskbarHint = true;
-			// Internal child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.VBox
-			global::Gtk.VBox w1 = this.VBox;
-			w1.Name = "dialog1_VBox";
-			w1.BorderWidth = ((uint)(2));
-			// Container child dialog1_VBox.Gtk.Box+BoxChild
-			this.vbox3 = new global::Gtk.VBox ();
-			this.vbox3.Name = "vbox3";
-			this.vbox3.Spacing = 6;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.hbox3 = new global::Gtk.HBox ();
-			this.hbox3.Name = "hbox3";
-			this.hbox3.Spacing = 6;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.label4 = new global::Gtk.Label ();
-			this.label4.Name = "label4";
-			this.label4.Xalign = 1F;
-			this.label4.LabelProp = global::Mono.Unix.Catalog.GetString ("_Rule:");
-			this.label4.UseUnderline = true;
-			this.hbox3.Add (this.label4);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label4]));
-			w2.Position = 0;
-			w2.Expand = false;
-			w2.Fill = false;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.entryRuleName = new global::Gtk.Entry ();
-			this.entryRuleName.CanFocus = true;
-			this.entryRuleName.Name = "entryRuleName";
-			this.entryRuleName.IsEditable = true;
-			this.entryRuleName.InvisibleChar = '●';
-			this.hbox3.Add (this.entryRuleName);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.entryRuleName]));
-			w3.Position = 1;
-			this.vbox3.Add (this.hbox3);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.hbox3]));
-			w4.Position = 0;
-			w4.Expand = false;
-			w4.Fill = false;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.hbox1 = new global::Gtk.HBox ();
-			this.hbox1.Name = "hbox1";
-			this.hbox1.Spacing = 6;
-			// Container child hbox1.Gtk.Box+BoxChild
-			this.table1 = new global::Gtk.Table (((uint)(4)), ((uint)(2)), false);
-			this.table1.Name = "table1";
-			this.table1.RowSpacing = ((uint)(6));
-			this.table1.ColumnSpacing = ((uint)(6));
-			this.table1.BorderWidth = ((uint)(6));
-			// Container child table1.Gtk.Table+TableChild
-			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
-			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
-			this.treeviewEntities = new global::Gtk.TreeView ();
-			this.treeviewEntities.WidthRequest = 0;
-			this.treeviewEntities.CanFocus = true;
-			this.treeviewEntities.Name = "treeviewEntities";
-			this.treeviewEntities.HeadersVisible = false;
-			this.GtkScrolledWindow.Add (this.treeviewEntities);
-			this.table1.Add (this.GtkScrolledWindow);
-			global::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.table1 [this.GtkScrolledWindow]));
-			w6.TopAttach = ((uint)(1));
-			w6.BottomAttach = ((uint)(2));
-			w6.RightAttach = ((uint)(2));
-			w6.XOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
-			this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
-			this.treeviewAccessibility = new global::Gtk.TreeView ();
-			this.treeviewAccessibility.CanFocus = true;
-			this.treeviewAccessibility.Name = "treeviewAccessibility";
-			this.treeviewAccessibility.HeadersVisible = false;
-			this.GtkScrolledWindow1.Add (this.treeviewAccessibility);
-			this.table1.Add (this.GtkScrolledWindow1);
-			global::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.table1 [this.GtkScrolledWindow1]));
-			w8.TopAttach = ((uint)(3));
-			w8.BottomAttach = ((uint)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label5 = new global::Gtk.Label ();
-			this.label5.Name = "label5";
-			this.label5.Xalign = 0F;
-			this.label5.LabelProp = global::Mono.Unix.Catalog.GetString ("_Affected entities:");
-			this.label5.UseUnderline = true;
-			this.table1.Add (this.label5);
-			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table1 [this.label5]));
-			w9.XOptions = ((global::Gtk.AttachOptions)(4));
-			w9.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label6 = new global::Gtk.Label ();
-			this.label6.Name = "label6";
-			this.label6.Xalign = 0F;
-			this.label6.LabelProp = global::Mono.Unix.Catalog.GetString ("_Accessibility:");
-			this.label6.UseUnderline = true;
-			this.table1.Add (this.label6);
-			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table1 [this.label6]));
-			w10.TopAttach = ((uint)(2));
-			w10.BottomAttach = ((uint)(3));
-			w10.XOptions = ((global::Gtk.AttachOptions)(4));
-			w10.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.label7 = new global::Gtk.Label ();
-			this.label7.Name = "label7";
-			this.label7.Xalign = 0F;
-			this.label7.LabelProp = global::Mono.Unix.Catalog.GetString ("Static/Non Static");
-			this.table1.Add (this.label7);
-			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table1 [this.label7]));
-			w11.TopAttach = ((uint)(2));
-			w11.BottomAttach = ((uint)(3));
-			w11.LeftAttach = ((uint)(1));
-			w11.RightAttach = ((uint)(2));
-			w11.XOptions = ((global::Gtk.AttachOptions)(4));
-			w11.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table1.Gtk.Table+TableChild
-			this.vbox1 = new global::Gtk.VBox ();
-			this.vbox1.Name = "vbox1";
-			this.vbox1.Spacing = 6;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.checkbuttonStatic = new global::Gtk.CheckButton ();
-			this.checkbuttonStatic.CanFocus = true;
-			this.checkbuttonStatic.Name = "checkbuttonStatic";
-			this.checkbuttonStatic.Label = global::Mono.Unix.Catalog.GetString ("_Static member and types");
-			this.checkbuttonStatic.Active = true;
-			this.checkbuttonStatic.DrawIndicator = true;
-			this.checkbuttonStatic.UseUnderline = true;
-			this.vbox1.Add (this.checkbuttonStatic);
-			global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.checkbuttonStatic]));
-			w12.Position = 0;
-			w12.Expand = false;
-			w12.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.checkbuttonInstanceMembers = new global::Gtk.CheckButton ();
-			this.checkbuttonInstanceMembers.CanFocus = true;
-			this.checkbuttonInstanceMembers.Name = "checkbuttonInstanceMembers";
-			this.checkbuttonInstanceMembers.Label = global::Mono.Unix.Catalog.GetString ("_Instance members and locals");
-			this.checkbuttonInstanceMembers.DrawIndicator = true;
-			this.checkbuttonInstanceMembers.UseUnderline = true;
-			this.vbox1.Add (this.checkbuttonInstanceMembers);
-			global::Gtk.Box.BoxChild w13 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.checkbuttonInstanceMembers]));
-			w13.Position = 1;
-			w13.Expand = false;
-			w13.Fill = false;
-			this.table1.Add (this.vbox1);
-			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.table1 [this.vbox1]));
-			w14.TopAttach = ((uint)(3));
-			w14.BottomAttach = ((uint)(4));
-			w14.LeftAttach = ((uint)(1));
-			w14.RightAttach = ((uint)(2));
-			w14.XOptions = ((global::Gtk.AttachOptions)(4));
-			w14.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.hbox1.Add (this.table1);
-			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.table1]));
-			w15.Position = 0;
-			// Container child hbox1.Gtk.Box+BoxChild
-			this.table2 = new global::Gtk.Table (((uint)(4)), ((uint)(2)), false);
-			this.table2.Name = "table2";
-			this.table2.RowSpacing = ((uint)(6));
-			this.table2.ColumnSpacing = ((uint)(6));
-			// Container child table2.Gtk.Table+TableChild
-			this.entryPrefix = new global::Gtk.Entry ();
-			this.entryPrefix.CanFocus = true;
-			this.entryPrefix.Name = "entryPrefix";
-			this.entryPrefix.IsEditable = true;
-			this.entryPrefix.InvisibleChar = '●';
-			this.table2.Add (this.entryPrefix);
-			global::Gtk.Table.TableChild w16 = ((global::Gtk.Table.TableChild)(this.table2 [this.entryPrefix]));
-			w16.LeftAttach = ((uint)(1));
-			w16.RightAttach = ((uint)(2));
-			w16.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.entryPrefixAllowed = new global::Gtk.Entry ();
-			this.entryPrefixAllowed.CanFocus = true;
-			this.entryPrefixAllowed.Name = "entryPrefixAllowed";
-			this.entryPrefixAllowed.IsEditable = true;
-			this.entryPrefixAllowed.InvisibleChar = '●';
-			this.table2.Add (this.entryPrefixAllowed);
-			global::Gtk.Table.TableChild w17 = ((global::Gtk.Table.TableChild)(this.table2 [this.entryPrefixAllowed]));
-			w17.TopAttach = ((uint)(1));
-			w17.BottomAttach = ((uint)(2));
-			w17.LeftAttach = ((uint)(1));
-			w17.RightAttach = ((uint)(2));
-			w17.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.entrySuffix = new global::Gtk.Entry ();
-			this.entrySuffix.CanFocus = true;
-			this.entrySuffix.Name = "entrySuffix";
-			this.entrySuffix.IsEditable = true;
-			this.entrySuffix.InvisibleChar = '●';
-			this.table2.Add (this.entrySuffix);
-			global::Gtk.Table.TableChild w18 = ((global::Gtk.Table.TableChild)(this.table2 [this.entrySuffix]));
-			w18.TopAttach = ((uint)(3));
-			w18.BottomAttach = ((uint)(4));
-			w18.LeftAttach = ((uint)(1));
-			w18.RightAttach = ((uint)(2));
-			w18.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.label1 = new global::Gtk.Label ();
-			this.label1.Name = "label1";
-			this.label1.Xalign = 1F;
-			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Prefix:");
-			this.table2.Add (this.label1);
-			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table2 [this.label1]));
-			w19.XOptions = ((global::Gtk.AttachOptions)(4));
-			w19.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.label3 = new global::Gtk.Label ();
-			this.label3.Name = "label3";
-			this.label3.Xalign = 1F;
-			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("Suffix:");
-			this.table2.Add (this.label3);
-			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table2 [this.label3]));
-			w20.TopAttach = ((uint)(3));
-			w20.BottomAttach = ((uint)(4));
-			w20.XOptions = ((global::Gtk.AttachOptions)(4));
-			w20.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.label8 = new global::Gtk.Label ();
-			this.label8.Name = "label8";
-			this.label8.Xalign = 1F;
-			this.label8.LabelProp = global::Mono.Unix.Catalog.GetString ("Optional Prefixes:");
-			this.table2.Add (this.label8);
-			global::Gtk.Table.TableChild w21 = ((global::Gtk.Table.TableChild)(this.table2 [this.label8]));
-			w21.TopAttach = ((uint)(1));
-			w21.BottomAttach = ((uint)(2));
-			w21.XOptions = ((global::Gtk.AttachOptions)(4));
-			w21.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.vbox2 = new global::Gtk.VBox ();
-			this.vbox2.Name = "vbox2";
-			this.vbox2.Spacing = 6;
-			// Container child vbox2.Gtk.Box+BoxChild
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.Xalign = 1F;
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Style:");
-			this.vbox2.Add (this.label2);
-			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.label2]));
-			w22.Position = 0;
-			w22.Expand = false;
-			w22.Fill = false;
-			this.table2.Add (this.vbox2);
-			global::Gtk.Table.TableChild w23 = ((global::Gtk.Table.TableChild)(this.table2 [this.vbox2]));
-			w23.TopAttach = ((uint)(2));
-			w23.BottomAttach = ((uint)(3));
-			w23.XOptions = ((global::Gtk.AttachOptions)(4));
-			w23.YOptions = ((global::Gtk.AttachOptions)(4));
-			// Container child table2.Gtk.Table+TableChild
-			this.vbox4 = new global::Gtk.VBox ();
-			this.vbox4.Name = "vbox4";
-			this.vbox4.Spacing = 6;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.radiobuttonPascalCase = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("_PascalCase"));
-			this.radiobuttonPascalCase.CanFocus = true;
-			this.radiobuttonPascalCase.Name = "radiobuttonPascalCase";
-			this.radiobuttonPascalCase.DrawIndicator = true;
-			this.radiobuttonPascalCase.UseUnderline = true;
-			this.radiobuttonPascalCase.Group = new global::GLib.SList (global::System.IntPtr.Zero);
-			this.vbox4.Add (this.radiobuttonPascalCase);
-			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonPascalCase]));
-			w24.Position = 0;
-			w24.Expand = false;
-			w24.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.radiobuttonCamelCase = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("_camelCase"));
-			this.radiobuttonCamelCase.CanFocus = true;
-			this.radiobuttonCamelCase.Name = "radiobuttonCamelCase";
-			this.radiobuttonCamelCase.DrawIndicator = true;
-			this.radiobuttonCamelCase.UseUnderline = true;
-			this.radiobuttonCamelCase.Group = this.radiobuttonPascalCase.Group;
-			this.vbox4.Add (this.radiobuttonCamelCase);
-			global::Gtk.Box.BoxChild w25 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonCamelCase]));
-			w25.Position = 1;
-			w25.Expand = false;
-			w25.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.radiobuttonAllUpper = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("_ALL__Upper"));
-			this.radiobuttonAllUpper.CanFocus = true;
-			this.radiobuttonAllUpper.Name = "radiobuttonAllUpper";
-			this.radiobuttonAllUpper.DrawIndicator = true;
-			this.radiobuttonAllUpper.UseUnderline = true;
-			this.radiobuttonAllUpper.Group = this.radiobuttonPascalCase.Group;
-			this.vbox4.Add (this.radiobuttonAllUpper);
-			global::Gtk.Box.BoxChild w26 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonAllUpper]));
-			w26.Position = 2;
-			w26.Expand = false;
-			w26.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.radiobuttonAllLower = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("all__l_ower"));
-			this.radiobuttonAllLower.CanFocus = true;
-			this.radiobuttonAllLower.Name = "radiobuttonAllLower";
-			this.radiobuttonAllLower.DrawIndicator = true;
-			this.radiobuttonAllLower.UseUnderline = true;
-			this.radiobuttonAllLower.Group = this.radiobuttonPascalCase.Group;
-			this.vbox4.Add (this.radiobuttonAllLower);
-			global::Gtk.Box.BoxChild w27 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonAllLower]));
-			w27.Position = 3;
-			w27.Expand = false;
-			w27.Fill = false;
-			// Container child vbox4.Gtk.Box+BoxChild
-			this.radiobuttonFirstUpper = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("_First__upper"));
-			this.radiobuttonFirstUpper.CanFocus = true;
-			this.radiobuttonFirstUpper.Name = "radiobuttonFirstUpper";
-			this.radiobuttonFirstUpper.DrawIndicator = true;
-			this.radiobuttonFirstUpper.UseUnderline = true;
-			this.radiobuttonFirstUpper.Group = this.radiobuttonPascalCase.Group;
-			this.vbox4.Add (this.radiobuttonFirstUpper);
-			global::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonFirstUpper]));
-			w28.Position = 4;
-			w28.Expand = false;
-			w28.Fill = false;
-			this.table2.Add (this.vbox4);
-			global::Gtk.Table.TableChild w29 = ((global::Gtk.Table.TableChild)(this.table2 [this.vbox4]));
-			w29.TopAttach = ((uint)(2));
-			w29.BottomAttach = ((uint)(3));
-			w29.LeftAttach = ((uint)(1));
-			w29.RightAttach = ((uint)(2));
-			w29.YOptions = ((global::Gtk.AttachOptions)(4));
-			this.hbox1.Add (this.table2);
-			global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.table2]));
-			w30.Position = 1;
-			this.vbox3.Add (this.hbox1);
-			global::Gtk.Box.BoxChild w31 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.hbox1]));
-			w31.Position = 1;
-			w1.Add (this.vbox3);
-			global::Gtk.Box.BoxChild w32 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox3]));
-			w32.Position = 0;
-			w32.Padding = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.ActionArea
-			global::Gtk.HButtonBox w33 = this.ActionArea;
-			w33.Name = "dialog1_ActionArea";
-			w33.Spacing = 10;
-			w33.BorderWidth = ((uint)(5));
-			w33.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonCancel = new global::Gtk.Button ();
-			this.buttonCancel.CanDefault = true;
-			this.buttonCancel.CanFocus = true;
-			this.buttonCancel.Name = "buttonCancel";
-			this.buttonCancel.UseStock = true;
-			this.buttonCancel.UseUnderline = true;
-			this.buttonCancel.Label = "gtk-cancel";
-			this.AddActionWidget (this.buttonCancel, -6);
-			global::Gtk.ButtonBox.ButtonBoxChild w34 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w33 [this.buttonCancel]));
-			w34.Expand = false;
-			w34.Fill = false;
-			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
-			this.buttonOk = new global::Gtk.Button ();
-			this.buttonOk.CanDefault = true;
-			this.buttonOk.CanFocus = true;
-			this.buttonOk.Name = "buttonOk";
-			this.buttonOk.UseStock = true;
-			this.buttonOk.UseUnderline = true;
-			this.buttonOk.Label = "gtk-ok";
-			this.AddActionWidget (this.buttonOk, -5);
-			global::Gtk.ButtonBox.ButtonBoxChild w35 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w33 [this.buttonOk]));
-			w35.Position = 1;
-			w35.Expand = false;
-			w35.Fill = false;
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.DefaultWidth = 646;
-			this.DefaultHeight = 508;
-			this.Show ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,89 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
-{
-	public partial class NameConventionPanelWidget
-	{
-		private global::Gtk.HBox hbox3;
-		private global::Gtk.ScrolledWindow GtkScrolledWindow;
-		private global::Gtk.TreeView treeviewConventions;
-		private global::Gtk.VBox vbox3;
-		private global::Gtk.Button buttonEdit;
-		private global::Gtk.Button buttonAdd;
-		private global::Gtk.Button buttonRemove;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget
-			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget";
-			// Container child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.Gtk.Container+ContainerChild
-			this.hbox3 = new global::Gtk.HBox ();
-			this.hbox3.Name = "hbox3";
-			this.hbox3.Spacing = 6;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
-			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
-			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
-			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
-			this.treeviewConventions = new global::Gtk.TreeView ();
-			this.treeviewConventions.CanFocus = true;
-			this.treeviewConventions.Name = "treeviewConventions";
-			this.GtkScrolledWindow.Add (this.treeviewConventions);
-			this.hbox3.Add (this.GtkScrolledWindow);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.GtkScrolledWindow]));
-			w2.Position = 0;
-			// Container child hbox3.Gtk.Box+BoxChild
-			this.vbox3 = new global::Gtk.VBox ();
-			this.vbox3.Name = "vbox3";
-			this.vbox3.Spacing = 6;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.buttonEdit = new global::Gtk.Button ();
-			this.buttonEdit.CanFocus = true;
-			this.buttonEdit.Name = "buttonEdit";
-			this.buttonEdit.UseStock = true;
-			this.buttonEdit.UseUnderline = true;
-			this.buttonEdit.Label = "gtk-edit";
-			this.vbox3.Add (this.buttonEdit);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonEdit]));
-			w3.Position = 0;
-			w3.Expand = false;
-			w3.Fill = false;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.buttonAdd = new global::Gtk.Button ();
-			this.buttonAdd.CanFocus = true;
-			this.buttonAdd.Name = "buttonAdd";
-			this.buttonAdd.UseStock = true;
-			this.buttonAdd.UseUnderline = true;
-			this.buttonAdd.Label = "gtk-add";
-			this.vbox3.Add (this.buttonAdd);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonAdd]));
-			w4.Position = 1;
-			w4.Expand = false;
-			w4.Fill = false;
-			// Container child vbox3.Gtk.Box+BoxChild
-			this.buttonRemove = new global::Gtk.Button ();
-			this.buttonRemove.CanFocus = true;
-			this.buttonRemove.Name = "buttonRemove";
-			this.buttonRemove.UseStock = true;
-			this.buttonRemove.UseUnderline = true;
-			this.buttonRemove.Label = "gtk-remove";
-			this.vbox3.Add (this.buttonRemove);
-			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonRemove]));
-			w5.Position = 2;
-			w5.Expand = false;
-			w5.Fill = false;
-			this.hbox3.Add (this.vbox3);
-			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.vbox3]));
-			w6.Position = 1;
-			w6.Expand = false;
-			w6.Fill = false;
-			this.Add (this.hbox3);
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.Hide ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CodeGeneration.GenerateCodeWindow.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CodeGeneration.GenerateCodeWindow.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.CodeGeneration.GenerateCodeWindow.cs	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.CodeGeneration.GenerateCodeWindow.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,72 +0,0 @@
-
-// This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CodeGeneration
-{
-	public partial class GenerateCodeWindow
-	{
-		private global::Gtk.VBox vbox1;
-		private global::Gtk.Label label2;
-		private global::Gtk.ScrolledWindow scrolledwindow1;
-		private global::Gtk.Label labelDescription;
-		private global::Gtk.ScrolledWindow scrolledwindow2;
-
-		protected virtual void Build ()
-		{
-			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CodeGeneration.GenerateCodeWindow
-			this.Name = "MonoDevelop.CodeGeneration.GenerateCodeWindow";
-			this.Title = global::Mono.Unix.Catalog.GetString ("GenerateCodeWindow");
-			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
-			this.Decorated = false;
-			this.SkipPagerHint = true;
-			this.SkipTaskbarHint = true;
-			// Container child MonoDevelop.CodeGeneration.GenerateCodeWindow.Gtk.Container+ContainerChild
-			this.vbox1 = new global::Gtk.VBox ();
-			this.vbox1.Name = "vbox1";
-			this.vbox1.Spacing = 6;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.label2 = new global::Gtk.Label ();
-			this.label2.Name = "label2";
-			this.label2.Xalign = 0F;
-			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("_Generate");
-			this.label2.UseUnderline = true;
-			this.vbox1.Add (this.label2);
-			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label2]));
-			w1.Position = 0;
-			w1.Expand = false;
-			w1.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.scrolledwindow1 = new global::Gtk.ScrolledWindow ();
-			this.scrolledwindow1.CanFocus = true;
-			this.scrolledwindow1.Name = "scrolledwindow1";
-			this.scrolledwindow1.ShadowType = ((global::Gtk.ShadowType)(1));
-			this.vbox1.Add (this.scrolledwindow1);
-			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow1]));
-			w2.Position = 1;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.labelDescription = new global::Gtk.Label ();
-			this.labelDescription.Name = "labelDescription";
-			this.labelDescription.Xalign = 0F;
-			this.vbox1.Add (this.labelDescription);
-			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.labelDescription]));
-			w3.Position = 2;
-			w3.Expand = false;
-			w3.Fill = false;
-			// Container child vbox1.Gtk.Box+BoxChild
-			this.scrolledwindow2 = new global::Gtk.ScrolledWindow ();
-			this.scrolledwindow2.CanFocus = true;
-			this.scrolledwindow2.Name = "scrolledwindow2";
-			this.scrolledwindow2.ShadowType = ((global::Gtk.ShadowType)(1));
-			this.vbox1.Add (this.scrolledwindow2);
-			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow2]));
-			w4.Position = 3;
-			this.Add (this.vbox1);
-			if ((this.Child != null)) {
-				this.Child.ShowAll ();
-			}
-			this.DefaultWidth = 288;
-			this.DefaultHeight = 369;
-			this.Hide ();
-		}
-	}
-}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,72 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.CodeGeneration
+{
+	public partial class GenerateCodeWindow
+	{
+		private global::Gtk.VBox vbox1;
+		private global::Gtk.Label label2;
+		private global::Gtk.ScrolledWindow scrolledwindow1;
+		private global::Gtk.Label labelDescription;
+		private global::Gtk.ScrolledWindow scrolledwindow2;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow
+			this.Name = "MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow";
+			this.Title = global::Mono.Unix.Catalog.GetString ("GenerateCodeWindow");
+			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
+			this.Decorated = false;
+			this.SkipPagerHint = true;
+			this.SkipTaskbarHint = true;
+			// Container child MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow.Gtk.Container+ContainerChild
+			this.vbox1 = new global::Gtk.VBox ();
+			this.vbox1.Name = "vbox1";
+			this.vbox1.Spacing = 6;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.Xalign = 0F;
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("_Generate");
+			this.label2.UseUnderline = true;
+			this.vbox1.Add (this.label2);
+			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label2]));
+			w1.Position = 0;
+			w1.Expand = false;
+			w1.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.scrolledwindow1 = new global::Gtk.ScrolledWindow ();
+			this.scrolledwindow1.CanFocus = true;
+			this.scrolledwindow1.Name = "scrolledwindow1";
+			this.scrolledwindow1.ShadowType = ((global::Gtk.ShadowType)(1));
+			this.vbox1.Add (this.scrolledwindow1);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow1]));
+			w2.Position = 1;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.labelDescription = new global::Gtk.Label ();
+			this.labelDescription.Name = "labelDescription";
+			this.labelDescription.Xalign = 0F;
+			this.vbox1.Add (this.labelDescription);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.labelDescription]));
+			w3.Position = 2;
+			w3.Expand = false;
+			w3.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.scrolledwindow2 = new global::Gtk.ScrolledWindow ();
+			this.scrolledwindow2.CanFocus = true;
+			this.scrolledwindow2.Name = "scrolledwindow2";
+			this.scrolledwindow2.ShadowType = ((global::Gtk.ShadowType)(1));
+			this.vbox1.Add (this.scrolledwindow2);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow2]));
+			w4.Position = 3;
+			this.Add (this.vbox1);
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.DefaultWidth = 288;
+			this.DefaultHeight = 369;
+			this.Hide ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,69 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Formatting
+{
+	public partial class CSharpFormattingPolicyPanelWidget
+	{
+		private global::Gtk.VBox vbox1;
+		private global::Gtk.HBox hbox1;
+		private global::Gtk.Button buttonEdit;
+		private global::Gtk.Label label2;
+		private global::Gtk.ScrolledWindow scrolledwindow1;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget
+			global::Stetic.BinContainer.Attach (this);
+			this.Name = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget";
+			// Container child MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.Gtk.Container+ContainerChild
+			this.vbox1 = new global::Gtk.VBox ();
+			this.vbox1.Name = "vbox1";
+			this.vbox1.Spacing = 6;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.hbox1 = new global::Gtk.HBox ();
+			this.hbox1.Name = "hbox1";
+			this.hbox1.Spacing = 6;
+			// Container child hbox1.Gtk.Box+BoxChild
+			this.buttonEdit = new global::Gtk.Button ();
+			this.buttonEdit.CanFocus = true;
+			this.buttonEdit.Name = "buttonEdit";
+			this.buttonEdit.UseStock = true;
+			this.buttonEdit.UseUnderline = true;
+			this.buttonEdit.Label = "gtk-edit";
+			this.hbox1.Add (this.buttonEdit);
+			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.buttonEdit]));
+			w1.Position = 0;
+			w1.Expand = false;
+			w1.Fill = false;
+			this.vbox1.Add (this.hbox1);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox1]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.Xalign = 0F;
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Preview:");
+			this.vbox1.Add (this.label2);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label2]));
+			w3.Position = 1;
+			w3.Expand = false;
+			w3.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.scrolledwindow1 = new global::Gtk.ScrolledWindow ();
+			this.scrolledwindow1.CanFocus = true;
+			this.scrolledwindow1.Name = "scrolledwindow1";
+			this.scrolledwindow1.ShadowType = ((global::Gtk.ShadowType)(1));
+			this.vbox1.Add (this.scrolledwindow1);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.scrolledwindow1]));
+			w4.Position = 2;
+			this.Add (this.vbox1);
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.Show ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,494 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Formatting
+{
+	public partial class CSharpFormattingProfileDialog
+	{
+		private global::Gtk.VBox vbox5;
+		private global::Gtk.HPaned hpaned1;
+		private global::Gtk.VBox vbox2;
+		private global::Gtk.HBox hbox4;
+		private global::Gtk.Label label12;
+		private global::Gtk.ComboBox comboboxCategories;
+		private global::Gtk.Notebook notebookCategories;
+		private global::Gtk.VBox vbox8;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow;
+		private global::Gtk.TreeView treeviewIndentOptions;
+		private global::Gtk.Label label8;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow1;
+		private global::Gtk.TreeView treeviewBracePositions;
+		private global::Gtk.Label label9;
+		private global::Gtk.Table table4;
+		private global::Gtk.Entry entryAfterUsings;
+		private global::Gtk.Entry entryBeforeFirstDeclaration;
+		private global::Gtk.Entry entryBeforUsings;
+		private global::Gtk.Entry entryBetweenEvents;
+		private global::Gtk.Entry entryBetweenFields;
+		private global::Gtk.Entry entryBetweenMembers;
+		private global::Gtk.Entry entryBetweenTypes;
+		private global::Gtk.Label GtkLabel8;
+		private global::Gtk.Label GtkLabel9;
+		private global::Gtk.Label label1;
+		private global::Gtk.Label label15;
+		private global::Gtk.Label label16;
+		private global::Gtk.Label label19;
+		private global::Gtk.Label label20;
+		private global::Gtk.Label label21;
+		private global::Gtk.Label label22;
+		private global::Gtk.Label label23;
+		private global::Gtk.Label label14;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow3;
+		private global::Gtk.TreeView treeviewWrappingCategory;
+		private global::Gtk.Label label2;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow2;
+		private global::Gtk.TreeView treeviewInsertWhiteSpaceCategory;
+		private global::Gtk.Label label10;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow4;
+		private global::Gtk.TreeView treeviewNewLines;
+		private global::Gtk.Label label11;
+		private global::Gtk.VBox vbox6;
+		private global::Gtk.Label label13;
+		private global::Gtk.ScrolledWindow scrolledwindow;
+		private global::Gtk.Button buttonCancel;
+		private global::Gtk.Button buttonOk;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog
+			this.Name = "MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog";
+			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
+			this.BorderWidth = ((uint)(6));
+			// Internal child MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.VBox
+			global::Gtk.VBox w1 = this.VBox;
+			w1.Name = "dialog1_VBox";
+			w1.Spacing = 6;
+			w1.BorderWidth = ((uint)(2));
+			// Container child dialog1_VBox.Gtk.Box+BoxChild
+			this.vbox5 = new global::Gtk.VBox ();
+			this.vbox5.Name = "vbox5";
+			this.vbox5.Spacing = 6;
+			// Container child vbox5.Gtk.Box+BoxChild
+			this.hpaned1 = new global::Gtk.HPaned ();
+			this.hpaned1.CanFocus = true;
+			this.hpaned1.Name = "hpaned1";
+			this.hpaned1.Position = 424;
+			// Container child hpaned1.Gtk.Paned+PanedChild
+			this.vbox2 = new global::Gtk.VBox ();
+			this.vbox2.Name = "vbox2";
+			this.vbox2.Spacing = 6;
+			// Container child vbox2.Gtk.Box+BoxChild
+			this.hbox4 = new global::Gtk.HBox ();
+			this.hbox4.Name = "hbox4";
+			this.hbox4.Spacing = 6;
+			// Container child hbox4.Gtk.Box+BoxChild
+			this.label12 = new global::Gtk.Label ();
+			this.label12.Name = "label12";
+			this.label12.LabelProp = global::Mono.Unix.Catalog.GetString ("_Category:");
+			this.label12.UseUnderline = true;
+			this.hbox4.Add (this.label12);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.label12]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child hbox4.Gtk.Box+BoxChild
+			this.comboboxCategories = global::Gtk.ComboBox.NewText ();
+			this.comboboxCategories.Name = "comboboxCategories";
+			this.hbox4.Add (this.comboboxCategories);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.comboboxCategories]));
+			w3.Position = 1;
+			this.vbox2.Add (this.hbox4);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.hbox4]));
+			w4.Position = 0;
+			w4.Expand = false;
+			w4.Fill = false;
+			// Container child vbox2.Gtk.Box+BoxChild
+			this.notebookCategories = new global::Gtk.Notebook ();
+			this.notebookCategories.CanFocus = true;
+			this.notebookCategories.Name = "notebookCategories";
+			this.notebookCategories.CurrentPage = 3;
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.vbox8 = new global::Gtk.VBox ();
+			this.vbox8.Name = "vbox8";
+			this.vbox8.Spacing = 6;
+			// Container child vbox8.Gtk.Box+BoxChild
+			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
+			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
+			this.treeviewIndentOptions = new global::Gtk.TreeView ();
+			this.treeviewIndentOptions.CanFocus = true;
+			this.treeviewIndentOptions.Name = "treeviewIndentOptions";
+			this.GtkScrolledWindow.Add (this.treeviewIndentOptions);
+			this.vbox8.Add (this.GtkScrolledWindow);
+			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.vbox8 [this.GtkScrolledWindow]));
+			w6.Position = 0;
+			this.notebookCategories.Add (this.vbox8);
+			// Notebook tab
+			this.label8 = new global::Gtk.Label ();
+			this.label8.Name = "label8";
+			this.label8.LabelProp = global::Mono.Unix.Catalog.GetString ("page1");
+			this.notebookCategories.SetTabLabel (this.vbox8, this.label8);
+			this.label8.ShowAll ();
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
+			this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
+			this.treeviewBracePositions = new global::Gtk.TreeView ();
+			this.treeviewBracePositions.CanFocus = true;
+			this.treeviewBracePositions.Name = "treeviewBracePositions";
+			this.GtkScrolledWindow1.Add (this.treeviewBracePositions);
+			this.notebookCategories.Add (this.GtkScrolledWindow1);
+			global::Gtk.Notebook.NotebookChild w9 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow1]));
+			w9.Position = 1;
+			// Notebook tab
+			this.label9 = new global::Gtk.Label ();
+			this.label9.Name = "label9";
+			this.label9.LabelProp = global::Mono.Unix.Catalog.GetString ("page2");
+			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow1, this.label9);
+			this.label9.ShowAll ();
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.table4 = new global::Gtk.Table (((uint)(10)), ((uint)(2)), false);
+			this.table4.Name = "table4";
+			this.table4.RowSpacing = ((uint)(6));
+			this.table4.ColumnSpacing = ((uint)(6));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryAfterUsings = new global::Gtk.Entry ();
+			this.entryAfterUsings.CanFocus = true;
+			this.entryAfterUsings.Name = "entryAfterUsings";
+			this.entryAfterUsings.IsEditable = true;
+			this.entryAfterUsings.InvisibleChar = '●';
+			this.table4.Add (this.entryAfterUsings);
+			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryAfterUsings]));
+			w10.TopAttach = ((uint)(2));
+			w10.BottomAttach = ((uint)(3));
+			w10.LeftAttach = ((uint)(1));
+			w10.RightAttach = ((uint)(2));
+			w10.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBeforeFirstDeclaration = new global::Gtk.Entry ();
+			this.entryBeforeFirstDeclaration.CanFocus = true;
+			this.entryBeforeFirstDeclaration.Name = "entryBeforeFirstDeclaration";
+			this.entryBeforeFirstDeclaration.IsEditable = true;
+			this.entryBeforeFirstDeclaration.InvisibleChar = '●';
+			this.table4.Add (this.entryBeforeFirstDeclaration);
+			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBeforeFirstDeclaration]));
+			w11.TopAttach = ((uint)(4));
+			w11.BottomAttach = ((uint)(5));
+			w11.LeftAttach = ((uint)(1));
+			w11.RightAttach = ((uint)(2));
+			w11.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBeforUsings = new global::Gtk.Entry ();
+			this.entryBeforUsings.CanFocus = true;
+			this.entryBeforUsings.Name = "entryBeforUsings";
+			this.entryBeforUsings.IsEditable = true;
+			this.entryBeforUsings.InvisibleChar = '●';
+			this.table4.Add (this.entryBeforUsings);
+			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBeforUsings]));
+			w12.TopAttach = ((uint)(1));
+			w12.BottomAttach = ((uint)(2));
+			w12.LeftAttach = ((uint)(1));
+			w12.RightAttach = ((uint)(2));
+			w12.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBetweenEvents = new global::Gtk.Entry ();
+			this.entryBetweenEvents.CanFocus = true;
+			this.entryBetweenEvents.Name = "entryBetweenEvents";
+			this.entryBetweenEvents.IsEditable = true;
+			this.entryBetweenEvents.InvisibleChar = '●';
+			this.table4.Add (this.entryBetweenEvents);
+			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenEvents]));
+			w13.TopAttach = ((uint)(8));
+			w13.BottomAttach = ((uint)(9));
+			w13.LeftAttach = ((uint)(1));
+			w13.RightAttach = ((uint)(2));
+			w13.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBetweenFields = new global::Gtk.Entry ();
+			this.entryBetweenFields.CanFocus = true;
+			this.entryBetweenFields.Name = "entryBetweenFields";
+			this.entryBetweenFields.IsEditable = true;
+			this.entryBetweenFields.InvisibleChar = '●';
+			this.table4.Add (this.entryBetweenFields);
+			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenFields]));
+			w14.TopAttach = ((uint)(7));
+			w14.BottomAttach = ((uint)(8));
+			w14.LeftAttach = ((uint)(1));
+			w14.RightAttach = ((uint)(2));
+			w14.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBetweenMembers = new global::Gtk.Entry ();
+			this.entryBetweenMembers.CanFocus = true;
+			this.entryBetweenMembers.Name = "entryBetweenMembers";
+			this.entryBetweenMembers.IsEditable = true;
+			this.entryBetweenMembers.InvisibleChar = '●';
+			this.table4.Add (this.entryBetweenMembers);
+			global::Gtk.Table.TableChild w15 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenMembers]));
+			w15.TopAttach = ((uint)(9));
+			w15.BottomAttach = ((uint)(10));
+			w15.LeftAttach = ((uint)(1));
+			w15.RightAttach = ((uint)(2));
+			w15.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.entryBetweenTypes = new global::Gtk.Entry ();
+			this.entryBetweenTypes.CanFocus = true;
+			this.entryBetweenTypes.Name = "entryBetweenTypes";
+			this.entryBetweenTypes.IsEditable = true;
+			this.entryBetweenTypes.InvisibleChar = '●';
+			this.table4.Add (this.entryBetweenTypes);
+			global::Gtk.Table.TableChild w16 = ((global::Gtk.Table.TableChild)(this.table4 [this.entryBetweenTypes]));
+			w16.TopAttach = ((uint)(5));
+			w16.BottomAttach = ((uint)(6));
+			w16.LeftAttach = ((uint)(1));
+			w16.RightAttach = ((uint)(2));
+			w16.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.GtkLabel8 = new global::Gtk.Label ();
+			this.GtkLabel8.Name = "GtkLabel8";
+			this.GtkLabel8.Xalign = 0F;
+			this.GtkLabel8.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in namespaces</b>");
+			this.GtkLabel8.UseMarkup = true;
+			this.table4.Add (this.GtkLabel8);
+			global::Gtk.Table.TableChild w17 = ((global::Gtk.Table.TableChild)(this.table4 [this.GtkLabel8]));
+			w17.TopAttach = ((uint)(3));
+			w17.BottomAttach = ((uint)(4));
+			w17.XOptions = ((global::Gtk.AttachOptions)(4));
+			w17.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.GtkLabel9 = new global::Gtk.Label ();
+			this.GtkLabel9.Name = "GtkLabel9";
+			this.GtkLabel9.Xalign = 0F;
+			this.GtkLabel9.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in types</b>");
+			this.GtkLabel9.UseMarkup = true;
+			this.table4.Add (this.GtkLabel9);
+			global::Gtk.Table.TableChild w18 = ((global::Gtk.Table.TableChild)(this.table4 [this.GtkLabel9]));
+			w18.TopAttach = ((uint)(6));
+			w18.BottomAttach = ((uint)(7));
+			w18.XOptions = ((global::Gtk.AttachOptions)(4));
+			w18.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label1 = new global::Gtk.Label ();
+			this.label1.Name = "label1";
+			this.label1.Xalign = 0F;
+			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Blank lines in compilation unit</b>");
+			this.label1.UseMarkup = true;
+			this.table4.Add (this.label1);
+			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table4 [this.label1]));
+			w19.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label15 = new global::Gtk.Label ();
+			this.label15.Name = "label15";
+			this.label15.Xalign = 1F;
+			this.label15.LabelProp = global::Mono.Unix.Catalog.GetString ("Before using declaration:");
+			this.table4.Add (this.label15);
+			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table4 [this.label15]));
+			w20.TopAttach = ((uint)(1));
+			w20.BottomAttach = ((uint)(2));
+			w20.XOptions = ((global::Gtk.AttachOptions)(4));
+			w20.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label16 = new global::Gtk.Label ();
+			this.label16.Name = "label16";
+			this.label16.Xalign = 1F;
+			this.label16.LabelProp = global::Mono.Unix.Catalog.GetString ("After using declaration:");
+			this.table4.Add (this.label16);
+			global::Gtk.Table.TableChild w21 = ((global::Gtk.Table.TableChild)(this.table4 [this.label16]));
+			w21.TopAttach = ((uint)(2));
+			w21.BottomAttach = ((uint)(3));
+			w21.XOptions = ((global::Gtk.AttachOptions)(4));
+			w21.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label19 = new global::Gtk.Label ();
+			this.label19.Name = "label19";
+			this.label19.Xalign = 1F;
+			this.label19.LabelProp = global::Mono.Unix.Catalog.GetString ("Between type declarations:");
+			this.table4.Add (this.label19);
+			global::Gtk.Table.TableChild w22 = ((global::Gtk.Table.TableChild)(this.table4 [this.label19]));
+			w22.TopAttach = ((uint)(5));
+			w22.BottomAttach = ((uint)(6));
+			w22.XOptions = ((global::Gtk.AttachOptions)(4));
+			w22.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label20 = new global::Gtk.Label ();
+			this.label20.Name = "label20";
+			this.label20.Xalign = 1F;
+			this.label20.LabelProp = global::Mono.Unix.Catalog.GetString ("Before first declaration:");
+			this.table4.Add (this.label20);
+			global::Gtk.Table.TableChild w23 = ((global::Gtk.Table.TableChild)(this.table4 [this.label20]));
+			w23.TopAttach = ((uint)(4));
+			w23.BottomAttach = ((uint)(5));
+			w23.XOptions = ((global::Gtk.AttachOptions)(4));
+			w23.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label21 = new global::Gtk.Label ();
+			this.label21.Name = "label21";
+			this.label21.Xalign = 1F;
+			this.label21.LabelProp = global::Mono.Unix.Catalog.GetString ("Between field declarations:");
+			this.table4.Add (this.label21);
+			global::Gtk.Table.TableChild w24 = ((global::Gtk.Table.TableChild)(this.table4 [this.label21]));
+			w24.TopAttach = ((uint)(7));
+			w24.BottomAttach = ((uint)(8));
+			w24.XOptions = ((global::Gtk.AttachOptions)(4));
+			w24.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label22 = new global::Gtk.Label ();
+			this.label22.Name = "label22";
+			this.label22.Xalign = 1F;
+			this.label22.LabelProp = global::Mono.Unix.Catalog.GetString ("Between other member declarations:");
+			this.table4.Add (this.label22);
+			global::Gtk.Table.TableChild w25 = ((global::Gtk.Table.TableChild)(this.table4 [this.label22]));
+			w25.TopAttach = ((uint)(9));
+			w25.BottomAttach = ((uint)(10));
+			w25.XOptions = ((global::Gtk.AttachOptions)(4));
+			w25.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table4.Gtk.Table+TableChild
+			this.label23 = new global::Gtk.Label ();
+			this.label23.Name = "label23";
+			this.label23.Xalign = 1F;
+			this.label23.LabelProp = global::Mono.Unix.Catalog.GetString ("Between simple event declarations:");
+			this.table4.Add (this.label23);
+			global::Gtk.Table.TableChild w26 = ((global::Gtk.Table.TableChild)(this.table4 [this.label23]));
+			w26.TopAttach = ((uint)(8));
+			w26.BottomAttach = ((uint)(9));
+			w26.XOptions = ((global::Gtk.AttachOptions)(4));
+			w26.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.notebookCategories.Add (this.table4);
+			global::Gtk.Notebook.NotebookChild w27 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.table4]));
+			w27.Position = 2;
+			// Notebook tab
+			this.label14 = new global::Gtk.Label ();
+			this.label14.Name = "label14";
+			this.label14.LabelProp = global::Mono.Unix.Catalog.GetString ("page5");
+			this.notebookCategories.SetTabLabel (this.table4, this.label14);
+			this.label14.ShowAll ();
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.GtkScrolledWindow3 = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow3.Name = "GtkScrolledWindow3";
+			this.GtkScrolledWindow3.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow3.Gtk.Container+ContainerChild
+			this.treeviewWrappingCategory = new global::Gtk.TreeView ();
+			this.treeviewWrappingCategory.CanFocus = true;
+			this.treeviewWrappingCategory.Name = "treeviewWrappingCategory";
+			this.GtkScrolledWindow3.Add (this.treeviewWrappingCategory);
+			this.notebookCategories.Add (this.GtkScrolledWindow3);
+			global::Gtk.Notebook.NotebookChild w29 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow3]));
+			w29.Position = 3;
+			// Notebook tab
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("page6");
+			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow3, this.label2);
+			this.label2.ShowAll ();
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.GtkScrolledWindow2 = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow2.Name = "GtkScrolledWindow2";
+			this.GtkScrolledWindow2.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow2.Gtk.Container+ContainerChild
+			this.treeviewInsertWhiteSpaceCategory = new global::Gtk.TreeView ();
+			this.treeviewInsertWhiteSpaceCategory.CanFocus = true;
+			this.treeviewInsertWhiteSpaceCategory.Name = "treeviewInsertWhiteSpaceCategory";
+			this.GtkScrolledWindow2.Add (this.treeviewInsertWhiteSpaceCategory);
+			this.notebookCategories.Add (this.GtkScrolledWindow2);
+			global::Gtk.Notebook.NotebookChild w31 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow2]));
+			w31.Position = 4;
+			// Notebook tab
+			this.label10 = new global::Gtk.Label ();
+			this.label10.Name = "label10";
+			this.label10.LabelProp = global::Mono.Unix.Catalog.GetString ("page3");
+			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow2, this.label10);
+			this.label10.ShowAll ();
+			// Container child notebookCategories.Gtk.Notebook+NotebookChild
+			this.GtkScrolledWindow4 = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow4.Name = "GtkScrolledWindow4";
+			this.GtkScrolledWindow4.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow4.Gtk.Container+ContainerChild
+			this.treeviewNewLines = new global::Gtk.TreeView ();
+			this.treeviewNewLines.CanFocus = true;
+			this.treeviewNewLines.Name = "treeviewNewLines";
+			this.GtkScrolledWindow4.Add (this.treeviewNewLines);
+			this.notebookCategories.Add (this.GtkScrolledWindow4);
+			global::Gtk.Notebook.NotebookChild w33 = ((global::Gtk.Notebook.NotebookChild)(this.notebookCategories [this.GtkScrolledWindow4]));
+			w33.Position = 5;
+			// Notebook tab
+			this.label11 = new global::Gtk.Label ();
+			this.label11.Name = "label11";
+			this.label11.LabelProp = global::Mono.Unix.Catalog.GetString ("page4");
+			this.notebookCategories.SetTabLabel (this.GtkScrolledWindow4, this.label11);
+			this.label11.ShowAll ();
+			this.vbox2.Add (this.notebookCategories);
+			global::Gtk.Box.BoxChild w34 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.notebookCategories]));
+			w34.Position = 1;
+			this.hpaned1.Add (this.vbox2);
+			global::Gtk.Paned.PanedChild w35 = ((global::Gtk.Paned.PanedChild)(this.hpaned1 [this.vbox2]));
+			w35.Resize = false;
+			// Container child hpaned1.Gtk.Paned+PanedChild
+			this.vbox6 = new global::Gtk.VBox ();
+			this.vbox6.Name = "vbox6";
+			this.vbox6.Spacing = 6;
+			// Container child vbox6.Gtk.Box+BoxChild
+			this.label13 = new global::Gtk.Label ();
+			this.label13.Name = "label13";
+			this.label13.Xalign = 0F;
+			this.label13.LabelProp = global::Mono.Unix.Catalog.GetString ("Preview:");
+			this.vbox6.Add (this.label13);
+			global::Gtk.Box.BoxChild w36 = ((global::Gtk.Box.BoxChild)(this.vbox6 [this.label13]));
+			w36.Position = 0;
+			w36.Expand = false;
+			w36.Fill = false;
+			// Container child vbox6.Gtk.Box+BoxChild
+			this.scrolledwindow = new global::Gtk.ScrolledWindow ();
+			this.scrolledwindow.CanFocus = true;
+			this.scrolledwindow.Name = "scrolledwindow";
+			this.scrolledwindow.ShadowType = ((global::Gtk.ShadowType)(1));
+			this.vbox6.Add (this.scrolledwindow);
+			global::Gtk.Box.BoxChild w37 = ((global::Gtk.Box.BoxChild)(this.vbox6 [this.scrolledwindow]));
+			w37.Position = 1;
+			this.hpaned1.Add (this.vbox6);
+			this.vbox5.Add (this.hpaned1);
+			global::Gtk.Box.BoxChild w39 = ((global::Gtk.Box.BoxChild)(this.vbox5 [this.hpaned1]));
+			w39.Position = 0;
+			w1.Add (this.vbox5);
+			global::Gtk.Box.BoxChild w40 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox5]));
+			w40.Position = 0;
+			// Internal child MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.ActionArea
+			global::Gtk.HButtonBox w41 = this.ActionArea;
+			w41.Name = "dialog1_ActionArea";
+			w41.Spacing = 10;
+			w41.BorderWidth = ((uint)(5));
+			w41.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonCancel = new global::Gtk.Button ();
+			this.buttonCancel.CanDefault = true;
+			this.buttonCancel.CanFocus = true;
+			this.buttonCancel.Name = "buttonCancel";
+			this.buttonCancel.UseStock = true;
+			this.buttonCancel.UseUnderline = true;
+			this.buttonCancel.Label = "gtk-cancel";
+			this.AddActionWidget (this.buttonCancel, -6);
+			global::Gtk.ButtonBox.ButtonBoxChild w42 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w41 [this.buttonCancel]));
+			w42.Expand = false;
+			w42.Fill = false;
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonOk = new global::Gtk.Button ();
+			this.buttonOk.CanDefault = true;
+			this.buttonOk.CanFocus = true;
+			this.buttonOk.Name = "buttonOk";
+			this.buttonOk.UseStock = true;
+			this.buttonOk.UseUnderline = true;
+			this.buttonOk.Label = "gtk-ok";
+			this.AddActionWidget (this.buttonOk, -5);
+			global::Gtk.ButtonBox.ButtonBoxChild w43 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w41 [this.buttonOk]));
+			w43.Position = 1;
+			w43.Expand = false;
+			w43.Fill = false;
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.DefaultWidth = 880;
+			this.DefaultHeight = 551;
+			this.Hide ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,119 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Formatting
+{
+	public partial class NewFormattingProfileDialog
+	{
+		private global::Gtk.VBox vbox4;
+		private global::Gtk.Label label3;
+		private global::Gtk.Entry entryProfileName;
+		private global::Gtk.Label label4;
+		private global::Gtk.ComboBox comboboxInitFrom;
+		private global::Gtk.Button buttonCancel;
+		private global::Gtk.Button buttonOk;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog
+			this.Name = "MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog";
+			this.Title = global::Mono.Unix.Catalog.GetString ("New Profile");
+			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
+			this.BorderWidth = ((uint)(6));
+			// Internal child MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.VBox
+			global::Gtk.VBox w1 = this.VBox;
+			w1.Name = "dialog1_VBox";
+			w1.Spacing = 6;
+			w1.BorderWidth = ((uint)(2));
+			// Container child dialog1_VBox.Gtk.Box+BoxChild
+			this.vbox4 = new global::Gtk.VBox ();
+			this.vbox4.Name = "vbox4";
+			this.vbox4.Spacing = 6;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.label3 = new global::Gtk.Label ();
+			this.label3.Name = "label3";
+			this.label3.Xalign = 0F;
+			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("_Profile name:");
+			this.label3.UseUnderline = true;
+			this.vbox4.Add (this.label3);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.label3]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.entryProfileName = new global::Gtk.Entry ();
+			this.entryProfileName.CanFocus = true;
+			this.entryProfileName.Name = "entryProfileName";
+			this.entryProfileName.IsEditable = true;
+			this.entryProfileName.InvisibleChar = '●';
+			this.vbox4.Add (this.entryProfileName);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.entryProfileName]));
+			w3.Position = 1;
+			w3.Expand = false;
+			w3.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.label4 = new global::Gtk.Label ();
+			this.label4.Name = "label4";
+			this.label4.Xalign = 0F;
+			this.label4.LabelProp = global::Mono.Unix.Catalog.GetString ("_Initialize from profile:");
+			this.label4.UseUnderline = true;
+			this.vbox4.Add (this.label4);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.label4]));
+			w4.Position = 2;
+			w4.Expand = false;
+			w4.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.comboboxInitFrom = global::Gtk.ComboBox.NewText ();
+			this.comboboxInitFrom.Name = "comboboxInitFrom";
+			this.vbox4.Add (this.comboboxInitFrom);
+			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.comboboxInitFrom]));
+			w5.Position = 3;
+			w5.Expand = false;
+			w5.Fill = false;
+			w1.Add (this.vbox4);
+			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox4]));
+			w6.Position = 0;
+			w6.Expand = false;
+			w6.Fill = false;
+			// Internal child MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.ActionArea
+			global::Gtk.HButtonBox w7 = this.ActionArea;
+			w7.Name = "dialog1_ActionArea";
+			w7.Spacing = 10;
+			w7.BorderWidth = ((uint)(5));
+			w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonCancel = new global::Gtk.Button ();
+			this.buttonCancel.CanDefault = true;
+			this.buttonCancel.CanFocus = true;
+			this.buttonCancel.Name = "buttonCancel";
+			this.buttonCancel.UseStock = true;
+			this.buttonCancel.UseUnderline = true;
+			this.buttonCancel.Label = "gtk-cancel";
+			this.AddActionWidget (this.buttonCancel, -6);
+			global::Gtk.ButtonBox.ButtonBoxChild w8 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w7 [this.buttonCancel]));
+			w8.Expand = false;
+			w8.Fill = false;
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonOk = new global::Gtk.Button ();
+			this.buttonOk.CanDefault = true;
+			this.buttonOk.CanFocus = true;
+			this.buttonOk.Name = "buttonOk";
+			this.buttonOk.UseStock = true;
+			this.buttonOk.UseUnderline = true;
+			this.buttonOk.Label = "gtk-ok";
+			this.AddActionWidget (this.buttonOk, -5);
+			global::Gtk.ButtonBox.ButtonBoxChild w9 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w7 [this.buttonOk]));
+			w9.Position = 1;
+			w9.Expand = false;
+			w9.Fill = false;
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.DefaultWidth = 370;
+			this.DefaultHeight = 179;
+			this.label3.MnemonicWidget = this.entryProfileName;
+			this.label4.MnemonicWidget = this.comboboxInitFrom;
+			this.Hide ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,408 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Project
+{
+	internal partial class CodeGenerationPanelWidget
+	{
+		private global::Gtk.VBox vbox62;
+		private global::Gtk.Label label82;
+		private global::Gtk.HBox hbox56;
+		private global::Gtk.Label label81;
+		private global::Gtk.VBox vbox65;
+		private global::Gtk.Table table1;
+		private global::Gtk.CheckButton enableOptimizationCheckButton;
+		private global::Gtk.CheckButton generateOverflowChecksCheckButton;
+		private global::Gtk.CheckButton generateXmlOutputCheckButton;
+		private global::Gtk.HBox hbox1;
+		private global::Gtk.ComboBox comboPlatforms;
+		private global::Gtk.HBox hbox2;
+		private global::Gtk.ComboBox comboDebug;
+		private global::Gtk.Label label1;
+		private global::Gtk.Label label2;
+		private global::Gtk.Label label87;
+		private global::Gtk.Entry symbolsEntry;
+		private global::Gtk.Label label93;
+		private global::Gtk.HBox hbox48;
+		private global::Gtk.Label label73;
+		private global::Gtk.VBox vbox67;
+		private global::Gtk.HBox hbox60;
+		private global::Gtk.Label label85;
+		private global::Gtk.SpinButton warningLevelSpinButton;
+		private global::Gtk.HBox hbox3;
+		private global::Gtk.Label label86;
+		private global::Gtk.Entry ignoreWarningsEntry;
+		private global::Gtk.CheckButton warningsAsErrorsCheckButton;
+		private global::Gtk.Label label94;
+		private global::Gtk.HBox hbox5;
+		private global::Gtk.Label label74;
+		private global::Gtk.HBox hbox6;
+		private global::Gtk.Label label88;
+		private global::Gtk.Entry additionalArgsEntry;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget
+			global::Stetic.BinContainer.Attach (this);
+			this.Name = "MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget";
+			// Container child MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.Gtk.Container+ContainerChild
+			this.vbox62 = new global::Gtk.VBox ();
+			this.vbox62.Name = "vbox62";
+			this.vbox62.Spacing = 12;
+			this.vbox62.BorderWidth = ((uint)(6));
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.label82 = new global::Gtk.Label ();
+			this.label82.Name = "label82";
+			this.label82.Xalign = 0F;
+			this.label82.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>General Options</b>");
+			this.label82.UseMarkup = true;
+			this.vbox62.Add (this.label82);
+			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label82]));
+			w1.Position = 0;
+			w1.Expand = false;
+			w1.Fill = false;
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.hbox56 = new global::Gtk.HBox ();
+			this.hbox56.Name = "hbox56";
+			// Container child hbox56.Gtk.Box+BoxChild
+			this.label81 = new global::Gtk.Label ();
+			this.label81.WidthRequest = 18;
+			this.label81.Name = "label81";
+			this.hbox56.Add (this.label81);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox56 [this.label81]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child hbox56.Gtk.Box+BoxChild
+			this.vbox65 = new global::Gtk.VBox ();
+			this.vbox65.Name = "vbox65";
+			this.vbox65.Spacing = 6;
+			// Container child vbox65.Gtk.Box+BoxChild
+			this.table1 = new global::Gtk.Table (((uint)(6)), ((uint)(2)), false);
+			this.table1.Name = "table1";
+			this.table1.RowSpacing = ((uint)(6));
+			this.table1.ColumnSpacing = ((uint)(6));
+			// Container child table1.Gtk.Table+TableChild
+			this.enableOptimizationCheckButton = new global::Gtk.CheckButton ();
+			this.enableOptimizationCheckButton.CanFocus = true;
+			this.enableOptimizationCheckButton.Name = "enableOptimizationCheckButton";
+			this.enableOptimizationCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Enable _optimizations");
+			this.enableOptimizationCheckButton.DrawIndicator = true;
+			this.enableOptimizationCheckButton.UseUnderline = true;
+			this.table1.Add (this.enableOptimizationCheckButton);
+			global::Gtk.Table.TableChild w3 = ((global::Gtk.Table.TableChild)(this.table1 [this.enableOptimizationCheckButton]));
+			w3.TopAttach = ((uint)(1));
+			w3.BottomAttach = ((uint)(2));
+			w3.RightAttach = ((uint)(2));
+			w3.XOptions = ((global::Gtk.AttachOptions)(4));
+			w3.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.generateOverflowChecksCheckButton = new global::Gtk.CheckButton ();
+			this.generateOverflowChecksCheckButton.CanFocus = true;
+			this.generateOverflowChecksCheckButton.Name = "generateOverflowChecksCheckButton";
+			this.generateOverflowChecksCheckButton.Label = global::Mono.Unix.Catalog.GetString ("_Generate overflow checks");
+			this.generateOverflowChecksCheckButton.DrawIndicator = true;
+			this.generateOverflowChecksCheckButton.UseUnderline = true;
+			this.table1.Add (this.generateOverflowChecksCheckButton);
+			global::Gtk.Table.TableChild w4 = ((global::Gtk.Table.TableChild)(this.table1 [this.generateOverflowChecksCheckButton]));
+			w4.RightAttach = ((uint)(2));
+			w4.XOptions = ((global::Gtk.AttachOptions)(4));
+			w4.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.generateXmlOutputCheckButton = new global::Gtk.CheckButton ();
+			this.generateXmlOutputCheckButton.CanFocus = true;
+			this.generateXmlOutputCheckButton.Name = "generateXmlOutputCheckButton";
+			this.generateXmlOutputCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Generate _xml documentation");
+			this.generateXmlOutputCheckButton.Active = true;
+			this.generateXmlOutputCheckButton.DrawIndicator = true;
+			this.generateXmlOutputCheckButton.UseUnderline = true;
+			this.table1.Add (this.generateXmlOutputCheckButton);
+			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table1 [this.generateXmlOutputCheckButton]));
+			w5.TopAttach = ((uint)(2));
+			w5.BottomAttach = ((uint)(3));
+			w5.RightAttach = ((uint)(2));
+			w5.XOptions = ((global::Gtk.AttachOptions)(4));
+			w5.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.hbox1 = new global::Gtk.HBox ();
+			this.hbox1.Name = "hbox1";
+			this.hbox1.Spacing = 6;
+			// Container child hbox1.Gtk.Box+BoxChild
+			this.comboPlatforms = global::Gtk.ComboBox.NewText ();
+			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString("Any CPU"));
+			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString("x86"));
+			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString("x64"));
+			this.comboPlatforms.AppendText (global::Mono.Unix.Catalog.GetString("Itanium"));
+			this.comboPlatforms.Name = "comboPlatforms";
+			this.comboPlatforms.Active = 0;
+			this.hbox1.Add (this.comboPlatforms);
+			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.comboPlatforms]));
+			w6.Position = 0;
+			w6.Expand = false;
+			w6.Fill = false;
+			this.table1.Add (this.hbox1);
+			global::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.table1 [this.hbox1]));
+			w7.TopAttach = ((uint)(5));
+			w7.BottomAttach = ((uint)(6));
+			w7.LeftAttach = ((uint)(1));
+			w7.RightAttach = ((uint)(2));
+			w7.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.hbox2 = new global::Gtk.HBox ();
+			this.hbox2.Name = "hbox2";
+			this.hbox2.Spacing = 6;
+			// Container child hbox2.Gtk.Box+BoxChild
+			this.comboDebug = global::Gtk.ComboBox.NewText ();
+			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString("Full"));
+			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString("Symbols only"));
+			this.comboDebug.AppendText (global::Mono.Unix.Catalog.GetString("None"));
+			this.comboDebug.Name = "comboDebug";
+			this.comboDebug.Active = 0;
+			this.hbox2.Add (this.comboDebug);
+			global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(this.hbox2 [this.comboDebug]));
+			w8.Position = 0;
+			w8.Expand = false;
+			w8.Fill = false;
+			this.table1.Add (this.hbox2);
+			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table1 [this.hbox2]));
+			w9.TopAttach = ((uint)(3));
+			w9.BottomAttach = ((uint)(4));
+			w9.LeftAttach = ((uint)(1));
+			w9.RightAttach = ((uint)(2));
+			w9.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label1 = new global::Gtk.Label ();
+			this.label1.Name = "label1";
+			this.label1.Xalign = 0F;
+			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Platform target:");
+			this.table1.Add (this.label1);
+			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table1 [this.label1]));
+			w10.TopAttach = ((uint)(5));
+			w10.BottomAttach = ((uint)(6));
+			w10.XOptions = ((global::Gtk.AttachOptions)(4));
+			w10.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.Xalign = 0F;
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Debug information:");
+			this.table1.Add (this.label2);
+			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table1 [this.label2]));
+			w11.TopAttach = ((uint)(3));
+			w11.BottomAttach = ((uint)(4));
+			w11.XOptions = ((global::Gtk.AttachOptions)(4));
+			w11.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label87 = new global::Gtk.Label ();
+			this.label87.Name = "label87";
+			this.label87.Xalign = 0F;
+			this.label87.LabelProp = global::Mono.Unix.Catalog.GetString ("Define S_ymbols:");
+			this.label87.UseUnderline = true;
+			this.table1.Add (this.label87);
+			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.table1 [this.label87]));
+			w12.TopAttach = ((uint)(4));
+			w12.BottomAttach = ((uint)(5));
+			w12.XOptions = ((global::Gtk.AttachOptions)(4));
+			w12.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.symbolsEntry = new global::Gtk.Entry ();
+			this.symbolsEntry.CanFocus = true;
+			this.symbolsEntry.Name = "symbolsEntry";
+			this.symbolsEntry.IsEditable = true;
+			this.symbolsEntry.InvisibleChar = '●';
+			this.table1.Add (this.symbolsEntry);
+			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.table1 [this.symbolsEntry]));
+			w13.TopAttach = ((uint)(4));
+			w13.BottomAttach = ((uint)(5));
+			w13.LeftAttach = ((uint)(1));
+			w13.RightAttach = ((uint)(2));
+			w13.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.vbox65.Add (this.table1);
+			global::Gtk.Box.BoxChild w14 = ((global::Gtk.Box.BoxChild)(this.vbox65 [this.table1]));
+			w14.Position = 0;
+			w14.Expand = false;
+			w14.Fill = false;
+			this.hbox56.Add (this.vbox65);
+			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.hbox56 [this.vbox65]));
+			w15.Position = 1;
+			this.vbox62.Add (this.hbox56);
+			global::Gtk.Box.BoxChild w16 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox56]));
+			w16.Position = 1;
+			w16.Expand = false;
+			w16.Fill = false;
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.label93 = new global::Gtk.Label ();
+			this.label93.Name = "label93";
+			this.label93.Xalign = 0F;
+			this.label93.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Warnings</b>");
+			this.label93.UseMarkup = true;
+			this.label93.UseUnderline = true;
+			this.vbox62.Add (this.label93);
+			global::Gtk.Box.BoxChild w17 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label93]));
+			w17.Position = 2;
+			w17.Expand = false;
+			w17.Fill = false;
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.hbox48 = new global::Gtk.HBox ();
+			this.hbox48.Name = "hbox48";
+			// Container child hbox48.Gtk.Box+BoxChild
+			this.label73 = new global::Gtk.Label ();
+			this.label73.WidthRequest = 18;
+			this.label73.Name = "label73";
+			this.hbox48.Add (this.label73);
+			global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.hbox48 [this.label73]));
+			w18.Position = 0;
+			w18.Expand = false;
+			w18.Fill = false;
+			// Container child hbox48.Gtk.Box+BoxChild
+			this.vbox67 = new global::Gtk.VBox ();
+			this.vbox67.Name = "vbox67";
+			this.vbox67.Spacing = 6;
+			// Container child vbox67.Gtk.Box+BoxChild
+			this.hbox60 = new global::Gtk.HBox ();
+			this.hbox60.Name = "hbox60";
+			this.hbox60.Spacing = 6;
+			// Container child hbox60.Gtk.Box+BoxChild
+			this.label85 = new global::Gtk.Label ();
+			this.label85.Name = "label85";
+			this.label85.LabelProp = global::Mono.Unix.Catalog.GetString ("_Warning Level:");
+			this.label85.UseUnderline = true;
+			this.hbox60.Add (this.label85);
+			global::Gtk.Box.BoxChild w19 = ((global::Gtk.Box.BoxChild)(this.hbox60 [this.label85]));
+			w19.Position = 0;
+			w19.Expand = false;
+			w19.Fill = false;
+			// Container child hbox60.Gtk.Box+BoxChild
+			this.warningLevelSpinButton = new global::Gtk.SpinButton (0, 4, 1);
+			this.warningLevelSpinButton.CanFocus = true;
+			this.warningLevelSpinButton.Name = "warningLevelSpinButton";
+			this.warningLevelSpinButton.Adjustment.PageIncrement = 1;
+			this.warningLevelSpinButton.ClimbRate = 1;
+			this.warningLevelSpinButton.Numeric = true;
+			this.warningLevelSpinButton.Value = 2;
+			this.hbox60.Add (this.warningLevelSpinButton);
+			global::Gtk.Box.BoxChild w20 = ((global::Gtk.Box.BoxChild)(this.hbox60 [this.warningLevelSpinButton]));
+			w20.Position = 1;
+			w20.Expand = false;
+			w20.Fill = false;
+			this.vbox67.Add (this.hbox60);
+			global::Gtk.Box.BoxChild w21 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.hbox60]));
+			w21.Position = 0;
+			w21.Expand = false;
+			w21.Fill = false;
+			// Container child vbox67.Gtk.Box+BoxChild
+			this.hbox3 = new global::Gtk.HBox ();
+			this.hbox3.Name = "hbox3";
+			this.hbox3.Spacing = 6;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.label86 = new global::Gtk.Label ();
+			this.label86.Name = "label86";
+			this.label86.LabelProp = global::Mono.Unix.Catalog.GetString ("_Ignore warnings:");
+			this.label86.UseUnderline = true;
+			this.hbox3.Add (this.label86);
+			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label86]));
+			w22.Position = 0;
+			w22.Expand = false;
+			w22.Fill = false;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.ignoreWarningsEntry = new global::Gtk.Entry ();
+			this.ignoreWarningsEntry.CanFocus = true;
+			this.ignoreWarningsEntry.Name = "ignoreWarningsEntry";
+			this.ignoreWarningsEntry.IsEditable = true;
+			this.ignoreWarningsEntry.InvisibleChar = '●';
+			this.hbox3.Add (this.ignoreWarningsEntry);
+			global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.ignoreWarningsEntry]));
+			w23.Position = 1;
+			this.vbox67.Add (this.hbox3);
+			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.hbox3]));
+			w24.Position = 1;
+			w24.Expand = false;
+			w24.Fill = false;
+			// Container child vbox67.Gtk.Box+BoxChild
+			this.warningsAsErrorsCheckButton = new global::Gtk.CheckButton ();
+			this.warningsAsErrorsCheckButton.CanFocus = true;
+			this.warningsAsErrorsCheckButton.Name = "warningsAsErrorsCheckButton";
+			this.warningsAsErrorsCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Treat warnings as _errors");
+			this.warningsAsErrorsCheckButton.DrawIndicator = true;
+			this.warningsAsErrorsCheckButton.UseUnderline = true;
+			this.vbox67.Add (this.warningsAsErrorsCheckButton);
+			global::Gtk.Box.BoxChild w25 = ((global::Gtk.Box.BoxChild)(this.vbox67 [this.warningsAsErrorsCheckButton]));
+			w25.Position = 2;
+			w25.Expand = false;
+			w25.Fill = false;
+			this.hbox48.Add (this.vbox67);
+			global::Gtk.Box.BoxChild w26 = ((global::Gtk.Box.BoxChild)(this.hbox48 [this.vbox67]));
+			w26.Position = 1;
+			this.vbox62.Add (this.hbox48);
+			global::Gtk.Box.BoxChild w27 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox48]));
+			w27.Position = 3;
+			w27.Expand = false;
+			w27.Fill = false;
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.label94 = new global::Gtk.Label ();
+			this.label94.Name = "label94";
+			this.label94.Xalign = 0F;
+			this.label94.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Additional Options</b>");
+			this.label94.UseMarkup = true;
+			this.label94.UseUnderline = true;
+			this.vbox62.Add (this.label94);
+			global::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.label94]));
+			w28.Position = 4;
+			w28.Expand = false;
+			w28.Fill = false;
+			// Container child vbox62.Gtk.Box+BoxChild
+			this.hbox5 = new global::Gtk.HBox ();
+			this.hbox5.Name = "hbox5";
+			this.hbox5.Spacing = 6;
+			// Container child hbox5.Gtk.Box+BoxChild
+			this.label74 = new global::Gtk.Label ();
+			this.label74.WidthRequest = 18;
+			this.label74.Name = "label74";
+			this.hbox5.Add (this.label74);
+			global::Gtk.Box.BoxChild w29 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.label74]));
+			w29.Position = 0;
+			w29.Expand = false;
+			w29.Fill = false;
+			// Container child hbox5.Gtk.Box+BoxChild
+			this.hbox6 = new global::Gtk.HBox ();
+			this.hbox6.Name = "hbox6";
+			this.hbox6.Spacing = 6;
+			// Container child hbox6.Gtk.Box+BoxChild
+			this.label88 = new global::Gtk.Label ();
+			this.label88.Name = "label88";
+			this.label88.LabelProp = global::Mono.Unix.Catalog.GetString ("_Additional arguments:");
+			this.label88.UseUnderline = true;
+			this.hbox6.Add (this.label88);
+			global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.hbox6 [this.label88]));
+			w30.Position = 0;
+			w30.Expand = false;
+			w30.Fill = false;
+			// Container child hbox6.Gtk.Box+BoxChild
+			this.additionalArgsEntry = new global::Gtk.Entry ();
+			this.additionalArgsEntry.CanFocus = true;
+			this.additionalArgsEntry.Name = "additionalArgsEntry";
+			this.additionalArgsEntry.IsEditable = true;
+			this.additionalArgsEntry.InvisibleChar = '●';
+			this.hbox6.Add (this.additionalArgsEntry);
+			global::Gtk.Box.BoxChild w31 = ((global::Gtk.Box.BoxChild)(this.hbox6 [this.additionalArgsEntry]));
+			w31.Position = 1;
+			this.hbox5.Add (this.hbox6);
+			global::Gtk.Box.BoxChild w32 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.hbox6]));
+			w32.Position = 1;
+			this.vbox62.Add (this.hbox5);
+			global::Gtk.Box.BoxChild w33 = ((global::Gtk.Box.BoxChild)(this.vbox62 [this.hbox5]));
+			w33.Position = 5;
+			w33.Expand = false;
+			w33.Fill = false;
+			this.Add (this.vbox62);
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.label87.MnemonicWidget = this.symbolsEntry;
+			this.label85.MnemonicWidget = this.warningLevelSpinButton;
+			this.label86.MnemonicWidget = this.warningLevelSpinButton;
+			this.label88.MnemonicWidget = this.warningLevelSpinButton;
+			this.Show ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,283 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Project
+{
+	public partial class CompilerOptionsPanelWidget
+	{
+		private global::Gtk.VBox vbox1;
+		private global::Gtk.Label label82;
+		private global::Gtk.HBox hbox5;
+		private global::Gtk.Label label76;
+		private global::Gtk.VBox vbox2;
+		private global::Gtk.Table table7;
+		private global::Gtk.ComboBoxEntry codepageEntry;
+		private global::Gtk.HBox hbox57;
+		private global::Gtk.ComboBox compileTargetCombo;
+		private global::MonoDevelop.Components.FileEntry iconEntry;
+		private global::Gtk.Label label1;
+		private global::Gtk.Label label3;
+		private global::Gtk.Label label86;
+		private global::Gtk.Label label88;
+		private global::Gtk.ComboBoxEntry mainClassEntry;
+		private global::Gtk.CheckButton noStdLibCheckButton;
+		private global::Gtk.Label label83;
+		private global::Gtk.Label label75;
+		private global::Gtk.HBox hbox7;
+		private global::Gtk.Label label74;
+		private global::Gtk.VBox vbox3;
+		private global::Gtk.Table table2;
+		private global::Gtk.Label label2;
+		private global::Gtk.ComboBox langVerCombo;
+		private global::Gtk.CheckButton allowUnsafeCodeCheckButton;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget
+			global::Stetic.BinContainer.Attach (this);
+			this.Name = "MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget";
+			// Container child MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.Gtk.Container+ContainerChild
+			this.vbox1 = new global::Gtk.VBox ();
+			this.vbox1.Name = "vbox1";
+			this.vbox1.Spacing = 6;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.label82 = new global::Gtk.Label ();
+			this.label82.Name = "label82";
+			this.label82.Xalign = 0F;
+			this.label82.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Code Generation</b>");
+			this.label82.UseMarkup = true;
+			this.vbox1.Add (this.label82);
+			global::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label82]));
+			w1.Position = 0;
+			w1.Expand = false;
+			w1.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.hbox5 = new global::Gtk.HBox ();
+			this.hbox5.Name = "hbox5";
+			this.hbox5.Spacing = 6;
+			// Container child hbox5.Gtk.Box+BoxChild
+			this.label76 = new global::Gtk.Label ();
+			this.label76.WidthRequest = 18;
+			this.label76.Name = "label76";
+			this.hbox5.Add (this.label76);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.label76]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child hbox5.Gtk.Box+BoxChild
+			this.vbox2 = new global::Gtk.VBox ();
+			this.vbox2.Name = "vbox2";
+			this.vbox2.Spacing = 6;
+			// Container child vbox2.Gtk.Box+BoxChild
+			this.table7 = new global::Gtk.Table (((uint)(5)), ((uint)(2)), false);
+			this.table7.Name = "table7";
+			this.table7.RowSpacing = ((uint)(6));
+			this.table7.ColumnSpacing = ((uint)(6));
+			// Container child table7.Gtk.Table+TableChild
+			this.codepageEntry = global::Gtk.ComboBoxEntry.NewText ();
+			this.codepageEntry.Name = "codepageEntry";
+			this.table7.Add (this.codepageEntry);
+			global::Gtk.Table.TableChild w3 = ((global::Gtk.Table.TableChild)(this.table7 [this.codepageEntry]));
+			w3.TopAttach = ((uint)(3));
+			w3.BottomAttach = ((uint)(4));
+			w3.LeftAttach = ((uint)(1));
+			w3.RightAttach = ((uint)(2));
+			w3.XOptions = ((global::Gtk.AttachOptions)(4));
+			w3.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table7.Gtk.Table+TableChild
+			this.hbox57 = new global::Gtk.HBox ();
+			this.hbox57.Name = "hbox57";
+			// Container child hbox57.Gtk.Box+BoxChild
+			this.compileTargetCombo = new global::Gtk.ComboBox ();
+			this.compileTargetCombo.Name = "compileTargetCombo";
+			this.hbox57.Add (this.compileTargetCombo);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.hbox57 [this.compileTargetCombo]));
+			w4.Position = 0;
+			w4.Expand = false;
+			w4.Fill = false;
+			this.table7.Add (this.hbox57);
+			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table7 [this.hbox57]));
+			w5.LeftAttach = ((uint)(1));
+			w5.RightAttach = ((uint)(2));
+			w5.XOptions = ((global::Gtk.AttachOptions)(4));
+			w5.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table7.Gtk.Table+TableChild
+			this.iconEntry = new global::MonoDevelop.Components.FileEntry ();
+			this.iconEntry.Name = "iconEntry";
+			this.table7.Add (this.iconEntry);
+			global::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.table7 [this.iconEntry]));
+			w6.TopAttach = ((uint)(2));
+			w6.BottomAttach = ((uint)(3));
+			w6.LeftAttach = ((uint)(1));
+			w6.RightAttach = ((uint)(2));
+			w6.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table7.Gtk.Table+TableChild
+			this.label1 = new global::Gtk.Label ();
+			this.label1.Name = "label1";
+			this.label1.Xalign = 0F;
+			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Compiler Code Page:");
+			this.table7.Add (this.label1);
+			global::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.table7 [this.label1]));
+			w7.TopAttach = ((uint)(3));
+			w7.BottomAttach = ((uint)(4));
+			w7.XOptions = ((global::Gtk.AttachOptions)(4));
+			w7.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table7.Gtk.Table+TableChild
+			this.label3 = new global::Gtk.Label ();
+			this.label3.Name = "label3";
+			this.label3.Xalign = 0F;
+			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("Win32 Icon:");
+			this.table7.Add (this.label3);
+			global::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.table7 [this.label3]));
+			w8.TopAttach = ((uint)(2));
+			w8.BottomAttach = ((uint)(3));
+			w8.XOptions = ((global::Gtk.AttachOptions)(4));
+			w8.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table7.Gtk.Table+TableChild
+			this.label86 = new global::Gtk.Label ();
+			this.label86.Name = "label86";
+			this.label86.Xalign = 0F;
+			this.label86.LabelProp = global::Mono.Unix.Catalog.GetString ("Compile _Target:");
+			this.label86.UseUnderline = true;
+			this.table7.Add (this.label86);
+			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table7 [this.label86]));
+			w9.XOptions = ((global::Gtk.AttachOptions)(4));
+			w9.YOptions = ((global::Gtk.AttachOptions)(0));
+			// Container child table7.Gtk.Table+TableChild
+			this.label88 = new global::Gtk.Label ();
+			this.label88.Name = "label88";
+			this.label88.Xalign = 0F;
+			this.label88.LabelProp = global::Mono.Unix.Catalog.GetString ("_Main Class:");
+			this.label88.UseUnderline = true;
+			this.table7.Add (this.label88);
+			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table7 [this.label88]));
+			w10.TopAttach = ((uint)(1));
+			w10.BottomAttach = ((uint)(2));
+			w10.XOptions = ((global::Gtk.AttachOptions)(4));
+			w10.YOptions = ((global::Gtk.AttachOptions)(0));
+			// Container child table7.Gtk.Table+TableChild
+			this.mainClassEntry = new global::Gtk.ComboBoxEntry ();
+			this.mainClassEntry.Name = "mainClassEntry";
+			this.table7.Add (this.mainClassEntry);
+			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table7 [this.mainClassEntry]));
+			w11.TopAttach = ((uint)(1));
+			w11.BottomAttach = ((uint)(2));
+			w11.LeftAttach = ((uint)(1));
+			w11.RightAttach = ((uint)(2));
+			w11.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.vbox2.Add (this.table7);
+			global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.table7]));
+			w12.Position = 0;
+			// Container child vbox2.Gtk.Box+BoxChild
+			this.noStdLibCheckButton = new global::Gtk.CheckButton ();
+			this.noStdLibCheckButton.CanFocus = true;
+			this.noStdLibCheckButton.Name = "noStdLibCheckButton";
+			this.noStdLibCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Do not reference mscorlib.dll");
+			this.noStdLibCheckButton.DrawIndicator = true;
+			this.noStdLibCheckButton.UseUnderline = true;
+			this.vbox2.Add (this.noStdLibCheckButton);
+			global::Gtk.Box.BoxChild w13 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.noStdLibCheckButton]));
+			w13.Position = 1;
+			w13.Expand = false;
+			w13.Fill = false;
+			this.hbox5.Add (this.vbox2);
+			global::Gtk.Box.BoxChild w14 = ((global::Gtk.Box.BoxChild)(this.hbox5 [this.vbox2]));
+			w14.Position = 1;
+			this.vbox1.Add (this.hbox5);
+			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox5]));
+			w15.Position = 1;
+			w15.Expand = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.label83 = new global::Gtk.Label ();
+			this.label83.Name = "label83";
+			this.label83.Xalign = 0F;
+			this.label83.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Language Options</b>");
+			this.label83.UseMarkup = true;
+			this.vbox1.Add (this.label83);
+			global::Gtk.Box.BoxChild w16 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label83]));
+			w16.Position = 2;
+			w16.Expand = false;
+			w16.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.label75 = new global::Gtk.Label ();
+			this.label75.WidthRequest = 18;
+			this.label75.Name = "label75";
+			this.vbox1.Add (this.label75);
+			global::Gtk.Box.BoxChild w17 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.label75]));
+			w17.PackType = ((global::Gtk.PackType)(1));
+			w17.Position = 3;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.hbox7 = new global::Gtk.HBox ();
+			this.hbox7.Name = "hbox7";
+			this.hbox7.Spacing = 6;
+			// Container child hbox7.Gtk.Box+BoxChild
+			this.label74 = new global::Gtk.Label ();
+			this.label74.WidthRequest = 18;
+			this.label74.Name = "label74";
+			this.hbox7.Add (this.label74);
+			global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.hbox7 [this.label74]));
+			w18.Position = 0;
+			w18.Expand = false;
+			w18.Fill = false;
+			// Container child hbox7.Gtk.Box+BoxChild
+			this.vbox3 = new global::Gtk.VBox ();
+			this.vbox3.Name = "vbox3";
+			this.vbox3.Spacing = 6;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.table2 = new global::Gtk.Table (((uint)(1)), ((uint)(2)), false);
+			this.table2.Name = "table2";
+			this.table2.RowSpacing = ((uint)(6));
+			this.table2.ColumnSpacing = ((uint)(6));
+			// Container child table2.Gtk.Table+TableChild
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.Xalign = 0F;
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("C# Language Version:");
+			this.table2.Add (this.label2);
+			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table2 [this.label2]));
+			w19.XOptions = ((global::Gtk.AttachOptions)(4));
+			w19.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.langVerCombo = global::Gtk.ComboBox.NewText ();
+			this.langVerCombo.Name = "langVerCombo";
+			this.table2.Add (this.langVerCombo);
+			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table2 [this.langVerCombo]));
+			w20.LeftAttach = ((uint)(1));
+			w20.RightAttach = ((uint)(2));
+			w20.XOptions = ((global::Gtk.AttachOptions)(4));
+			w20.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.vbox3.Add (this.table2);
+			global::Gtk.Box.BoxChild w21 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.table2]));
+			w21.Position = 0;
+			w21.Fill = false;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.allowUnsafeCodeCheckButton = new global::Gtk.CheckButton ();
+			this.allowUnsafeCodeCheckButton.CanFocus = true;
+			this.allowUnsafeCodeCheckButton.Name = "allowUnsafeCodeCheckButton";
+			this.allowUnsafeCodeCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Allow '_unsafe' code");
+			this.allowUnsafeCodeCheckButton.Active = true;
+			this.allowUnsafeCodeCheckButton.DrawIndicator = true;
+			this.allowUnsafeCodeCheckButton.UseUnderline = true;
+			this.vbox3.Add (this.allowUnsafeCodeCheckButton);
+			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.allowUnsafeCodeCheckButton]));
+			w22.Position = 1;
+			w22.Expand = false;
+			w22.Fill = false;
+			this.hbox7.Add (this.vbox3);
+			global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.hbox7 [this.vbox3]));
+			w23.Position = 1;
+			this.vbox1.Add (this.hbox7);
+			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox7]));
+			w24.PackType = ((global::Gtk.PackType)(1));
+			w24.Position = 4;
+			w24.Expand = false;
+			w24.Fill = false;
+			this.Add (this.vbox1);
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.label88.MnemonicWidget = this.mainClassEntry;
+			this.Show ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,422 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
+{
+	public partial class NameConventionEditRuleDialog
+	{
+		private global::Gtk.VBox vbox3;
+		private global::Gtk.HBox hbox3;
+		private global::Gtk.Label label4;
+		private global::Gtk.Entry entryRuleName;
+		private global::Gtk.HBox hbox1;
+		private global::Gtk.Table table1;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow;
+		private global::Gtk.TreeView treeviewEntities;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow1;
+		private global::Gtk.TreeView treeviewAccessibility;
+		private global::Gtk.Label label5;
+		private global::Gtk.Label label6;
+		private global::Gtk.Label label7;
+		private global::Gtk.VBox vbox1;
+		private global::Gtk.CheckButton checkbuttonStatic;
+		private global::Gtk.CheckButton checkbuttonInstanceMembers;
+		private global::Gtk.Table table2;
+		private global::Gtk.Entry entryPrefix;
+		private global::Gtk.Entry entryPrefixAllowed;
+		private global::Gtk.Entry entrySuffix;
+		private global::Gtk.Label label1;
+		private global::Gtk.Label label3;
+		private global::Gtk.Label label8;
+		private global::Gtk.VBox vbox2;
+		private global::Gtk.Label label2;
+		private global::Gtk.VBox vbox4;
+		private global::Gtk.RadioButton radiobuttonPascalCase;
+		private global::Gtk.RadioButton radiobuttonCamelCase;
+		private global::Gtk.RadioButton radiobuttonAllUpper;
+		private global::Gtk.RadioButton radiobuttonAllLower;
+		private global::Gtk.RadioButton radiobuttonFirstUpper;
+		private global::Gtk.Button buttonCancel;
+		private global::Gtk.Button buttonOk;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog
+			this.WidthRequest = 640;
+			this.HeightRequest = 480;
+			this.Name = "MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog";
+			this.Title = global::Mono.Unix.Catalog.GetString ("Edit Naming Rule");
+			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
+			this.Modal = true;
+			this.Resizable = false;
+			this.DestroyWithParent = true;
+			this.SkipPagerHint = true;
+			this.SkipTaskbarHint = true;
+			// Internal child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.VBox
+			global::Gtk.VBox w1 = this.VBox;
+			w1.Name = "dialog1_VBox";
+			w1.BorderWidth = ((uint)(2));
+			// Container child dialog1_VBox.Gtk.Box+BoxChild
+			this.vbox3 = new global::Gtk.VBox ();
+			this.vbox3.Name = "vbox3";
+			this.vbox3.Spacing = 6;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.hbox3 = new global::Gtk.HBox ();
+			this.hbox3.Name = "hbox3";
+			this.hbox3.Spacing = 6;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.label4 = new global::Gtk.Label ();
+			this.label4.Name = "label4";
+			this.label4.Xalign = 1F;
+			this.label4.LabelProp = global::Mono.Unix.Catalog.GetString ("_Rule:");
+			this.label4.UseUnderline = true;
+			this.hbox3.Add (this.label4);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label4]));
+			w2.Position = 0;
+			w2.Expand = false;
+			w2.Fill = false;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.entryRuleName = new global::Gtk.Entry ();
+			this.entryRuleName.CanFocus = true;
+			this.entryRuleName.Name = "entryRuleName";
+			this.entryRuleName.IsEditable = true;
+			this.entryRuleName.InvisibleChar = '●';
+			this.hbox3.Add (this.entryRuleName);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.entryRuleName]));
+			w3.Position = 1;
+			this.vbox3.Add (this.hbox3);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.hbox3]));
+			w4.Position = 0;
+			w4.Expand = false;
+			w4.Fill = false;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.hbox1 = new global::Gtk.HBox ();
+			this.hbox1.Name = "hbox1";
+			this.hbox1.Spacing = 6;
+			// Container child hbox1.Gtk.Box+BoxChild
+			this.table1 = new global::Gtk.Table (((uint)(4)), ((uint)(2)), false);
+			this.table1.Name = "table1";
+			this.table1.RowSpacing = ((uint)(6));
+			this.table1.ColumnSpacing = ((uint)(6));
+			this.table1.BorderWidth = ((uint)(6));
+			// Container child table1.Gtk.Table+TableChild
+			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
+			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
+			this.treeviewEntities = new global::Gtk.TreeView ();
+			this.treeviewEntities.WidthRequest = 0;
+			this.treeviewEntities.CanFocus = true;
+			this.treeviewEntities.Name = "treeviewEntities";
+			this.treeviewEntities.HeadersVisible = false;
+			this.GtkScrolledWindow.Add (this.treeviewEntities);
+			this.table1.Add (this.GtkScrolledWindow);
+			global::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.table1 [this.GtkScrolledWindow]));
+			w6.TopAttach = ((uint)(1));
+			w6.BottomAttach = ((uint)(2));
+			w6.RightAttach = ((uint)(2));
+			w6.XOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
+			this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
+			this.treeviewAccessibility = new global::Gtk.TreeView ();
+			this.treeviewAccessibility.CanFocus = true;
+			this.treeviewAccessibility.Name = "treeviewAccessibility";
+			this.treeviewAccessibility.HeadersVisible = false;
+			this.GtkScrolledWindow1.Add (this.treeviewAccessibility);
+			this.table1.Add (this.GtkScrolledWindow1);
+			global::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.table1 [this.GtkScrolledWindow1]));
+			w8.TopAttach = ((uint)(3));
+			w8.BottomAttach = ((uint)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label5 = new global::Gtk.Label ();
+			this.label5.Name = "label5";
+			this.label5.Xalign = 0F;
+			this.label5.LabelProp = global::Mono.Unix.Catalog.GetString ("_Affected entities:");
+			this.label5.UseUnderline = true;
+			this.table1.Add (this.label5);
+			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table1 [this.label5]));
+			w9.XOptions = ((global::Gtk.AttachOptions)(4));
+			w9.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label6 = new global::Gtk.Label ();
+			this.label6.Name = "label6";
+			this.label6.Xalign = 0F;
+			this.label6.LabelProp = global::Mono.Unix.Catalog.GetString ("_Accessibility:");
+			this.label6.UseUnderline = true;
+			this.table1.Add (this.label6);
+			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table1 [this.label6]));
+			w10.TopAttach = ((uint)(2));
+			w10.BottomAttach = ((uint)(3));
+			w10.XOptions = ((global::Gtk.AttachOptions)(4));
+			w10.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.label7 = new global::Gtk.Label ();
+			this.label7.Name = "label7";
+			this.label7.Xalign = 0F;
+			this.label7.LabelProp = global::Mono.Unix.Catalog.GetString ("Static/Non Static");
+			this.table1.Add (this.label7);
+			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table1 [this.label7]));
+			w11.TopAttach = ((uint)(2));
+			w11.BottomAttach = ((uint)(3));
+			w11.LeftAttach = ((uint)(1));
+			w11.RightAttach = ((uint)(2));
+			w11.XOptions = ((global::Gtk.AttachOptions)(4));
+			w11.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table1.Gtk.Table+TableChild
+			this.vbox1 = new global::Gtk.VBox ();
+			this.vbox1.Name = "vbox1";
+			this.vbox1.Spacing = 6;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.checkbuttonStatic = new global::Gtk.CheckButton ();
+			this.checkbuttonStatic.CanFocus = true;
+			this.checkbuttonStatic.Name = "checkbuttonStatic";
+			this.checkbuttonStatic.Label = global::Mono.Unix.Catalog.GetString ("_Static member and types");
+			this.checkbuttonStatic.Active = true;
+			this.checkbuttonStatic.DrawIndicator = true;
+			this.checkbuttonStatic.UseUnderline = true;
+			this.vbox1.Add (this.checkbuttonStatic);
+			global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.checkbuttonStatic]));
+			w12.Position = 0;
+			w12.Expand = false;
+			w12.Fill = false;
+			// Container child vbox1.Gtk.Box+BoxChild
+			this.checkbuttonInstanceMembers = new global::Gtk.CheckButton ();
+			this.checkbuttonInstanceMembers.CanFocus = true;
+			this.checkbuttonInstanceMembers.Name = "checkbuttonInstanceMembers";
+			this.checkbuttonInstanceMembers.Label = global::Mono.Unix.Catalog.GetString ("_Instance members and locals");
+			this.checkbuttonInstanceMembers.DrawIndicator = true;
+			this.checkbuttonInstanceMembers.UseUnderline = true;
+			this.vbox1.Add (this.checkbuttonInstanceMembers);
+			global::Gtk.Box.BoxChild w13 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.checkbuttonInstanceMembers]));
+			w13.Position = 1;
+			w13.Expand = false;
+			w13.Fill = false;
+			this.table1.Add (this.vbox1);
+			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.table1 [this.vbox1]));
+			w14.TopAttach = ((uint)(3));
+			w14.BottomAttach = ((uint)(4));
+			w14.LeftAttach = ((uint)(1));
+			w14.RightAttach = ((uint)(2));
+			w14.XOptions = ((global::Gtk.AttachOptions)(4));
+			w14.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.hbox1.Add (this.table1);
+			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.table1]));
+			w15.Position = 0;
+			// Container child hbox1.Gtk.Box+BoxChild
+			this.table2 = new global::Gtk.Table (((uint)(4)), ((uint)(2)), false);
+			this.table2.Name = "table2";
+			this.table2.RowSpacing = ((uint)(6));
+			this.table2.ColumnSpacing = ((uint)(6));
+			// Container child table2.Gtk.Table+TableChild
+			this.entryPrefix = new global::Gtk.Entry ();
+			this.entryPrefix.CanFocus = true;
+			this.entryPrefix.Name = "entryPrefix";
+			this.entryPrefix.IsEditable = true;
+			this.entryPrefix.InvisibleChar = '●';
+			this.table2.Add (this.entryPrefix);
+			global::Gtk.Table.TableChild w16 = ((global::Gtk.Table.TableChild)(this.table2 [this.entryPrefix]));
+			w16.LeftAttach = ((uint)(1));
+			w16.RightAttach = ((uint)(2));
+			w16.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.entryPrefixAllowed = new global::Gtk.Entry ();
+			this.entryPrefixAllowed.CanFocus = true;
+			this.entryPrefixAllowed.Name = "entryPrefixAllowed";
+			this.entryPrefixAllowed.IsEditable = true;
+			this.entryPrefixAllowed.InvisibleChar = '●';
+			this.table2.Add (this.entryPrefixAllowed);
+			global::Gtk.Table.TableChild w17 = ((global::Gtk.Table.TableChild)(this.table2 [this.entryPrefixAllowed]));
+			w17.TopAttach = ((uint)(1));
+			w17.BottomAttach = ((uint)(2));
+			w17.LeftAttach = ((uint)(1));
+			w17.RightAttach = ((uint)(2));
+			w17.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.entrySuffix = new global::Gtk.Entry ();
+			this.entrySuffix.CanFocus = true;
+			this.entrySuffix.Name = "entrySuffix";
+			this.entrySuffix.IsEditable = true;
+			this.entrySuffix.InvisibleChar = '●';
+			this.table2.Add (this.entrySuffix);
+			global::Gtk.Table.TableChild w18 = ((global::Gtk.Table.TableChild)(this.table2 [this.entrySuffix]));
+			w18.TopAttach = ((uint)(3));
+			w18.BottomAttach = ((uint)(4));
+			w18.LeftAttach = ((uint)(1));
+			w18.RightAttach = ((uint)(2));
+			w18.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.label1 = new global::Gtk.Label ();
+			this.label1.Name = "label1";
+			this.label1.Xalign = 1F;
+			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Prefix:");
+			this.table2.Add (this.label1);
+			global::Gtk.Table.TableChild w19 = ((global::Gtk.Table.TableChild)(this.table2 [this.label1]));
+			w19.XOptions = ((global::Gtk.AttachOptions)(4));
+			w19.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.label3 = new global::Gtk.Label ();
+			this.label3.Name = "label3";
+			this.label3.Xalign = 1F;
+			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("Suffix:");
+			this.table2.Add (this.label3);
+			global::Gtk.Table.TableChild w20 = ((global::Gtk.Table.TableChild)(this.table2 [this.label3]));
+			w20.TopAttach = ((uint)(3));
+			w20.BottomAttach = ((uint)(4));
+			w20.XOptions = ((global::Gtk.AttachOptions)(4));
+			w20.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.label8 = new global::Gtk.Label ();
+			this.label8.Name = "label8";
+			this.label8.Xalign = 1F;
+			this.label8.LabelProp = global::Mono.Unix.Catalog.GetString ("Optional Prefixes:");
+			this.table2.Add (this.label8);
+			global::Gtk.Table.TableChild w21 = ((global::Gtk.Table.TableChild)(this.table2 [this.label8]));
+			w21.TopAttach = ((uint)(1));
+			w21.BottomAttach = ((uint)(2));
+			w21.XOptions = ((global::Gtk.AttachOptions)(4));
+			w21.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.vbox2 = new global::Gtk.VBox ();
+			this.vbox2.Name = "vbox2";
+			this.vbox2.Spacing = 6;
+			// Container child vbox2.Gtk.Box+BoxChild
+			this.label2 = new global::Gtk.Label ();
+			this.label2.Name = "label2";
+			this.label2.Xalign = 1F;
+			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Style:");
+			this.vbox2.Add (this.label2);
+			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.label2]));
+			w22.Position = 0;
+			w22.Expand = false;
+			w22.Fill = false;
+			this.table2.Add (this.vbox2);
+			global::Gtk.Table.TableChild w23 = ((global::Gtk.Table.TableChild)(this.table2 [this.vbox2]));
+			w23.TopAttach = ((uint)(2));
+			w23.BottomAttach = ((uint)(3));
+			w23.XOptions = ((global::Gtk.AttachOptions)(4));
+			w23.YOptions = ((global::Gtk.AttachOptions)(4));
+			// Container child table2.Gtk.Table+TableChild
+			this.vbox4 = new global::Gtk.VBox ();
+			this.vbox4.Name = "vbox4";
+			this.vbox4.Spacing = 6;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.radiobuttonPascalCase = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString("_PascalCase"));
+			this.radiobuttonPascalCase.CanFocus = true;
+			this.radiobuttonPascalCase.Name = "radiobuttonPascalCase";
+			this.radiobuttonPascalCase.Active = true;
+			this.radiobuttonPascalCase.DrawIndicator = true;
+			this.radiobuttonPascalCase.UseUnderline = true;
+			this.radiobuttonPascalCase.Group = new global::GLib.SList (global::System.IntPtr.Zero);
+			this.vbox4.Add (this.radiobuttonPascalCase);
+			global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonPascalCase]));
+			w24.Position = 0;
+			w24.Expand = false;
+			w24.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.radiobuttonCamelCase = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString("_camelCase"));
+			this.radiobuttonCamelCase.CanFocus = true;
+			this.radiobuttonCamelCase.Name = "radiobuttonCamelCase";
+			this.radiobuttonCamelCase.DrawIndicator = true;
+			this.radiobuttonCamelCase.UseUnderline = true;
+			this.radiobuttonCamelCase.Group = this.radiobuttonPascalCase.Group;
+			this.vbox4.Add (this.radiobuttonCamelCase);
+			global::Gtk.Box.BoxChild w25 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonCamelCase]));
+			w25.Position = 1;
+			w25.Expand = false;
+			w25.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.radiobuttonAllUpper = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString("_ALL__Upper"));
+			this.radiobuttonAllUpper.CanFocus = true;
+			this.radiobuttonAllUpper.Name = "radiobuttonAllUpper";
+			this.radiobuttonAllUpper.DrawIndicator = true;
+			this.radiobuttonAllUpper.UseUnderline = true;
+			this.radiobuttonAllUpper.Group = this.radiobuttonPascalCase.Group;
+			this.vbox4.Add (this.radiobuttonAllUpper);
+			global::Gtk.Box.BoxChild w26 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonAllUpper]));
+			w26.Position = 2;
+			w26.Expand = false;
+			w26.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.radiobuttonAllLower = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString("all__l_ower"));
+			this.radiobuttonAllLower.CanFocus = true;
+			this.radiobuttonAllLower.Name = "radiobuttonAllLower";
+			this.radiobuttonAllLower.DrawIndicator = true;
+			this.radiobuttonAllLower.UseUnderline = true;
+			this.radiobuttonAllLower.Group = this.radiobuttonPascalCase.Group;
+			this.vbox4.Add (this.radiobuttonAllLower);
+			global::Gtk.Box.BoxChild w27 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonAllLower]));
+			w27.Position = 3;
+			w27.Expand = false;
+			w27.Fill = false;
+			// Container child vbox4.Gtk.Box+BoxChild
+			this.radiobuttonFirstUpper = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString("_First__upper"));
+			this.radiobuttonFirstUpper.CanFocus = true;
+			this.radiobuttonFirstUpper.Name = "radiobuttonFirstUpper";
+			this.radiobuttonFirstUpper.DrawIndicator = true;
+			this.radiobuttonFirstUpper.UseUnderline = true;
+			this.radiobuttonFirstUpper.Group = this.radiobuttonPascalCase.Group;
+			this.vbox4.Add (this.radiobuttonFirstUpper);
+			global::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.vbox4 [this.radiobuttonFirstUpper]));
+			w28.Position = 4;
+			w28.Expand = false;
+			w28.Fill = false;
+			this.table2.Add (this.vbox4);
+			global::Gtk.Table.TableChild w29 = ((global::Gtk.Table.TableChild)(this.table2 [this.vbox4]));
+			w29.TopAttach = ((uint)(2));
+			w29.BottomAttach = ((uint)(3));
+			w29.LeftAttach = ((uint)(1));
+			w29.RightAttach = ((uint)(2));
+			w29.YOptions = ((global::Gtk.AttachOptions)(4));
+			this.hbox1.Add (this.table2);
+			global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.table2]));
+			w30.Position = 1;
+			this.vbox3.Add (this.hbox1);
+			global::Gtk.Box.BoxChild w31 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.hbox1]));
+			w31.Position = 1;
+			w1.Add (this.vbox3);
+			global::Gtk.Box.BoxChild w32 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox3]));
+			w32.Position = 0;
+			w32.Padding = ((uint)(6));
+			// Internal child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.ActionArea
+			global::Gtk.HButtonBox w33 = this.ActionArea;
+			w33.Name = "dialog1_ActionArea";
+			w33.Spacing = 10;
+			w33.BorderWidth = ((uint)(5));
+			w33.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonCancel = new global::Gtk.Button ();
+			this.buttonCancel.CanDefault = true;
+			this.buttonCancel.CanFocus = true;
+			this.buttonCancel.Name = "buttonCancel";
+			this.buttonCancel.UseStock = true;
+			this.buttonCancel.UseUnderline = true;
+			this.buttonCancel.Label = "gtk-cancel";
+			this.AddActionWidget (this.buttonCancel, -6);
+			global::Gtk.ButtonBox.ButtonBoxChild w34 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w33 [this.buttonCancel]));
+			w34.Expand = false;
+			w34.Fill = false;
+			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
+			this.buttonOk = new global::Gtk.Button ();
+			this.buttonOk.CanDefault = true;
+			this.buttonOk.CanFocus = true;
+			this.buttonOk.Name = "buttonOk";
+			this.buttonOk.UseStock = true;
+			this.buttonOk.UseUnderline = true;
+			this.buttonOk.Label = "gtk-ok";
+			this.AddActionWidget (this.buttonOk, -5);
+			global::Gtk.ButtonBox.ButtonBoxChild w35 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w33 [this.buttonOk]));
+			w35.Position = 1;
+			w35.Expand = false;
+			w35.Fill = false;
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.DefaultWidth = 646;
+			this.DefaultHeight = 508;
+			this.Show ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.cs ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.cs
--- ./main/src/addins/CSharpBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.cs	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.cs	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,89 @@
+
+// This file has been generated by the GUI designer. Do not modify.
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
+{
+	internal partial class NameConventionPanelWidget
+	{
+		private global::Gtk.HBox hbox3;
+		private global::Gtk.ScrolledWindow GtkScrolledWindow;
+		private global::Gtk.TreeView treeviewConventions;
+		private global::Gtk.VBox vbox3;
+		private global::Gtk.Button buttonEdit;
+		private global::Gtk.Button buttonAdd;
+		private global::Gtk.Button buttonRemove;
+
+		protected virtual void Build ()
+		{
+			global::Stetic.Gui.Initialize (this);
+			// Widget MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget
+			global::Stetic.BinContainer.Attach (this);
+			this.Name = "MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget";
+			// Container child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.Gtk.Container+ContainerChild
+			this.hbox3 = new global::Gtk.HBox ();
+			this.hbox3.Name = "hbox3";
+			this.hbox3.Spacing = 6;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
+			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
+			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
+			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
+			this.treeviewConventions = new global::Gtk.TreeView ();
+			this.treeviewConventions.CanFocus = true;
+			this.treeviewConventions.Name = "treeviewConventions";
+			this.GtkScrolledWindow.Add (this.treeviewConventions);
+			this.hbox3.Add (this.GtkScrolledWindow);
+			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.GtkScrolledWindow]));
+			w2.Position = 0;
+			// Container child hbox3.Gtk.Box+BoxChild
+			this.vbox3 = new global::Gtk.VBox ();
+			this.vbox3.Name = "vbox3";
+			this.vbox3.Spacing = 6;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.buttonEdit = new global::Gtk.Button ();
+			this.buttonEdit.CanFocus = true;
+			this.buttonEdit.Name = "buttonEdit";
+			this.buttonEdit.UseStock = true;
+			this.buttonEdit.UseUnderline = true;
+			this.buttonEdit.Label = "gtk-edit";
+			this.vbox3.Add (this.buttonEdit);
+			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonEdit]));
+			w3.Position = 0;
+			w3.Expand = false;
+			w3.Fill = false;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.buttonAdd = new global::Gtk.Button ();
+			this.buttonAdd.CanFocus = true;
+			this.buttonAdd.Name = "buttonAdd";
+			this.buttonAdd.UseStock = true;
+			this.buttonAdd.UseUnderline = true;
+			this.buttonAdd.Label = "gtk-add";
+			this.vbox3.Add (this.buttonAdd);
+			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonAdd]));
+			w4.Position = 1;
+			w4.Expand = false;
+			w4.Fill = false;
+			// Container child vbox3.Gtk.Box+BoxChild
+			this.buttonRemove = new global::Gtk.Button ();
+			this.buttonRemove.CanFocus = true;
+			this.buttonRemove.Name = "buttonRemove";
+			this.buttonRemove.UseStock = true;
+			this.buttonRemove.UseUnderline = true;
+			this.buttonRemove.Label = "gtk-remove";
+			this.vbox3.Add (this.buttonRemove);
+			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.buttonRemove]));
+			w5.Position = 2;
+			w5.Expand = false;
+			w5.Fill = false;
+			this.hbox3.Add (this.vbox3);
+			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.vbox3]));
+			w6.Position = 1;
+			w6.Expand = false;
+			w6.Fill = false;
+			this.Add (this.hbox3);
+			if ((this.Child != null)) {
+				this.Child.ShowAll ();
+			}
+			this.Hide ();
+		}
+	}
+}
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/gtk-gui/gui.stetic ./main/src/addins/PlayScriptBinding/gtk-gui/gui.stetic
--- ./main/src/addins/CSharpBinding/gtk-gui/gui.stetic	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/gtk-gui/gui.stetic	2013-05-20 13:08:33.000000000 -0700
@@ -10,9 +10,9 @@
     <widget-library name="../../../../build/AddIns/MonoDevelop.DesignerSupport/MonoDevelop.DesignerSupport.dll" />
     <widget-library name="../../../../build/AddIns/DisplayBindings/SourceEditor/MonoDevelop.SourceEditor2.dll" />
     <widget-library name="../../../../build/AddIns/MonoDevelop.Refactoring/MonoDevelop.Refactoring.dll" />
-    <widget-library name="../../../../build/AddIns/BackendBindings/MonoDevelop.CSharpBinding.dll" internal="true" />
+    <widget-library name="../../../../build/AddIns/BackendBindings/MonoDevelop.PlayScriptBinding.dll" internal="true" />
   </import>
-  <widget class="Gtk.Bin" id="MonoDevelop.CSharp.Project.CodeGenerationPanelWidget" design-size="389 412">
+  <widget class="Gtk.Bin" id="MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget" design-size="389 412">
     <property name="MemberName" />
     <property name="GeneratePublic">False</property>
     <child>
@@ -540,7 +540,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Bin" id="MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget" design-size="471 438">
+  <widget class="Gtk.Bin" id="MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget" design-size="471 438">
     <property name="MemberName" />
     <child>
       <widget class="Gtk.VBox" id="vbox1">
@@ -933,7 +933,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Bin" id="MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget" design-size="283 300">
+  <widget class="Gtk.Bin" id="MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget" design-size="283 300">
     <property name="MemberName" />
     <child>
       <widget class="Gtk.VBox" id="vbox1">
@@ -1003,7 +1003,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Dialog" id="MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog" design-size="370 179">
+  <widget class="Gtk.Dialog" id="MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog" design-size="370 179">
     <property name="MemberName" />
     <property name="Visible">False</property>
     <property name="Title" translatable="yes">New Profile</property>
@@ -1130,7 +1130,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Dialog" id="MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog" design-size="880 551">
+  <widget class="Gtk.Dialog" id="MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog" design-size="880 551">
     <property name="MemberName" />
     <property name="Visible">False</property>
     <property name="WindowPosition">CenterOnParent</property>
@@ -1819,9 +1819,10 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Bin" id="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget" design-size="300 300">
+  <widget class="Gtk.Bin" id="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget" design-size="300 300">
     <property name="MemberName" />
     <property name="Visible">False</property>
+    <property name="GeneratePublic">False</property>
     <child>
       <widget class="Gtk.HBox" id="hbox3">
         <property name="MemberName" />
@@ -1906,7 +1907,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Window" id="MonoDevelop.CodeGeneration.GenerateCodeWindow" design-size="288 369">
+  <widget class="Gtk.Window" id="MonoDevelop.PlayScript.CodeGeneration.GenerateCodeWindow" design-size="288 369">
     <property name="MemberName" />
     <property name="Visible">False</property>
     <property name="Title" translatable="yes">GenerateCodeWindow</property>
@@ -1988,7 +1989,7 @@ None</property>
       </widget>
     </child>
   </widget>
-  <widget class="Gtk.Dialog" id="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog" design-size="646 508">
+  <widget class="Gtk.Dialog" id="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog" design-size="646 508">
     <property name="MemberName" />
     <property name="WidthRequest">640</property>
     <property name="HeightRequest">480</property>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/make-addin.sh ./main/src/addins/PlayScriptBinding/make-addin.sh
--- ./main/src/addins/CSharpBinding/make-addin.sh	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/make-addin.sh	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,28 @@
+# Builds the MD addin for the PlayScript binding
+echo "Building the playscript addin and placing in obj/PlayScriptBinding.mpack"
+OBJ=./obj
+IMAGE=$OBJ/PlayScriptBinding.mpack.image
+BUILD="../../../build"
+SRC="../../../../../playscript-mono"
+INST="../../../../../playscript-mono-inst"
+if [ ! -d "$OBJ" ]; then
+  mkdir $OBJ
+fi
+if [ -d "$OBJ/PlayScriptBinding.mpack.image" ]; then
+  rm -rf $OBJ/PlayScriptBinding.mpack.image
+fi
+mkdir $OBJ/PlayScriptBinding.mpack.image
+cp $BUILD/AddIns/BackendBindings/ICSharpCode.NRefactory.PlayScript.dll $IMAGE
+cp $BUILD/AddIns/BackendBindings/MonoDevelop.PlayScriptBinding.dll $IMAGE
+cp $BUILD/AddIns/BackendBindings/MonoDevelop.PlayScriptBinding.dll $IMAGE
+cp $INST/lib/mono/4.0/pscorlib.dll $IMAGE
+cp $INST/lib/mono/4.0/pscorlib_aot.dll $IMAGE
+cp $INST/lib/mono/4.0/PlayScript.Dynamic.dll $IMAGE
+cp $INST/lib/mono/4.0/PlayScript.Dynamic_aot.dll $IMAGE
+cp $INST/lib/mono/4.5/mcs.exe $IMAGE/playc.exe
+cp $SRC/playscript/template_osx/bin/playc $IMAGE
+cp ./addin.info $IMAGE
+rm $OBJ/PlayScriptBinding.mpack.zip
+zip -j $OBJ/PlayScriptBinding.mpack.zip $OBJ/PlayScriptBinding.mpack.image/*
+cp $OBJ/PlayScriptBinding.mpack.zip $OBJ/PlayScriptBinding.mpack
+echo "Finished creating /obj/PlayScriptBinding.mpack MonoDevelop addin."
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/md1format.xml ./main/src/addins/PlayScriptBinding/md1format.xml
--- ./main/src/addins/CSharpBinding/md1format.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/md1format.xml	2013-05-20 13:08:33.000000000 -0700
@@ -1,5 +1,5 @@
 <SerializationMap>
-	<DataItem class = "MonoDevelop.CSharp.Project.CSharpCompilerParameters">
+	<DataItem class = "MonoDevelop.PlayScript.Project.PlayScriptCompilerParameters">
 		<LiteralProperty name="compiler" value="Mcs" />
 		<ItemProperty member="warninglevel" name = "warninglevel"/>
 		<ItemProperty member="noWarnings" name="nowarn" defaultValue=""/>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsConsoleProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/AsConsoleProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/AsConsoleProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsConsoleProject.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,50 @@
+<?xml version="1.0"?>
+<Template originator   = "Ben Cooley"
+          created      = "01/21/2013"
+          lastModified = "01/21/2013">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>ActionScript Console Project</_Name>
+		<_Category>ActionScript</_Category>
+		<Icon>md-project-console|res:playscript-icon-32.png</Icon>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates a new ActionScript console project.</_Description>
+	</TemplateConfiguration>
+	
+	<!-- Actions -->
+	<Actions>
+		<Open filename = "Main.as"/>
+	</Actions>
+	
+	<!-- Template Content -->
+	<Combine name = "${ProjectName}" directory = ".">
+		<Options>
+			<StartupProject>${ProjectName}</StartupProject>
+		</Options>
+		
+		<Project name = "${ProjectName}" directory = ".">
+			<Options ExternalConsole="True" TargetFrameworkVersion = "4.0" />
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+			<Files>
+				<File name="Main.as" AddStandardHeader="True">
+<![CDATA[package
+{
+	public class MainClass
+	{
+		public static function Main():void
+		{
+			trace("Hello World!");
+		}
+	}
+}]]>
+				</File>
+			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
+			</Files>
+		</Project>
+	</Combine>
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsEmptyClass.xft.xml ./main/src/addins/PlayScriptBinding/templates/AsEmptyClass.xft.xml
--- ./main/src/addins/CSharpBinding/templates/AsEmptyClass.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsEmptyClass.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript Class</_Name>
+		<Icon>md-class-file</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty ActionScript class file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public class ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsEmptyFile.xft.xml ./main/src/addins/PlayScriptBinding/templates/AsEmptyFile.xft.xml
--- ./main/src/addins/CSharpBinding/templates/AsEmptyFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsEmptyFile.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty ActionScript file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="EmptyFile" AddStandardHeader="True">
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsEmptyInterface.xft.xml ./main/src/addins/PlayScriptBinding/templates/AsEmptyInterface.xft.xml
--- ./main/src/addins/CSharpBinding/templates/AsEmptyInterface.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsEmptyInterface.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript Interface</_Name>
+		<Icon>md-interface-file</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty ActionScript interface file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public interface ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsEmptyProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/AsEmptyProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/AsEmptyProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsEmptyProject.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "01/10/2001"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>ActionScript Empty Project</_Name>
+		<_Category>ActionScript</_Category>
+		<Icon>md-project|res:playscript-icon-32.png</Icon>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates an empty ActionScript project.</_Description>
+	</TemplateConfiguration>
+	
+	<Combine name = "${ProjectName}" directory = ".">
+		<Project name = "${ProjectName}" directory = ".">
+			<Options TargetFrameworkVersion = "4.0" />		
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+		</Project>
+	</Combine>
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/AsLibrary.xpt.xml ./main/src/addins/PlayScriptBinding/templates/AsLibrary.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/AsLibrary.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/AsLibrary.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,39 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "02/01/2003"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>ActionScript Library</_Name>
+		<_Category>ActionScript</_Category>
+		<Icon>md-project-library|res:playscript-icon-32.png</Icon>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates an empty ActionScript class library</_Description>
+	</TemplateConfiguration>
+	
+	<!-- Actions -->
+	<Actions>
+		<Open filename = "MyClass.as"/>
+	</Actions>
+	
+	<!-- Template Content -->
+	<Combine name = "${ProjectName}" directory = ".">
+		<Options>
+			<StartupProject>${ProjectName}</StartupProject>
+		</Options>
+		
+		<Project name = "${ProjectName}" directory = ".">
+			<Options Target = "Library" PauseConsoleOutput = "False" TargetFrameworkVersion = "4.0" />
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+			<Files>
+				<FileTemplateReference TemplateID="PsEmptyClass" name="MyClass.as" />
+				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
+			</Files>
+		</Project>
+	</Combine>
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/ConsoleProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/ConsoleProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/ConsoleProject.xpt.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/ConsoleProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,48 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "06/10/2001"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Console Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-console|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a new C# console project.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "Program.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options ExternalConsole="True"/>
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-			</References>
-			<Files>
-				<File name="Program.cs" AddStandardHeader="True"><![CDATA[using System;
-
-namespace ${Namespace}
-{
-	class MainClass
-	{
-		public static void Main(string[] args)
-		{
-			Console.WriteLine("Hello World!");
-		}
-	}
-}]]></File>
-			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/EmptyCSharpFile.xft.xml ./main/src/addins/PlayScriptBinding/templates/EmptyCSharpFile.xft.xml
--- ./main/src/addins/CSharpBinding/templates/EmptyCSharpFile.xft.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/EmptyCSharpFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<Template Originator="Mike Krueger" Language="C#" Created="3/09/2001" LastModified="3/09/2001">
-	
-	<TemplateConfiguration>
-		<_Name>Empty File</_Name>
-		<Icon>md-text-file-icon</Icon>
-		<_Category>General</_Category>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# file.</_Description>
-	</TemplateConfiguration>
-	
-	<TemplateFiles>
-		<File DefaultExtension=".cs" DefaultName="EmptyCSharpfile" AddStandardHeader="True">
-		</File>
-	</TemplateFiles>
-	
-	<FileOptions/>
-	
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/EmptyProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/EmptyProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/EmptyProject.xpt.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/EmptyProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "01/10/2001"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Empty Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# project.</_Description>
-	</TemplateConfiguration>
-	
-	<Combine name = "${ProjectName}" directory = ".">
-		<Project name = "${ProjectName}" directory = "."/>
-	</Combine>
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/GtkSharp2Project.xpt.xml ./main/src/addins/PlayScriptBinding/templates/GtkSharp2Project.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/GtkSharp2Project.xpt.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/GtkSharp2Project.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,102 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Ben Motmans"
-          created      = "02/16/2005"
-          lastModified = "02/16/2005">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Gtk# 2.0 Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-gui|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a Gtk# 2.0 project.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "Program.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options Target = "WinExe"/>
-			
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-				<Reference type="Package" SpecificVersion="false" refto="gtk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="gdk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="glib-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="glade-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="pango-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="atk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-			</References>
-		
-			<Files>
-			
-			<!-- A window template -->
-			
-				<Widget>
-					<SteticTemplate>
-					  <widget class="Gtk.Window" id="MainWindow" design-size="400 300">
-					    <property name="Title" translatable="yes">${Name}</property>
-					    <property name="WindowPosition">CenterOnParent</property>
-					    <signal name="DeleteEvent" handler="OnDeleteEvent" />
-				        <child>
-				          <placeholder />
-				        </child>
-					  </widget>			
-					</SteticTemplate>
-					
-					<!-- Class bound to the window -->
-				
-					<File name="MainWindow.cs" AddStandardHeader="True">
-<![CDATA[using System;
-using Gtk;
-
-public partial class MainWindow: Gtk.Window
-{	
-	public MainWindow (): base (Gtk.WindowType.Toplevel)
-	{
-		Build ();
-	}
-	
-	protected void OnDeleteEvent (object sender, DeleteEventArgs a)
-	{
-		Application.Quit ();
-		a.RetVal = true;
-	}
-}]]>
-					</File>
-				</Widget>
-				
-				<!-- The main class -->
-				
-				<File name="Program.cs" AddStandardHeader="True">
-<![CDATA[using System;
-using Gtk;
-
-namespace ${Namespace}
-{
-	class MainClass
-	{
-		public static void Main (string[] args)
-		{
-			Application.Init ();
-			MainWindow win = new MainWindow ();
-			win.Show ();
-			Application.Run ();
-		}
-	}
-}]]>
-				</File>
-				
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/Library.xpt.xml ./main/src/addins/PlayScriptBinding/templates/Library.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/Library.xpt.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/Library.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "02/01/2003"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Library</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-library|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# class library</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "MyClass.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options Target = "Library" PauseConsoleOutput = "False" />
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-			</References>
-			<Files>
-				<FileTemplateReference TemplateID="EmptyClass" name="MyClass.cs" />
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PortableLibrary.xpt.xml ./main/src/addins/PlayScriptBinding/templates/PortableLibrary.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/PortableLibrary.xpt.xml	2013-05-20 13:03:30.000000000 -0700
+++ ./main/src/addins/PlayScriptBinding/templates/PortableLibrary.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,39 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Jeffrey Stedfast"
-          created      = "04/03/2012"
-          lastModified = "04/03/2012">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Portable Library</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-library|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a C# library that can be used in Windows, Silverlight, Windows Phone, Xbox 360, MonoTouch and Mono for Android.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "MyClass.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = "." type = "PortableDotNet">
-			<Options Target = "Library" TargetFrameworkVersion = ".NETPortable,Version=v4.0,Profile=Profile1"/>
-			<References>
-				<Reference type="Gac" refto="System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-				<Reference type="Gac" refto="System.Xml, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-				<Reference type="Gac" refto="System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-			</References>
-			<Files>
-				<FileTemplateReference TemplateID="EmptyClass" name="MyClass.cs" />
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsConsoleProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/PsConsoleProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/PsConsoleProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsConsoleProject.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,50 @@
+<?xml version="1.0"?>
+<Template originator   = "Ben Cooley"
+          created      = "01/21/2013"
+          lastModified = "01/21/2013">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>PlayScript Console Project</_Name>
+		<_Category>PlayScript</_Category>
+		<Icon>md-project-console|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates a new PlayScript console project.</_Description>
+	</TemplateConfiguration>
+	
+	<!-- Actions -->
+	<Actions>
+		<Open filename = "Main.play"/>
+	</Actions>
+	
+	<!-- Template Content -->
+	<Combine name = "${ProjectName}" directory = ".">
+		<Options>
+			<StartupProject>${ProjectName}</StartupProject>
+		</Options>
+		
+		<Project name = "${ProjectName}" directory = ".">
+			<Options ExternalConsole="True" TargetFrameworkVersion = "4.0" />
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+			<Files>
+				<File name="Main.play" AddStandardHeader="True">
+<![CDATA[package
+{
+	public class MainClass
+	{
+		public static function Main():void
+		{
+			trace("Hello World from PlayScript!");
+		}
+	}
+}]]>
+				</File>
+			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
+			</Files>
+		</Project>
+	</Combine>
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsEmptyClass.xft.xml ./main/src/addins/PlayScriptBinding/templates/PsEmptyClass.xft.xml
--- ./main/src/addins/CSharpBinding/templates/PsEmptyClass.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsEmptyClass.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript Class</_Name>
+		<Icon>md-class-file</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript class file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public class ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsEmptyFile.xft.xml ./main/src/addins/PlayScriptBinding/templates/PsEmptyFile.xft.xml
--- ./main/src/addins/CSharpBinding/templates/PsEmptyFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsEmptyFile.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="EmptyFile" AddStandardHeader="True">
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsEmptyInterface.xft.xml ./main/src/addins/PlayScriptBinding/templates/PsEmptyInterface.xft.xml
--- ./main/src/addins/CSharpBinding/templates/PsEmptyInterface.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsEmptyInterface.xft.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript Interface</_Name>
+		<Icon>md-interface-file</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript interface file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public interface ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsEmptyProject.xpt.xml ./main/src/addins/PlayScriptBinding/templates/PsEmptyProject.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/PsEmptyProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsEmptyProject.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "01/10/2001"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>PlayScript Empty Project</_Name>
+		<_Category>PlayScript</_Category>
+		<Icon>md-project|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript project.</_Description>
+	</TemplateConfiguration>
+	
+	<Combine name = "${ProjectName}" directory = ".">
+		<Project name = "${ProjectName}" directory = ".">
+			<Options TargetFrameworkVersion = "4.0" />		
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+		</Project>
+	</Combine>
+</Template>
diff -rupN -x .DS_Store -x '*.png' -x '*.FileIcon' -x '*.in' ./main/src/addins/CSharpBinding/templates/PsLibrary.xpt.xml ./main/src/addins/PlayScriptBinding/templates/PsLibrary.xpt.xml
--- ./main/src/addins/CSharpBinding/templates/PsLibrary.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ./main/src/addins/PlayScriptBinding/templates/PsLibrary.xpt.xml	2013-05-20 13:08:33.000000000 -0700
@@ -0,0 +1,39 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "02/01/2003"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>PlayScript Library</_Name>
+		<_Category>PlayScript</_Category>
+		<Icon>md-project-library|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript class library</_Description>
+	</TemplateConfiguration>
+	
+	<!-- Actions -->
+	<Actions>
+		<Open filename = "MyClass.play"/>
+	</Actions>
+	
+	<!-- Template Content -->
+	<Combine name = "${ProjectName}" directory = ".">
+		<Options>
+			<StartupProject>${ProjectName}</StartupProject>
+		</Options>
+		
+		<Project name = "${ProjectName}" directory = ".">
+			<Options Target = "Library" PauseConsoleOutput = "False" TargetFrameworkVersion = "4.0" />
+			<References>
+				<Reference type="Package" refto="System" />
+				<Reference type="Package" refto="pscorlib_aot" />
+				<Reference type="Package" refto="PlayScript.Dynamic_aot" />
+			</References>
+			<Files>
+				<FileTemplateReference TemplateID="PsEmptyClass" name="MyClass.play" />
+				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
+			</Files>
+		</Project>
+	</Combine>
+</Template>
